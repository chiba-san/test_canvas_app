[{"/Users/a19404057/Documents/assistant-client/assistant-client/examples/todo-canvas-app/src/index.tsx":"1","/Users/a19404057/Documents/assistant-client/assistant-client/examples/todo-canvas-app/src/reportWebVitals.ts":"2","/Users/a19404057/Documents/assistant-client/assistant-client/examples/todo-canvas-app/src/App.tsx":"3","/Users/a19404057/Documents/assistant-client/assistant-client/examples/todo-canvas-app/src/store.ts":"4"},{"size":504,"mtime":1642612620629,"results":"5","hashOfConfig":"6"},{"size":426,"mtime":1642612620629,"results":"7","hashOfConfig":"6"},{"size":4232,"mtime":1642677856888,"results":"8","hashOfConfig":"6"},{"size":1413,"mtime":1642612620629,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jknnar",{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/a19404057/Documents/assistant-client/assistant-client/examples/todo-canvas-app/src/index.tsx",[],"/Users/a19404057/Documents/assistant-client/assistant-client/examples/todo-canvas-app/src/reportWebVitals.ts",[],"/Users/a19404057/Documents/assistant-client/assistant-client/examples/todo-canvas-app/src/App.tsx",["19","20"],"import React, { FC, memo, useReducer, useState, useRef, useEffect } from 'react';\nimport { createSmartappDebugger, createAssistant, AssistantAppState } from '@sberdevices/assistant-client';\nimport './App.css';\n\nimport { reducer } from './store';\n\nconst initializeAssistant = (getState: any) => {\n    if (process.env.NODE_ENV === 'development' && window.Cypress == null) {\n        let result = createSmartappDebugger({\n            token: process.env.REACT_APP_TOKEN ?? '',\n            initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\n            getState,\n            nativePanel: {\n                defaultText: 'Покажи что-нибудь',\n                screenshotMode: false,\n                tabIndex: -1,\n            },\n        });\n        console.log(result);  \n        return result\n    }\n\n    return createAssistant({ getState });\n};\n\nexport const App: FC = memo(() => {\n    const [appState, dispatch] = useReducer(reducer, {\n        notes: [{ id: 'uinmh', title: 'купить хлеб', completed: false }],\n    });\n\n    const [note, setNote] = useState('');\n\n    const assistantStateRef = useRef<AssistantAppState>();\n    const assistantRef = useRef<ReturnType<typeof createAssistant>>();\n\n    useEffect(() => {\n        assistantRef.current = initializeAssistant(() => assistantStateRef.current);\n\n        assistantRef.current.on('data', ({ navigation, action }: any) => {\n            if (navigation) {\n                switch (navigation.command) {\n                    case 'UP':\n                        window.scrollTo(0, window.scrollY - 500);\n                        break;\n                    case 'DOWN':\n                        window.scrollTo(0, window.scrollY + 500);\n                        break;\n                }\n            }\n\n            if (action) {\n                dispatch(action);\n            }\n        });\n    }, []);\n\n    useEffect(() => {\n        assistantStateRef.current = {\n            item_selector: {\n                items: appState.notes.map(({ id, title }, index) => ({\n                    number: index + 1,\n                    id,\n                    title,\n                })),\n            },\n        };\n    }, [appState]);\n\n    const doneNote = (title: string) => {\n        assistantRef.current?.sendData({ action: { action_id: 'buy', parameters: { title } } });\n\n    };\n\n    return (\n        <main className=\"container\">\n            <button \n            className='button'\n            onClick={ () => doneNote(\"OfferDetails1\") } >\n                Купить SberPrime\n            </button>\n            {/* <form\n                onSubmit={(event) => {\n                    event.preventDefault();\n                    dispatch({ type: 'add_note', note });\n                    setNote('');\n                }}\n            >\n                <input\n                    className=\"add-note\"\n                    type=\"text\"\n                    placeholder=\"Add Note\"\n                    value={note}\n                    onChange={({ target: { value } }) => setNote(value)}\n                    required\n                    autoFocus\n                />\n            </form> */}\n            {/* <ul className=\"notes\">\n                {appState.notes.map((note, index) => (\n                    <li className=\"note\" key={note.id}>\n                        <span>\n                            <span style={{ fontWeight: 'bold' }}>{index + 1}. </span>\n                            <span\n                                style={{\n                                    textDecorationLine: note.completed ? 'line-through' : 'none',\n                                }}\n                            >\n                                {note.title}\n                            </span>\n                        </span>\n                        <input\n                            id={`checkbox-note-${note.id}`}\n                            className=\"done-note\"\n                            type=\"checkbox\"\n                            checked={note.completed}\n                            onChange={() => doneNote(note.title)}\n                            disabled={note.completed}\n                        />\n                    </li>\n                ))}\n            </ul> */}\n        </main>\n    );\n});\n","/Users/a19404057/Documents/assistant-client/assistant-client/examples/todo-canvas-app/src/store.ts",[],{"ruleId":"21","severity":1,"message":"22","line":31,"column":12,"nodeType":"23","messageId":"24","endLine":31,"endColumn":16},{"ruleId":"21","severity":1,"message":"25","line":31,"column":18,"nodeType":"23","messageId":"24","endLine":31,"endColumn":25},"@typescript-eslint/no-unused-vars","'note' is assigned a value but never used.","Identifier","unusedVar","'setNote' is assigned a value but never used."]