{"ast":null,"code":"export const reducer = (state, action) => {\n  switch (action.type) {\n    case 'init':\n      return { ...state,\n        notes: [...action.notes]\n      };\n\n    case 'add_note':\n      return { ...state,\n        notes: [...state.notes, {\n          id: Math.random().toString(36).substring(7),\n          title: action.note,\n          completed: false\n        }]\n      };\n\n    case 'done_note':\n      return { ...state,\n        notes: state.notes.map(note => note.id === action.id ? { ...note,\n          completed: true\n        } : note)\n      };\n\n    case 'delete_note':\n      return { ...state,\n        notes: state.notes.filter(({\n          id\n        }) => id !== action.id)\n      };\n\n    default:\n      throw new Error();\n  }\n};","map":{"version":3,"sources":["/Users/a19404057/Documents/assistant-client/assistant-client/examples/todo-canvas-app/src/store.ts"],"names":["reducer","state","action","type","notes","id","Math","random","toString","substring","title","note","completed","map","filter","Error"],"mappings":"AA4BA,OAAO,MAAMA,OAAO,GAAG,CAACC,KAAD,EAAeC,MAAf,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,MAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHG,QAAAA,KAAK,EAAE,CAAC,GAAGF,MAAM,CAACE,KAAX;AAFJ,OAAP;;AAKJ,SAAK,UAAL;AACI,aAAO,EACH,GAAGH,KADA;AAEHG,QAAAA,KAAK,EAAE,CACH,GAAGH,KAAK,CAACG,KADN,EAEH;AACIC,UAAAA,EAAE,EAAEC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,SAA3B,CAAqC,CAArC,CADR;AAEIC,UAAAA,KAAK,EAAER,MAAM,CAACS,IAFlB;AAGIC,UAAAA,SAAS,EAAE;AAHf,SAFG;AAFJ,OAAP;;AAYJ,SAAK,WAAL;AACI,aAAO,EACH,GAAGX,KADA;AAEHG,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYS,GAAZ,CAAiBF,IAAD,IAAWA,IAAI,CAACN,EAAL,KAAYH,MAAM,CAACG,EAAnB,GAAwB,EAAE,GAAGM,IAAL;AAAWC,UAAAA,SAAS,EAAE;AAAtB,SAAxB,GAAuDD,IAAlF;AAFJ,OAAP;;AAKJ,SAAK,aAAL;AACI,aAAO,EACH,GAAGV,KADA;AAEHG,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYU,MAAZ,CAAmB,CAAC;AAAET,UAAAA;AAAF,SAAD,KAAYA,EAAE,KAAKH,MAAM,CAACG,EAA7C;AAFJ,OAAP;;AAKJ;AACI,YAAM,IAAIU,KAAJ,EAAN;AAjCR;AAmCH,CApCM","sourcesContent":["type Note = {\n    id: string;\n    title: string;\n    completed: boolean;\n};\n\ntype State = {\n    notes: Array<Note>;\n};\n\ntype Action =\n    | {\n          type: 'init';\n          notes: Array<Note>;\n      }\n    | {\n          type: 'add_note';\n          note: string;\n      }\n    | {\n          type: 'done_note';\n          id: string;\n      }\n    | {\n          type: 'delete_note';\n          id: string;\n      };\n\nexport const reducer = (state: State, action: Action) => {\n    switch (action.type) {\n        case 'init':\n            return {\n                ...state,\n                notes: [...action.notes],\n            };\n\n        case 'add_note':\n            return {\n                ...state,\n                notes: [\n                    ...state.notes,\n                    {\n                        id: Math.random().toString(36).substring(7),\n                        title: action.note,\n                        completed: false,\n                    },\n                ],\n            };\n\n        case 'done_note':\n            return {\n                ...state,\n                notes: state.notes.map((note) => (note.id === action.id ? { ...note, completed: true } : note)),\n            };\n\n        case 'delete_note':\n            return {\n                ...state,\n                notes: state.notes.filter(({ id }) => id !== action.id),\n            };\n\n        default:\n            throw new Error();\n    }\n};\n"]},"metadata":{},"sourceType":"module"}