{"ast":null,"code":"import { M as MessageNames, d as __awaiter, e as __generator, c as createNanoEvents, a as __assign, p as proto, _ as __rest, b as __spreadArrays, f as createCommonjsModule, h as commonjsRequire, m as minimal, g as commonjsGlobal } from './typings-79533271.js';\n\nvar createClient = function (protocol, provideMeta) {\n  if (provideMeta === void 0) {\n    provideMeta = undefined;\n  }\n\n  var _a = createNanoEvents(),\n      on = _a.on,\n      emit = _a.emit;\n  /** ждет ответ бека и возвращает данные из этого ответа */\n\n\n  var waitForAnswer = function (messageId) {\n    return new Promise(function (resolve) {\n      var off = on('systemMessage', function (systemMessageData, originalMessage) {\n        if (originalMessage.messageId === messageId && (originalMessage.messageName === MessageNames.ANSWER_TO_USER || originalMessage.messageName === MessageNames.DO_NOTHING)) {\n          off();\n          resolve(systemMessageData);\n        }\n      });\n    });\n  };\n  /** отправляет произвольный systemMessage, не подкладывает мету */\n\n\n  var sendData = function (data, messageName) {\n    if (messageName === void 0) {\n      messageName = '';\n    }\n\n    var messageId = protocol.getMessageId();\n    protocol.sendSystemMessage({\n      data: data,\n      messageName: messageName\n    }, true, messageId);\n    return messageId;\n  };\n  /** отправляет cancel на сообщение */\n\n\n  var sendCancel = function (messageId) {\n    protocol.sendCancel({}, true, messageId);\n  };\n  /** отправляет приветствие */\n\n\n  var sendOpenAssistant = function (_a) {\n    var isFirstSession = (_a === void 0 ? {\n      isFirstSession: false\n    } : _a).isFirstSession;\n    return __awaiter(void 0, void 0, void 0, function () {\n      var data, meta, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            data = isFirstSession ? {\n              is_first_session: true\n            } : {};\n            if (!provideMeta) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , provideMeta()];\n\n          case 1:\n            _b = _c.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _b = {};\n            _c.label = 3;\n\n          case 3:\n            meta = _b;\n            return [2\n            /*return*/\n            , waitForAnswer(sendData(__assign(__assign({}, meta), data), 'OPEN_ASSISTANT'))];\n        }\n      });\n    });\n  };\n  /** вызывает sendSystemMessage, куда подкладывает мету */\n\n\n  var sendMeta = function (sendSystemMessage) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var meta, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!provideMeta) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , provideMeta()];\n\n          case 1:\n            _a = _b.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _a = {};\n            _b.label = 3;\n\n          case 3:\n            meta = _a;\n\n            if (Object.keys(meta).length) {\n              sendSystemMessage({\n                data: meta,\n                messageName: ''\n              }, false);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /** отправляет server_action и мету */\n\n\n  var sendServerAction = function (serverAction, appInfo, messageName) {\n    if (messageName === void 0) {\n      messageName = 'SERVER_ACTION';\n    }\n\n    return __awaiter(void 0, void 0, void 0, function () {\n      var messageId;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            messageId = protocol.getMessageId(); // мету и server_action отправляем в одном systemMessage\n\n            return [4\n            /*yield*/\n            , sendMeta(function (_a) {\n              var data = _a.data;\n              protocol.sendSystemMessage({\n                // eslint-disable-next-line @typescript-eslint/camelcase\n                data: __assign(__assign({}, data), {\n                  app_info: appInfo,\n                  server_action: serverAction\n                }),\n                messageName: messageName || 'SERVER_ACTION'\n              }, true, messageId);\n            })];\n\n          case 1:\n            // мету и server_action отправляем в одном systemMessage\n            _a.sent();\n\n            return [2\n            /*return*/\n            , messageId];\n        }\n      });\n    });\n  };\n  /** отправляет текст и текущую мету */\n\n\n  var sendText = function (text, isSsml, shouldSendDisableDubbing) {\n    if (isSsml === void 0) {\n      isSsml = false;\n    }\n\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (text.trim() === '') {\n          return [2\n          /*return*/\n          , undefined];\n        }\n\n        return [2\n        /*return*/\n        , protocol.batch(function (_a) {\n          var sendSystemMessage = _a.sendSystemMessage,\n              clientSendText = _a.sendText,\n              sendSettings = _a.sendSettings,\n              messageId = _a.messageId;\n          return __awaiter(void 0, void 0, void 0, function () {\n            var prevDubbing, sendDisableDubbing;\n            return __generator(this, function (_b) {\n              switch (_b.label) {\n                case 0:\n                  return [4\n                  /*yield*/\n                  , sendMeta(sendSystemMessage)];\n\n                case 1:\n                  _b.sent();\n\n                  prevDubbing = protocol.configuration.settings.dubbing;\n                  sendDisableDubbing = prevDubbing !== -1 && shouldSendDisableDubbing;\n                  if (!sendDisableDubbing) return [3\n                  /*break*/\n                  , 3];\n                  return [4\n                  /*yield*/\n                  , sendSettings({\n                    dubbing: -1\n                  }, false)];\n\n                case 2:\n                  _b.sent();\n\n                  _b.label = 3;\n\n                case 3:\n                  isSsml ? clientSendText(text, {}, 'application/ssml') : clientSendText(text, {});\n\n                  if (sendDisableDubbing) {\n                    sendSettings({\n                      dubbing: prevDubbing\n                    });\n                  }\n\n                  return [2\n                  /*return*/\n                  , messageId];\n              }\n            });\n          });\n        })];\n      });\n    });\n  };\n  /** инициализирует исходящий голосовой поток, факт. передает в callback параметры для отправки голоса,\n   * отправляет мету */\n\n\n  var createVoiceStream = function (callback) {\n    return protocol.batch(function (_a) {\n      var sendSystemMessage = _a.sendSystemMessage,\n          sendVoice = _a.sendVoice,\n          messageId = _a.messageId;\n      return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , callback({\n                sendVoice: sendVoice,\n                messageId: messageId,\n                onMessage: function (cb) {\n                  return protocol.on('incoming', cb);\n                }\n              })];\n\n            case 1:\n              _b.sent();\n\n              sendMeta(sendSystemMessage);\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  var off = protocol.on('incoming', function (message) {\n    var _a;\n\n    if (message.voice) {\n      emit('voice', message.voice.data || new Uint8Array(), message);\n    }\n\n    if ((_a = message.systemMessage) === null || _a === void 0 ? void 0 : _a.data) {\n      emit('systemMessage', JSON.parse(message.systemMessage.data), message);\n    }\n\n    if (message.status) {\n      emit('status', message.status, message);\n    }\n  });\n  return {\n    destroy: function () {\n      off();\n    },\n    createVoiceStream: createVoiceStream,\n    sendData: sendData,\n    sendMeta: sendMeta,\n    sendOpenAssistant: sendOpenAssistant,\n    sendServerAction: sendServerAction,\n    sendText: sendText,\n    sendCancel: sendCancel,\n    on: on,\n    waitForAnswer: waitForAnswer\n  };\n};\n\nvar createClientMethods = function (_a) {\n  var getMessageId = _a.getMessageId,\n      sendMessage = _a.sendMessage;\n\n  var send = function (_a) {\n    var payload = _a.payload,\n        messageId = _a.messageId,\n        other = __rest(_a, [\"payload\", \"messageId\"]);\n\n    sendMessage(__assign(__assign(__assign({\n      messageName: ''\n    }, payload), {\n      messageId: messageId\n    }), other));\n  };\n\n  var sendDevice = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n\n    return send({\n      payload: {\n        device: proto.Device.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n\n  var sendInitialSettings = function (data, last, messageId, params) {\n    if (last === void 0) {\n      last = true;\n    }\n\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n\n    if (params === void 0) {\n      params = {};\n    }\n\n    return send({\n      payload: __assign({\n        initialSettings: proto.InitialSettings.create(data),\n        last: last ? 1 : -1\n      }, params),\n      messageId: messageId\n    });\n  };\n\n  var sendCancel = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n\n    return send({\n      payload: {\n        cancel: proto.Cancel.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n\n  var sendLegacyDevice = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n\n    return send({\n      payload: {\n        legacyDevice: proto.LegacyDevice.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n\n  var sendSettings = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n\n    return send({\n      payload: {\n        settings: proto.Settings.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n\n  var sendText = function (data, params, type, messageId) {\n    var _a;\n\n    if (params === void 0) {\n      params = {};\n    }\n\n    if (type === void 0) {\n      type = '';\n    }\n\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n\n    var text = type ? {\n      data: data,\n      type: type\n    } : {\n      data: data\n    };\n    send(__assign({\n      payload: {\n        text: proto.Text.create(text),\n        last: (_a = params.last) !== null && _a !== void 0 ? _a : 1\n      },\n      messageId: messageId\n    }, params));\n  };\n\n  var sendSystemMessage = function (_a, last, messageId, params) {\n    var data = _a.data,\n        _b = _a.messageName,\n        mesName = _b === void 0 ? '' : _b;\n\n    if (last === void 0) {\n      last = true;\n    }\n\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n\n    if (params === void 0) {\n      params = {};\n    }\n\n    send({\n      payload: __assign({\n        systemMessage: proto.SystemMessage.create({\n          data: JSON.stringify(data)\n        }),\n        messageName: mesName,\n        last: last ? 1 : -1\n      }, params),\n      messageId: messageId\n    });\n  };\n\n  var sendVoice = function (data, last, messageId, mesName, params) {\n    if (last === void 0) {\n      last = true;\n    }\n\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n\n    if (params === void 0) {\n      params = {};\n    }\n\n    return send({\n      payload: __assign({\n        voice: proto.Voice.create({\n          data: new Uint8Array(data)\n        }),\n        messageName: mesName,\n        last: last ? 1 : -1\n      }, params),\n      messageId: messageId\n    });\n  };\n\n  var batch = function (cb) {\n    var batchingMessageId = getMessageId();\n    var lastMessageSent = false;\n\n    var checkLastMessageStatus = function (last) {\n      if (lastMessageSent) {\n        if (last) {\n          throw new Error(\"Can't send two last items in batch\");\n        } else {\n          throw new Error(\"Can't send messages in batch after last message have been sent\");\n        }\n      } else if (last) {\n        lastMessageSent = true;\n      }\n    };\n\n    var upgradedSendText = function () {\n      var _a = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        _a[_i] = arguments[_i];\n      }\n\n      var data = _a[0],\n          params = _a[1],\n          type = _a[2];\n      checkLastMessageStatus((params === null || params === void 0 ? void 0 : params.last) === 1);\n      return sendText(data, params, type, batchingMessageId);\n    };\n\n    var upgradedSendSystemMessage = function (data, last, params) {\n      checkLastMessageStatus(last);\n      return sendSystemMessage(data, last, batchingMessageId, params);\n    };\n\n    var upgradedSendVoice = function (data, last, mesName, params) {\n      checkLastMessageStatus(last);\n      return sendVoice(data, last, batchingMessageId, mesName, params);\n    };\n\n    var upgradedSendSettings = function (data, last, messageId) {\n      checkLastMessageStatus(last);\n      return sendSettings(data, last, messageId);\n    };\n\n    return cb({\n      sendText: upgradedSendText,\n      sendSystemMessage: upgradedSendSystemMessage,\n      sendVoice: upgradedSendVoice,\n      sendSettings: upgradedSendSettings,\n      messageId: batchingMessageId\n    });\n  };\n\n  return {\n    sendDevice: sendDevice,\n    sendInitialSettings: sendInitialSettings,\n    sendCancel: sendCancel,\n    sendLegacyDevice: sendLegacyDevice,\n    sendSettings: sendSettings,\n    sendText: sendText,\n    sendSystemMessage: sendSystemMessage,\n    sendVoice: sendVoice,\n    batch: batch\n  };\n};\n\nvar safeJSONParse = function (str, defaultValue) {\n  try {\n    return JSON.parse(str);\n  } catch (err) {\n    return defaultValue;\n  }\n};\n\nvar compileBasePayload = function (_a) {\n  var userId = _a.userId,\n      token = _a.token,\n      userChannel = _a.userChannel,\n      version = _a.version,\n      messageName = _a.messageName,\n      vpsToken = _a.vpsToken;\n\n  if (version < 3) {\n    return {\n      userId: userId,\n      token: token,\n      userChannel: userChannel,\n      messageName: messageName,\n      vpsToken: vpsToken,\n      version: version\n    };\n  }\n\n  return {\n    token: token,\n    messageName: messageName,\n    version: version\n  };\n};\n\nvar appendHeader = function (uint8Array) {\n  // Добавляем 4 байта в начало с длинной сообщения\n  var arrayBuffer = new ArrayBuffer(4);\n  var dataView = new DataView(arrayBuffer, 0);\n  dataView.setInt32(0, uint8Array.length, true);\n  var newUint8Array = new Uint8Array(4 + uint8Array.length);\n  newUint8Array.set(new Uint8Array(arrayBuffer));\n  newUint8Array.set(uint8Array, 4);\n  return newUint8Array;\n};\n\nvar removeHeader = function (uint8Array) {\n  // Убираем 4 байта в начале с длинной сообщения\n  var newUint8Array = new Uint8Array(uint8Array).slice(4);\n  return newUint8Array;\n};\n\nvar createProtocol = function (transport, _a) {\n  var logger = _a.logger,\n      getToken = _a.getToken,\n      params = __rest(_a, [\"logger\", \"getToken\"]);\n\n  var configuration = __assign(__assign({}, params), {\n    token: ''\n  });\n\n  var url = configuration.url,\n      userId = configuration.userId,\n      userChannel = configuration.userChannel,\n      locale = configuration.locale,\n      device = configuration.device,\n      settings = configuration.settings,\n      legacyDevice = configuration.legacyDevice,\n      version = configuration.version,\n      messageName = configuration.messageName,\n      vpsToken = configuration.vpsToken,\n      meta = configuration.meta;\n  var basePayload = compileBasePayload({\n    userId: userId,\n    token: '',\n    messageName: messageName,\n    vpsToken: vpsToken,\n    userChannel: userChannel,\n    version: version\n  });\n\n  var _b = createNanoEvents(),\n      on = _b.on,\n      emit = _b.emit;\n\n  var subscriptions = [];\n  var messageQueue = [];\n  var initMessageId; // ид инициализационного сообщения, отправим мессаджи в неинициализированный протокол\n\n  var currentSettings = {\n    device: device,\n    legacyDevice: legacyDevice,\n    settings: settings,\n    locale: locale\n  };\n  var currentMessageId = Date.now();\n  var status = 'closed';\n  var destroyed = false;\n  var clearReadyTimer; // ид таймера установки состояния ready\n\n  var getMessageId = function () {\n    return currentMessageId++;\n  };\n\n  var send = function (message) {\n    var createdMessage = proto.Message.create(__assign(__assign({}, basePayload), message));\n    logger === null || logger === void 0 ? void 0 : logger({\n      type: 'outcoming',\n      message: createdMessage\n    });\n    var encodedMessage = proto.Message.encode(createdMessage).finish();\n    var encodedMessageWithHeader = appendHeader(encodedMessage);\n    transport.send(encodedMessageWithHeader);\n    emit('outcoming', createdMessage);\n  };\n\n  var sendMessage = function (message) {\n    // отправляем инициализационные сообщения или все, когда сессия = ready\n    if (status === 'ready' || typeof initMessageId !== undefined && message.messageId === initMessageId) {\n      send(message);\n    } else {\n      // накапливаем сообщения, отправим после успешного коннекта\n      messageQueue.push(message);\n\n      if (status === 'closed' && !destroyed) {\n        transport.open(url);\n      }\n    }\n  };\n\n  var _c = createClientMethods({\n    getMessageId: getMessageId,\n    sendMessage: sendMessage\n  }),\n      sendDeviceOriginal = _c.sendDevice,\n      sendInitialSettingsOriginal = _c.sendInitialSettings,\n      sendCancel = _c.sendCancel,\n      sendLegacyDeviceOriginal = _c.sendLegacyDevice,\n      sendSettingsOriginal = _c.sendSettings,\n      sendText = _c.sendText,\n      sendSystemMessage = _c.sendSystemMessage,\n      sendVoice = _c.sendVoice,\n      batch = _c.batch;\n\n  var sendDevice = function (data) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    currentSettings = __assign(__assign({}, currentSettings), {\n      device: data\n    });\n    return sendDeviceOriginal.apply(void 0, __spreadArrays([data], args));\n  };\n\n  var sendInitialSettings = function (data) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    if (data.device && data.settings) {\n      currentSettings = __assign(__assign({}, currentSettings), {\n        device: data.device,\n        settings: data.settings,\n        locale: data.locale || undefined\n      });\n    }\n\n    return sendInitialSettingsOriginal.apply(void 0, __spreadArrays([data], args));\n  };\n\n  var sendLegacyDevice = function (data) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    currentSettings = __assign(__assign({}, currentSettings), {\n      legacyDevice: data\n    });\n    return sendLegacyDeviceOriginal.apply(void 0, __spreadArrays([data], args));\n  };\n\n  var updateDefaults = function (obj) {\n    Object.assign(basePayload, obj);\n    Object.assign(configuration, obj);\n  };\n\n  var updateDevice = function (obj) {\n    var _a, _b;\n\n    if (obj) {\n      var additionalInfo = obj.additionalInfo,\n          deviceOptions = __rest(obj, [\"additionalInfo\"]);\n\n      var oldInfo = ((_a = currentSettings.device) === null || _a === void 0 ? void 0 : _a.additionalInfo) ? safeJSONParse((_b = currentSettings.device) === null || _b === void 0 ? void 0 : _b.additionalInfo, {}) : {};\n      var newInfo = additionalInfo ? safeJSONParse(additionalInfo, {}) : {};\n      currentSettings.device = __assign(__assign(__assign({}, currentSettings.device), deviceOptions), {\n        additionalInfo: JSON.stringify(__assign(__assign({}, oldInfo), newInfo))\n      });\n    }\n  };\n\n  var updateSettings = function (obj) {\n    Object.assign(currentSettings.settings, obj);\n\n    if (status === 'connected' || status === 'ready') {\n      sendSettingsOriginal(obj);\n    }\n  };\n\n  subscriptions.push(transport.on('connecting', function () {\n    status = 'connecting';\n  }));\n  subscriptions.push(transport.on('close', function () {\n    status = 'closed';\n  }));\n  subscriptions.push(transport.on('ready', function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var _a, _b, _c, _d, e_1;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 2,, 3]);\n\n            _b = (_a = Object).assign;\n            _c = [basePayload];\n            _d = {};\n            return [4\n            /*yield*/\n            , getToken()];\n\n          case 1:\n            _b.apply(_a, _c.concat([(_d.token = _e.sent(), _d)]));\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            e_1 = _e.sent();\n            emit('error', {\n              type: 'GET_TOKEN_ERROR',\n              message: e_1 === null || e_1 === void 0 ? void 0 : e_1.message\n            });\n            return [2\n            /*return*/\n            ];\n\n          case 3:\n            Object.assign(configuration, {\n              token: basePayload.token\n            });\n            initMessageId = getMessageId();\n\n            if (version < 3) {\n              if (version === 1 && currentSettings.legacyDevice) {\n                sendLegacyDevice(currentSettings.legacyDevice, false, initMessageId);\n              } else if (version === 2 && currentSettings.device) {\n                sendDevice(currentSettings.device, false, initMessageId);\n              }\n\n              sendSettingsOriginal(currentSettings.settings, true, initMessageId);\n            } else {\n              sendInitialSettings({\n                userId: userId,\n                userChannel: userChannel,\n                device: currentSettings.device,\n                settings: currentSettings.settings,\n                locale: version > 3 ? currentSettings.locale : undefined\n              }, true, initMessageId, {\n                meta: meta\n              });\n            }\n\n            status = 'connected';\n            clearTimeout(clearReadyTimer); /// считаем коннект = ready, если по истечении таймаута сокет не был разорван\n            /// т.к бек может разрывать сокет, если с settings что-то не так\n\n            clearReadyTimer = window.setTimeout(function () {\n              if (status !== 'connected') {\n                return;\n              }\n\n              status = 'ready';\n\n              while (messageQueue.length > 0) {\n                var message = messageQueue.shift();\n\n                if (message) {\n                  send(message);\n                }\n              }\n\n              emit('ready');\n            }, 500);\n            logger === null || logger === void 0 ? void 0 : logger({\n              type: 'init',\n              params: __assign(__assign({}, configuration), currentSettings)\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }));\n  subscriptions.push(transport.on('message', function (message) {\n    var decodedMessage = proto.Message.decode(removeHeader(message));\n    logger === null || logger === void 0 ? void 0 : logger({\n      type: 'incoming',\n      message: decodedMessage\n    });\n    emit('incoming', decodedMessage);\n  }));\n  return {\n    clearQueue: function () {\n      messageQueue.splice(0, messageQueue.length);\n    },\n    destroy: function () {\n      destroyed = true;\n      transport.close();\n      subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) {\n        return unsubscribe();\n      });\n    },\n    on: on,\n    getMessageId: getMessageId,\n    sendCancel: sendCancel,\n    sendText: sendText,\n    sendSystemMessage: sendSystemMessage,\n    sendVoice: sendVoice,\n    send: sendMessage,\n    batch: batch,\n    changeConfiguration: updateDefaults,\n    changeDevice: updateDevice,\n    changeSettings: updateSettings,\n    reconnect: function () {\n      if (status !== 'closed') {\n        transport.reconnect(url); // даем время случиться close\n      } else {\n        transport.open(url);\n      }\n    },\n\n    get currentMessageId() {\n      return currentMessageId;\n    },\n\n    get configuration() {\n      return configuration;\n    }\n\n  };\n};\n\nvar defaultWSCreator = function (url) {\n  return new WebSocket(url);\n};\n\nvar createTransport = function (createWS) {\n  if (createWS === void 0) {\n    createWS = defaultWSCreator;\n  }\n\n  var _a = createNanoEvents(),\n      on = _a.on,\n      emit = _a.emit;\n\n  var status = 'closed';\n  var stopped = false;\n  var ws;\n  var timeOut; // ид таймера автореконнекта\n\n  var retries = 0; // количество попыток коннекта при ошибке\n\n  var close = function () {\n    stopped = true;\n    ws && ws.close(); // статус изменится по подписке\n\n    clearTimeout(timeOut);\n    timeOut = undefined;\n  };\n\n  var send = function (data) {\n    if (!navigator.onLine) {\n      close();\n      emit('error');\n      return;\n    }\n\n    ws.send(data);\n  };\n\n  var open = function (url) {\n    if (status !== 'closed') {\n      return;\n    }\n\n    status = 'connecting';\n    emit('connecting'); // TODO: нужен таймаут для подключения\n\n    ws = createWS(url);\n    ws.binaryType = 'arraybuffer';\n    ws.addEventListener('open', function () {\n      if (ws.readyState === 1) {\n        retries = 0; // сбрасываем количество попыток реконнекта\n\n        status = 'ready';\n        emit('ready');\n      }\n    });\n    ws.addEventListener('close', function () {\n      status = 'closed';\n      emit('close');\n    });\n    ws.addEventListener('error', function (e) {\n      if (status !== 'connecting') {\n        throw e;\n      } // пробуем переподключаться, если возникла ошибка при коннекте\n\n\n      if (!ws || ws.readyState === 3 && !stopped) {\n        if (timeOut) {\n          clearTimeout(timeOut);\n        }\n\n        if (retries < 3) {\n          timeOut = window.setTimeout(function () {\n            open(url);\n            retries++;\n          }, 300 * retries);\n        } else {\n          retries = 0;\n          emit('error', e);\n        }\n      }\n    });\n    ws.addEventListener('message', function (e) {\n      emit('message', e.data);\n    });\n  };\n\n  var reconnect = function (url) {\n    if (status === 'closed') {\n      open(url);\n      return;\n    }\n\n    close();\n    setTimeout(function () {\n      return reconnect(url);\n    });\n  };\n\n  return {\n    send: send,\n    open: open,\n    close: close,\n    reconnect: reconnect,\n    on: on\n  };\n};\n\nvar getMetaPermissons = function (permission) {\n  return Object.keys(permission).map(function (key) {\n    return {\n      type: key,\n      status: permission[key]\n    };\n  });\n};\n\nvar getCurrentLocation = function () {\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2\n      /*return*/\n      , new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(function (_a) {\n          var coords = _a.coords,\n              timestamp = _a.timestamp;\n          resolve({\n            lat: coords.latitude.toString(),\n            lon: coords.longitude.toString(),\n            accuracy: coords.accuracy,\n            timestamp: timestamp\n          });\n        }, reject, {\n          timeout: 5000\n        });\n      })];\n    });\n  });\n};\n\nvar getTime = function () {\n  return {\n    // Здесь нужен полифилл, т.к. `Intl.DateTimeFormat().resolvedOptions().timeZone` - возвращает пустую строку\n    timezone_id: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    timezone_offset_sec: -new Date().getTimezoneOffset() * 60,\n    timestamp: Date.now()\n  };\n};\n\nvar getAnswerForRequestPermissions = function (requestMessageId, appInfo, items) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var permissions, response;\n    return __generator(this, function (_a) {\n      permissions = {\n        record_audio: 'denied_once',\n        geo: 'denied_once',\n        read_contacts: 'denied_permanently',\n        push: 'denied_once'\n      };\n      response = {\n        auto_listening: false,\n        app_info: appInfo,\n        meta: {\n          time: getTime(),\n          permissions: []\n        },\n        server_action: {\n          action_id: 'command_response',\n          request_message_id: requestMessageId,\n          command_response: {\n            request_permissions: {\n              permissions: []\n            }\n          }\n        }\n      };\n      return [2\n      /*return*/\n      , Promise.all(items.map(function (permission) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var _a, location_1, _b;\n\n          var _c, _d;\n\n          return __generator(this, function (_e) {\n            switch (_e.label) {\n              case 0:\n                _a = permission;\n\n                switch (_a) {\n                  case 'geo':\n                    return [3\n                    /*break*/\n                    , 1];\n                }\n\n                return [3\n                /*break*/\n                , 5];\n\n              case 1:\n                _e.trys.push([1, 3,, 4]);\n\n                return [4\n                /*yield*/\n                , getCurrentLocation()];\n\n              case 2:\n                location_1 = _e.sent();\n                permissions.geo = 'granted';\n                response.meta.location = location_1;\n                (_c = response.server_action.command_response.request_permissions) === null || _c === void 0 ? void 0 : _c.permissions.push({\n                  type: 'geo',\n                  status: 'granted'\n                });\n                return [3\n                /*break*/\n                , 4];\n\n              case 3:\n                _b = _e.sent();\n                permissions.geo = 'denied_permanently';\n                (_d = response.server_action.command_response.request_permissions) === null || _d === void 0 ? void 0 : _d.permissions.push({\n                  type: 'geo',\n                  status: 'denied_permanently'\n                });\n                return [3\n                /*break*/\n                , 4];\n\n              case 4:\n                return [3\n                /*break*/\n                , 6];\n\n              case 5:\n                // eslint-disable-next-line no-console\n                console.warn('Unsupported permission request:', permission);\n                _e.label = 6;\n\n              case 6:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      })).then(function () {\n        response.meta.permissions = getMetaPermissons(permissions);\n        return response;\n      })];\n    });\n  });\n};\n\nvar mtt = createCommonjsModule(function (module) {\n  /*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n  (function (global, factory) {\n    /* global define, require, module */\n\n    /* AMD */\n    if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports) module.exports = factory(minimal);\n  })(commonjsGlobal, function ($protobuf) {\n    // Common aliases\n    var $Reader = $protobuf.Reader,\n        $Writer = $protobuf.Writer,\n        $util = $protobuf.util; // Exported root namespace\n\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n    $root.Music2TrackProtocol = function () {\n      /**\n       * Namespace Music2TrackProtocol.\n       * @exports Music2TrackProtocol\n       * @namespace\n       */\n      var Music2TrackProtocol = {};\n\n      Music2TrackProtocol.DecoderResult = function () {\n        /**\n         * Properties of a DecoderResult.\n         * @memberof Music2TrackProtocol\n         * @interface IDecoderResult\n         * @property {string|null} [result] DecoderResult result\n         * @property {boolean|null} [isMusicFound] DecoderResult isMusicFound\n         * @property {boolean|null} [isFinal] DecoderResult isFinal\n         */\n\n        /**\n         * Constructs a new DecoderResult.\n         * @memberof Music2TrackProtocol\n         * @classdesc Represents a DecoderResult.\n         * @implements IDecoderResult\n         * @constructor\n         * @param {Music2TrackProtocol.IDecoderResult=} [properties] Properties to set\n         */\n        function DecoderResult(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n        /**\n         * DecoderResult result.\n         * @member {string} result\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @instance\n         */\n\n\n        DecoderResult.prototype.result = \"\";\n        /**\n         * DecoderResult isMusicFound.\n         * @member {boolean} isMusicFound\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @instance\n         */\n\n        DecoderResult.prototype.isMusicFound = false;\n        /**\n         * DecoderResult isFinal.\n         * @member {boolean} isFinal\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @instance\n         */\n\n        DecoderResult.prototype.isFinal = false;\n        /**\n         * Creates a new DecoderResult instance using the specified properties.\n         * @function create\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Music2TrackProtocol.IDecoderResult=} [properties] Properties to set\n         * @returns {Music2TrackProtocol.DecoderResult} DecoderResult instance\n         */\n\n        DecoderResult.create = function create(properties) {\n          return new DecoderResult(properties);\n        };\n        /**\n         * Encodes the specified DecoderResult message. Does not implicitly {@link Music2TrackProtocol.DecoderResult.verify|verify} messages.\n         * @function encode\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Music2TrackProtocol.IDecoderResult} message DecoderResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n\n\n        DecoderResult.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.result != null && Object.hasOwnProperty.call(message, \"result\")) writer.uint32(\n          /* id 1, wireType 2 =*/\n          10).string(message.result);\n          if (message.isMusicFound != null && Object.hasOwnProperty.call(message, \"isMusicFound\")) writer.uint32(\n          /* id 2, wireType 0 =*/\n          16).bool(message.isMusicFound);\n          if (message.isFinal != null && Object.hasOwnProperty.call(message, \"isFinal\")) writer.uint32(\n          /* id 3, wireType 0 =*/\n          24).bool(message.isFinal);\n          return writer;\n        };\n        /**\n         * Encodes the specified DecoderResult message, length delimited. Does not implicitly {@link Music2TrackProtocol.DecoderResult.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Music2TrackProtocol.IDecoderResult} message DecoderResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n\n\n        DecoderResult.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n        /**\n         * Decodes a DecoderResult message from the specified reader or buffer.\n         * @function decode\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n\n\n        DecoderResult.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.Music2TrackProtocol.DecoderResult();\n\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n\n            switch (tag >>> 3) {\n              case 1:\n                message.result = reader.string();\n                break;\n\n              case 2:\n                message.isMusicFound = reader.bool();\n                break;\n\n              case 3:\n                message.isFinal = reader.bool();\n                break;\n\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n\n          return message;\n        };\n        /**\n         * Decodes a DecoderResult message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n\n\n        DecoderResult.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n        /**\n         * Verifies a DecoderResult message.\n         * @function verify\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n\n\n        DecoderResult.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n          if (message.result != null && message.hasOwnProperty(\"result\")) if (!$util.isString(message.result)) return \"result: string expected\";\n          if (message.isMusicFound != null && message.hasOwnProperty(\"isMusicFound\")) if (typeof message.isMusicFound !== \"boolean\") return \"isMusicFound: boolean expected\";\n          if (message.isFinal != null && message.hasOwnProperty(\"isFinal\")) if (typeof message.isFinal !== \"boolean\") return \"isFinal: boolean expected\";\n          return null;\n        };\n        /**\n         * Creates a DecoderResult message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n         */\n\n\n        DecoderResult.fromObject = function fromObject(object) {\n          if (object instanceof $root.Music2TrackProtocol.DecoderResult) return object;\n          var message = new $root.Music2TrackProtocol.DecoderResult();\n          if (object.result != null) message.result = String(object.result);\n          if (object.isMusicFound != null) message.isMusicFound = Boolean(object.isMusicFound);\n          if (object.isFinal != null) message.isFinal = Boolean(object.isFinal);\n          return message;\n        };\n        /**\n         * Creates a plain object from a DecoderResult message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @static\n         * @param {Music2TrackProtocol.DecoderResult} message DecoderResult\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n\n\n        DecoderResult.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n\n          if (options.defaults) {\n            object.result = \"\";\n            object.isMusicFound = false;\n            object.isFinal = false;\n          }\n\n          if (message.result != null && message.hasOwnProperty(\"result\")) object.result = message.result;\n          if (message.isMusicFound != null && message.hasOwnProperty(\"isMusicFound\")) object.isMusicFound = message.isMusicFound;\n          if (message.isFinal != null && message.hasOwnProperty(\"isFinal\")) object.isFinal = message.isFinal;\n          return object;\n        };\n        /**\n         * Converts this DecoderResult to JSON.\n         * @function toJSON\n         * @memberof Music2TrackProtocol.DecoderResult\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n\n\n        DecoderResult.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DecoderResult;\n      }();\n\n      Music2TrackProtocol.ErrorResponse = function () {\n        /**\n         * Properties of an ErrorResponse.\n         * @memberof Music2TrackProtocol\n         * @interface IErrorResponse\n         * @property {string|null} [errorMessage] ErrorResponse errorMessage\n         * @property {number|null} [errorCode] ErrorResponse errorCode\n         */\n\n        /**\n         * Constructs a new ErrorResponse.\n         * @memberof Music2TrackProtocol\n         * @classdesc Represents an ErrorResponse.\n         * @implements IErrorResponse\n         * @constructor\n         * @param {Music2TrackProtocol.IErrorResponse=} [properties] Properties to set\n         */\n        function ErrorResponse(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n        /**\n         * ErrorResponse errorMessage.\n         * @member {string} errorMessage\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @instance\n         */\n\n\n        ErrorResponse.prototype.errorMessage = \"\";\n        /**\n         * ErrorResponse errorCode.\n         * @member {number} errorCode\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @instance\n         */\n\n        ErrorResponse.prototype.errorCode = 0;\n        /**\n         * Creates a new ErrorResponse instance using the specified properties.\n         * @function create\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Music2TrackProtocol.IErrorResponse=} [properties] Properties to set\n         * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse instance\n         */\n\n        ErrorResponse.create = function create(properties) {\n          return new ErrorResponse(properties);\n        };\n        /**\n         * Encodes the specified ErrorResponse message. Does not implicitly {@link Music2TrackProtocol.ErrorResponse.verify|verify} messages.\n         * @function encode\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Music2TrackProtocol.IErrorResponse} message ErrorResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n\n\n        ErrorResponse.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\")) writer.uint32(\n          /* id 1, wireType 2 =*/\n          10).string(message.errorMessage);\n          if (message.errorCode != null && Object.hasOwnProperty.call(message, \"errorCode\")) writer.uint32(\n          /* id 2, wireType 0 =*/\n          16).int32(message.errorCode);\n          return writer;\n        };\n        /**\n         * Encodes the specified ErrorResponse message, length delimited. Does not implicitly {@link Music2TrackProtocol.ErrorResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Music2TrackProtocol.IErrorResponse} message ErrorResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n\n\n        ErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n        /**\n         * Decodes an ErrorResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n\n\n        ErrorResponse.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.Music2TrackProtocol.ErrorResponse();\n\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n\n            switch (tag >>> 3) {\n              case 1:\n                message.errorMessage = reader.string();\n                break;\n\n              case 2:\n                message.errorCode = reader.int32();\n                break;\n\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n\n          return message;\n        };\n        /**\n         * Decodes an ErrorResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n\n\n        ErrorResponse.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n        /**\n         * Verifies an ErrorResponse message.\n         * @function verify\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n\n\n        ErrorResponse.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n          if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\")) if (!$util.isString(message.errorMessage)) return \"errorMessage: string expected\";\n          if (message.errorCode != null && message.hasOwnProperty(\"errorCode\")) if (!$util.isInteger(message.errorCode)) return \"errorCode: integer expected\";\n          return null;\n        };\n        /**\n         * Creates an ErrorResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n         */\n\n\n        ErrorResponse.fromObject = function fromObject(object) {\n          if (object instanceof $root.Music2TrackProtocol.ErrorResponse) return object;\n          var message = new $root.Music2TrackProtocol.ErrorResponse();\n          if (object.errorMessage != null) message.errorMessage = String(object.errorMessage);\n          if (object.errorCode != null) message.errorCode = object.errorCode | 0;\n          return message;\n        };\n        /**\n         * Creates a plain object from an ErrorResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @static\n         * @param {Music2TrackProtocol.ErrorResponse} message ErrorResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n\n\n        ErrorResponse.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n\n          if (options.defaults) {\n            object.errorMessage = \"\";\n            object.errorCode = 0;\n          }\n\n          if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\")) object.errorMessage = message.errorMessage;\n          if (message.errorCode != null && message.hasOwnProperty(\"errorCode\")) object.errorCode = message.errorCode;\n          return object;\n        };\n        /**\n         * Converts this ErrorResponse to JSON.\n         * @function toJSON\n         * @memberof Music2TrackProtocol.ErrorResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n\n\n        ErrorResponse.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ErrorResponse;\n      }();\n\n      Music2TrackProtocol.MttResponse = function () {\n        /**\n         * Properties of a MttResponse.\n         * @memberof Music2TrackProtocol\n         * @interface IMttResponse\n         * @property {Music2TrackProtocol.IDecoderResult|null} [decoderResultField] MttResponse decoderResultField\n         * @property {Music2TrackProtocol.IErrorResponse|null} [errorResponse] MttResponse errorResponse\n         */\n\n        /**\n         * Constructs a new MttResponse.\n         * @memberof Music2TrackProtocol\n         * @classdesc Represents a MttResponse.\n         * @implements IMttResponse\n         * @constructor\n         * @param {Music2TrackProtocol.IMttResponse=} [properties] Properties to set\n         */\n        function MttResponse(properties) {\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n        /**\n         * MttResponse decoderResultField.\n         * @member {Music2TrackProtocol.IDecoderResult|null|undefined} decoderResultField\n         * @memberof Music2TrackProtocol.MttResponse\n         * @instance\n         */\n\n\n        MttResponse.prototype.decoderResultField = null;\n        /**\n         * MttResponse errorResponse.\n         * @member {Music2TrackProtocol.IErrorResponse|null|undefined} errorResponse\n         * @memberof Music2TrackProtocol.MttResponse\n         * @instance\n         */\n\n        MttResponse.prototype.errorResponse = null; // OneOf field names bound to virtual getters and setters\n\n        var $oneOfFields;\n        /**\n         * MttResponse MessageType.\n         * @member {\"decoderResultField\"|\"errorResponse\"|undefined} MessageType\n         * @memberof Music2TrackProtocol.MttResponse\n         * @instance\n         */\n\n        Object.defineProperty(MttResponse.prototype, \"MessageType\", {\n          get: $util.oneOfGetter($oneOfFields = [\"decoderResultField\", \"errorResponse\"]),\n          set: $util.oneOfSetter($oneOfFields)\n        });\n        /**\n         * Creates a new MttResponse instance using the specified properties.\n         * @function create\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Music2TrackProtocol.IMttResponse=} [properties] Properties to set\n         * @returns {Music2TrackProtocol.MttResponse} MttResponse instance\n         */\n\n        MttResponse.create = function create(properties) {\n          return new MttResponse(properties);\n        };\n        /**\n         * Encodes the specified MttResponse message. Does not implicitly {@link Music2TrackProtocol.MttResponse.verify|verify} messages.\n         * @function encode\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Music2TrackProtocol.IMttResponse} message MttResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n\n\n        MttResponse.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.decoderResultField != null && Object.hasOwnProperty.call(message, \"decoderResultField\")) $root.Music2TrackProtocol.DecoderResult.encode(message.decoderResultField, writer.uint32(\n          /* id 1, wireType 2 =*/\n          10).fork()).ldelim();\n          if (message.errorResponse != null && Object.hasOwnProperty.call(message, \"errorResponse\")) $root.Music2TrackProtocol.ErrorResponse.encode(message.errorResponse, writer.uint32(\n          /* id 2, wireType 2 =*/\n          18).fork()).ldelim();\n          return writer;\n        };\n        /**\n         * Encodes the specified MttResponse message, length delimited. Does not implicitly {@link Music2TrackProtocol.MttResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Music2TrackProtocol.IMttResponse} message MttResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n\n\n        MttResponse.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n        /**\n         * Decodes a MttResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Music2TrackProtocol.MttResponse} MttResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n\n\n        MttResponse.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.Music2TrackProtocol.MttResponse();\n\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n\n            switch (tag >>> 3) {\n              case 1:\n                message.decoderResultField = $root.Music2TrackProtocol.DecoderResult.decode(reader, reader.uint32());\n                break;\n\n              case 2:\n                message.errorResponse = $root.Music2TrackProtocol.ErrorResponse.decode(reader, reader.uint32());\n                break;\n\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n\n          return message;\n        };\n        /**\n         * Decodes a MttResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Music2TrackProtocol.MttResponse} MttResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n\n\n        MttResponse.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n        /**\n         * Verifies a MttResponse message.\n         * @function verify\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n\n\n        MttResponse.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n          var properties = {};\n\n          if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n            properties.MessageType = 1;\n            {\n              var error = $root.Music2TrackProtocol.DecoderResult.verify(message.decoderResultField);\n              if (error) return \"decoderResultField.\" + error;\n            }\n          }\n\n          if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n            if (properties.MessageType === 1) return \"MessageType: multiple values\";\n            properties.MessageType = 1;\n            {\n              var error = $root.Music2TrackProtocol.ErrorResponse.verify(message.errorResponse);\n              if (error) return \"errorResponse.\" + error;\n            }\n          }\n\n          return null;\n        };\n        /**\n         * Creates a MttResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Music2TrackProtocol.MttResponse} MttResponse\n         */\n\n\n        MttResponse.fromObject = function fromObject(object) {\n          if (object instanceof $root.Music2TrackProtocol.MttResponse) return object;\n          var message = new $root.Music2TrackProtocol.MttResponse();\n\n          if (object.decoderResultField != null) {\n            if (typeof object.decoderResultField !== \"object\") throw TypeError(\".Music2TrackProtocol.MttResponse.decoderResultField: object expected\");\n            message.decoderResultField = $root.Music2TrackProtocol.DecoderResult.fromObject(object.decoderResultField);\n          }\n\n          if (object.errorResponse != null) {\n            if (typeof object.errorResponse !== \"object\") throw TypeError(\".Music2TrackProtocol.MttResponse.errorResponse: object expected\");\n            message.errorResponse = $root.Music2TrackProtocol.ErrorResponse.fromObject(object.errorResponse);\n          }\n\n          return message;\n        };\n        /**\n         * Creates a plain object from a MttResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Music2TrackProtocol.MttResponse\n         * @static\n         * @param {Music2TrackProtocol.MttResponse} message MttResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n\n\n        MttResponse.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n\n          if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n            object.decoderResultField = $root.Music2TrackProtocol.DecoderResult.toObject(message.decoderResultField, options);\n            if (options.oneofs) object.MessageType = \"decoderResultField\";\n          }\n\n          if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n            object.errorResponse = $root.Music2TrackProtocol.ErrorResponse.toObject(message.errorResponse, options);\n            if (options.oneofs) object.MessageType = \"errorResponse\";\n          }\n\n          return object;\n        };\n        /**\n         * Converts this MttResponse to JSON.\n         * @function toJSON\n         * @memberof Music2TrackProtocol.MttResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n\n\n        MttResponse.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return MttResponse;\n      }();\n\n      return Music2TrackProtocol;\n    }();\n\n    return $root;\n  });\n});\n\nvar createMusicRecognizer = function (voiceListener) {\n  var off;\n  var status = 'inactive';\n  var currentMessageId;\n\n  var stop = function () {\n    if (voiceListener.status !== 'stopped') {\n      status = 'inactive';\n      voiceListener.stop();\n    }\n  };\n\n  var start = function (_a) {\n    var sendVoice = _a.sendVoice,\n        messageId = _a.messageId,\n        onMessage = _a.onMessage;\n    return voiceListener.listen(function (data, last) {\n      return !last && sendVoice(data, last, MessageNames.MUSIC_RECOGNITION);\n    }).then(function () {\n      status = 'active';\n      currentMessageId = messageId;\n      off = onMessage(function (message) {\n        var _a, _b;\n\n        if (message.status && message.status.code != null && message.status.code < 0) {\n          off();\n          stop();\n        }\n\n        if (message.messageId === messageId && message.messageName.toUpperCase() === MessageNames.MUSIC_RECOGNITION) {\n          if (!((_b = (_a = message.bytes) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.length)) {\n            return;\n          }\n\n          var _c = mtt.Music2TrackProtocol.MttResponse.decode(message.bytes.data),\n              decoderResultField = _c.decoderResultField,\n              errorResponse = _c.errorResponse;\n\n          if ((decoderResultField === null || decoderResultField === void 0 ? void 0 : decoderResultField.isFinal) || errorResponse) {\n            off();\n            stop();\n          }\n        }\n      });\n    });\n  };\n\n  return {\n    start: start,\n    stop: stop,\n\n    get status() {\n      return status;\n    },\n\n    get messageId() {\n      return currentMessageId;\n    }\n\n  };\n};\n\nvar asr = createCommonjsModule(function (module) {\n  /*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n  (function (global, factory) {\n    /* global define, require, module */\n\n    /* AMD */\n    if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports) module.exports = factory(minimal);\n  })(commonjsGlobal, function ($protobuf) {\n    // Common aliases\n    var $Reader = $protobuf.Reader,\n        $Writer = $protobuf.Writer,\n        $util = $protobuf.util; // Exported root namespace\n\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n    $root.Variables = function () {\n      /**\n       * Properties of a Variables.\n       * @exports IVariables\n       * @interface IVariables\n       * @property {Object.<string,string>|null} [variables] Variables variables\n       */\n\n      /**\n       * Constructs a new Variables.\n       * @exports Variables\n       * @classdesc Represents a Variables.\n       * @implements IVariables\n       * @constructor\n       * @param {IVariables=} [properties] Properties to set\n       */\n      function Variables(properties) {\n        this.variables = {};\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Variables variables.\n       * @member {Object.<string,string>} variables\n       * @memberof Variables\n       * @instance\n       */\n\n\n      Variables.prototype.variables = $util.emptyObject;\n      /**\n       * Creates a new Variables instance using the specified properties.\n       * @function create\n       * @memberof Variables\n       * @static\n       * @param {IVariables=} [properties] Properties to set\n       * @returns {Variables} Variables instance\n       */\n\n      Variables.create = function create(properties) {\n        return new Variables(properties);\n      };\n      /**\n       * Encodes the specified Variables message. Does not implicitly {@link Variables.verify|verify} messages.\n       * @function encode\n       * @memberof Variables\n       * @static\n       * @param {IVariables} message Variables message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Variables.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.variables != null && Object.hasOwnProperty.call(message, \"variables\")) for (var keys = Object.keys(message.variables), i = 0; i < keys.length; ++i) writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).fork().uint32(\n        /* id 1, wireType 2 =*/\n        10).string(keys[i]).uint32(\n        /* id 2, wireType 2 =*/\n        18).string(message.variables[keys[i]]).ldelim();\n        return writer;\n      };\n      /**\n       * Encodes the specified Variables message, length delimited. Does not implicitly {@link Variables.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Variables\n       * @static\n       * @param {IVariables} message Variables message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Variables.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a Variables message from the specified reader or buffer.\n       * @function decode\n       * @memberof Variables\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Variables} Variables\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Variables.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Variables(),\n            key,\n            value;\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              if (message.variables === $util.emptyObject) message.variables = {};\n              var end2 = reader.uint32() + reader.pos;\n              key = \"\";\n              value = \"\";\n\n              while (reader.pos < end2) {\n                var tag2 = reader.uint32();\n\n                switch (tag2 >>> 3) {\n                  case 1:\n                    key = reader.string();\n                    break;\n\n                  case 2:\n                    value = reader.string();\n                    break;\n\n                  default:\n                    reader.skipType(tag2 & 7);\n                    break;\n                }\n              }\n\n              message.variables[key] = value;\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a Variables message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Variables\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Variables} Variables\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Variables.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a Variables message.\n       * @function verify\n       * @memberof Variables\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      Variables.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n        if (message.variables != null && message.hasOwnProperty(\"variables\")) {\n          if (!$util.isObject(message.variables)) return \"variables: object expected\";\n          var key = Object.keys(message.variables);\n\n          for (var i = 0; i < key.length; ++i) if (!$util.isString(message.variables[key[i]])) return \"variables: string{k:string} expected\";\n        }\n\n        return null;\n      };\n      /**\n       * Creates a Variables message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Variables\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Variables} Variables\n       */\n\n\n      Variables.fromObject = function fromObject(object) {\n        if (object instanceof $root.Variables) return object;\n        var message = new $root.Variables();\n\n        if (object.variables) {\n          if (typeof object.variables !== \"object\") throw TypeError(\".Variables.variables: object expected\");\n          message.variables = {};\n\n          for (var keys = Object.keys(object.variables), i = 0; i < keys.length; ++i) message.variables[keys[i]] = String(object.variables[keys[i]]);\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a Variables message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Variables\n       * @static\n       * @param {Variables} message Variables\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Variables.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.objects || options.defaults) object.variables = {};\n        var keys2;\n\n        if (message.variables && (keys2 = Object.keys(message.variables)).length) {\n          object.variables = {};\n\n          for (var j = 0; j < keys2.length; ++j) object.variables[keys2[j]] = message.variables[keys2[j]];\n        }\n\n        return object;\n      };\n      /**\n       * Converts this Variables to JSON.\n       * @function toJSON\n       * @memberof Variables\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Variables.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Variables;\n    }();\n\n    $root.UndecodedSeconds = function () {\n      /**\n       * Properties of an UndecodedSeconds.\n       * @exports IUndecodedSeconds\n       * @interface IUndecodedSeconds\n       * @property {number|null} [undecodedSeconds] UndecodedSeconds undecodedSeconds\n       */\n\n      /**\n       * Constructs a new UndecodedSeconds.\n       * @exports UndecodedSeconds\n       * @classdesc Represents an UndecodedSeconds.\n       * @implements IUndecodedSeconds\n       * @constructor\n       * @param {IUndecodedSeconds=} [properties] Properties to set\n       */\n      function UndecodedSeconds(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * UndecodedSeconds undecodedSeconds.\n       * @member {number} undecodedSeconds\n       * @memberof UndecodedSeconds\n       * @instance\n       */\n\n\n      UndecodedSeconds.prototype.undecodedSeconds = 0;\n      /**\n       * Creates a new UndecodedSeconds instance using the specified properties.\n       * @function create\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {IUndecodedSeconds=} [properties] Properties to set\n       * @returns {UndecodedSeconds} UndecodedSeconds instance\n       */\n\n      UndecodedSeconds.create = function create(properties) {\n        return new UndecodedSeconds(properties);\n      };\n      /**\n       * Encodes the specified UndecodedSeconds message. Does not implicitly {@link UndecodedSeconds.verify|verify} messages.\n       * @function encode\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {IUndecodedSeconds} message UndecodedSeconds message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      UndecodedSeconds.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.undecodedSeconds != null && Object.hasOwnProperty.call(message, \"undecodedSeconds\")) writer.uint32(\n        /* id 1, wireType 5 =*/\n        13).float(message.undecodedSeconds);\n        return writer;\n      };\n      /**\n       * Encodes the specified UndecodedSeconds message, length delimited. Does not implicitly {@link UndecodedSeconds.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {IUndecodedSeconds} message UndecodedSeconds message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      UndecodedSeconds.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes an UndecodedSeconds message from the specified reader or buffer.\n       * @function decode\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {UndecodedSeconds} UndecodedSeconds\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      UndecodedSeconds.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.UndecodedSeconds();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.undecodedSeconds = reader.float();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes an UndecodedSeconds message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {UndecodedSeconds} UndecodedSeconds\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      UndecodedSeconds.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies an UndecodedSeconds message.\n       * @function verify\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      UndecodedSeconds.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.undecodedSeconds != null && message.hasOwnProperty(\"undecodedSeconds\")) if (typeof message.undecodedSeconds !== \"number\") return \"undecodedSeconds: number expected\";\n        return null;\n      };\n      /**\n       * Creates an UndecodedSeconds message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {UndecodedSeconds} UndecodedSeconds\n       */\n\n\n      UndecodedSeconds.fromObject = function fromObject(object) {\n        if (object instanceof $root.UndecodedSeconds) return object;\n        var message = new $root.UndecodedSeconds();\n        if (object.undecodedSeconds != null) message.undecodedSeconds = Number(object.undecodedSeconds);\n        return message;\n      };\n      /**\n       * Creates a plain object from an UndecodedSeconds message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof UndecodedSeconds\n       * @static\n       * @param {UndecodedSeconds} message UndecodedSeconds\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      UndecodedSeconds.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) object.undecodedSeconds = 0;\n        if (message.undecodedSeconds != null && message.hasOwnProperty(\"undecodedSeconds\")) object.undecodedSeconds = options.json && !isFinite(message.undecodedSeconds) ? String(message.undecodedSeconds) : message.undecodedSeconds;\n        return object;\n      };\n      /**\n       * Converts this UndecodedSeconds to JSON.\n       * @function toJSON\n       * @memberof UndecodedSeconds\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      UndecodedSeconds.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return UndecodedSeconds;\n    }();\n\n    $root.FullyFinalized = function () {\n      /**\n       * Properties of a FullyFinalized.\n       * @exports IFullyFinalized\n       * @interface IFullyFinalized\n       */\n\n      /**\n       * Constructs a new FullyFinalized.\n       * @exports FullyFinalized\n       * @classdesc Represents a FullyFinalized.\n       * @implements IFullyFinalized\n       * @constructor\n       * @param {IFullyFinalized=} [properties] Properties to set\n       */\n      function FullyFinalized(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Creates a new FullyFinalized instance using the specified properties.\n       * @function create\n       * @memberof FullyFinalized\n       * @static\n       * @param {IFullyFinalized=} [properties] Properties to set\n       * @returns {FullyFinalized} FullyFinalized instance\n       */\n\n\n      FullyFinalized.create = function create(properties) {\n        return new FullyFinalized(properties);\n      };\n      /**\n       * Encodes the specified FullyFinalized message. Does not implicitly {@link FullyFinalized.verify|verify} messages.\n       * @function encode\n       * @memberof FullyFinalized\n       * @static\n       * @param {IFullyFinalized} message FullyFinalized message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      FullyFinalized.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        return writer;\n      };\n      /**\n       * Encodes the specified FullyFinalized message, length delimited. Does not implicitly {@link FullyFinalized.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof FullyFinalized\n       * @static\n       * @param {IFullyFinalized} message FullyFinalized message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      FullyFinalized.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a FullyFinalized message from the specified reader or buffer.\n       * @function decode\n       * @memberof FullyFinalized\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {FullyFinalized} FullyFinalized\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      FullyFinalized.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.FullyFinalized();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a FullyFinalized message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof FullyFinalized\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {FullyFinalized} FullyFinalized\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      FullyFinalized.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a FullyFinalized message.\n       * @function verify\n       * @memberof FullyFinalized\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      FullyFinalized.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        return null;\n      };\n      /**\n       * Creates a FullyFinalized message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof FullyFinalized\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {FullyFinalized} FullyFinalized\n       */\n\n\n      FullyFinalized.fromObject = function fromObject(object) {\n        if (object instanceof $root.FullyFinalized) return object;\n        return new $root.FullyFinalized();\n      };\n      /**\n       * Creates a plain object from a FullyFinalized message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof FullyFinalized\n       * @static\n       * @param {FullyFinalized} message FullyFinalized\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      FullyFinalized.toObject = function toObject() {\n        return {};\n      };\n      /**\n       * Converts this FullyFinalized to JSON.\n       * @function toJSON\n       * @memberof FullyFinalized\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      FullyFinalized.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return FullyFinalized;\n    }();\n\n    $root.EmotionResult = function () {\n      /**\n       * Properties of an EmotionResult.\n       * @exports IEmotionResult\n       * @interface IEmotionResult\n       * @property {string|null} [name] EmotionResult name\n       * @property {number|null} [confidence] EmotionResult confidence\n       */\n\n      /**\n       * Constructs a new EmotionResult.\n       * @exports EmotionResult\n       * @classdesc Represents an EmotionResult.\n       * @implements IEmotionResult\n       * @constructor\n       * @param {IEmotionResult=} [properties] Properties to set\n       */\n      function EmotionResult(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * EmotionResult name.\n       * @member {string} name\n       * @memberof EmotionResult\n       * @instance\n       */\n\n\n      EmotionResult.prototype.name = \"\";\n      /**\n       * EmotionResult confidence.\n       * @member {number} confidence\n       * @memberof EmotionResult\n       * @instance\n       */\n\n      EmotionResult.prototype.confidence = 0;\n      /**\n       * Creates a new EmotionResult instance using the specified properties.\n       * @function create\n       * @memberof EmotionResult\n       * @static\n       * @param {IEmotionResult=} [properties] Properties to set\n       * @returns {EmotionResult} EmotionResult instance\n       */\n\n      EmotionResult.create = function create(properties) {\n        return new EmotionResult(properties);\n      };\n      /**\n       * Encodes the specified EmotionResult message. Does not implicitly {@link EmotionResult.verify|verify} messages.\n       * @function encode\n       * @memberof EmotionResult\n       * @static\n       * @param {IEmotionResult} message EmotionResult message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      EmotionResult.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\")) writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).string(message.name);\n        if (message.confidence != null && Object.hasOwnProperty.call(message, \"confidence\")) writer.uint32(\n        /* id 2, wireType 5 =*/\n        21).float(message.confidence);\n        return writer;\n      };\n      /**\n       * Encodes the specified EmotionResult message, length delimited. Does not implicitly {@link EmotionResult.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof EmotionResult\n       * @static\n       * @param {IEmotionResult} message EmotionResult message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      EmotionResult.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes an EmotionResult message from the specified reader or buffer.\n       * @function decode\n       * @memberof EmotionResult\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {EmotionResult} EmotionResult\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      EmotionResult.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.EmotionResult();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.name = reader.string();\n              break;\n\n            case 2:\n              message.confidence = reader.float();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes an EmotionResult message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof EmotionResult\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {EmotionResult} EmotionResult\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      EmotionResult.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies an EmotionResult message.\n       * @function verify\n       * @memberof EmotionResult\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      EmotionResult.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n        if (message.confidence != null && message.hasOwnProperty(\"confidence\")) if (typeof message.confidence !== \"number\") return \"confidence: number expected\";\n        return null;\n      };\n      /**\n       * Creates an EmotionResult message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof EmotionResult\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {EmotionResult} EmotionResult\n       */\n\n\n      EmotionResult.fromObject = function fromObject(object) {\n        if (object instanceof $root.EmotionResult) return object;\n        var message = new $root.EmotionResult();\n        if (object.name != null) message.name = String(object.name);\n        if (object.confidence != null) message.confidence = Number(object.confidence);\n        return message;\n      };\n      /**\n       * Creates a plain object from an EmotionResult message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof EmotionResult\n       * @static\n       * @param {EmotionResult} message EmotionResult\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      EmotionResult.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.defaults) {\n          object.name = \"\";\n          object.confidence = 0;\n        }\n\n        if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n        if (message.confidence != null && message.hasOwnProperty(\"confidence\")) object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;\n        return object;\n      };\n      /**\n       * Converts this EmotionResult to JSON.\n       * @function toJSON\n       * @memberof EmotionResult\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      EmotionResult.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return EmotionResult;\n    }();\n\n    $root.Hypothesis = function () {\n      /**\n       * Properties of a Hypothesis.\n       * @exports IHypothesis\n       * @interface IHypothesis\n       * @property {string|null} [words] Hypothesis words\n       * @property {number|null} [acousticCost] Hypothesis acousticCost\n       * @property {number|null} [linguisticCost] Hypothesis linguisticCost\n       * @property {number|null} [finalCost] Hypothesis finalCost\n       * @property {number|null} [phraseStart] Hypothesis phraseStart\n       * @property {number|null} [phraseEnd] Hypothesis phraseEnd\n       * @property {string|null} [normalizedText] Hypothesis normalizedText\n       */\n\n      /**\n       * Constructs a new Hypothesis.\n       * @exports Hypothesis\n       * @classdesc Represents a Hypothesis.\n       * @implements IHypothesis\n       * @constructor\n       * @param {IHypothesis=} [properties] Properties to set\n       */\n      function Hypothesis(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Hypothesis words.\n       * @member {string} words\n       * @memberof Hypothesis\n       * @instance\n       */\n\n\n      Hypothesis.prototype.words = \"\";\n      /**\n       * Hypothesis acousticCost.\n       * @member {number} acousticCost\n       * @memberof Hypothesis\n       * @instance\n       */\n\n      Hypothesis.prototype.acousticCost = 0;\n      /**\n       * Hypothesis linguisticCost.\n       * @member {number} linguisticCost\n       * @memberof Hypothesis\n       * @instance\n       */\n\n      Hypothesis.prototype.linguisticCost = 0;\n      /**\n       * Hypothesis finalCost.\n       * @member {number} finalCost\n       * @memberof Hypothesis\n       * @instance\n       */\n\n      Hypothesis.prototype.finalCost = 0;\n      /**\n       * Hypothesis phraseStart.\n       * @member {number} phraseStart\n       * @memberof Hypothesis\n       * @instance\n       */\n\n      Hypothesis.prototype.phraseStart = 0;\n      /**\n       * Hypothesis phraseEnd.\n       * @member {number} phraseEnd\n       * @memberof Hypothesis\n       * @instance\n       */\n\n      Hypothesis.prototype.phraseEnd = 0;\n      /**\n       * Hypothesis normalizedText.\n       * @member {string} normalizedText\n       * @memberof Hypothesis\n       * @instance\n       */\n\n      Hypothesis.prototype.normalizedText = \"\";\n      /**\n       * Creates a new Hypothesis instance using the specified properties.\n       * @function create\n       * @memberof Hypothesis\n       * @static\n       * @param {IHypothesis=} [properties] Properties to set\n       * @returns {Hypothesis} Hypothesis instance\n       */\n\n      Hypothesis.create = function create(properties) {\n        return new Hypothesis(properties);\n      };\n      /**\n       * Encodes the specified Hypothesis message. Does not implicitly {@link Hypothesis.verify|verify} messages.\n       * @function encode\n       * @memberof Hypothesis\n       * @static\n       * @param {IHypothesis} message Hypothesis message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Hypothesis.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.words != null && Object.hasOwnProperty.call(message, \"words\")) writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).string(message.words);\n        if (message.acousticCost != null && Object.hasOwnProperty.call(message, \"acousticCost\")) writer.uint32(\n        /* id 2, wireType 5 =*/\n        21).float(message.acousticCost);\n        if (message.linguisticCost != null && Object.hasOwnProperty.call(message, \"linguisticCost\")) writer.uint32(\n        /* id 3, wireType 5 =*/\n        29).float(message.linguisticCost);\n        if (message.finalCost != null && Object.hasOwnProperty.call(message, \"finalCost\")) writer.uint32(\n        /* id 4, wireType 5 =*/\n        37).float(message.finalCost);\n        if (message.phraseStart != null && Object.hasOwnProperty.call(message, \"phraseStart\")) writer.uint32(\n        /* id 5, wireType 5 =*/\n        45).float(message.phraseStart);\n        if (message.phraseEnd != null && Object.hasOwnProperty.call(message, \"phraseEnd\")) writer.uint32(\n        /* id 6, wireType 5 =*/\n        53).float(message.phraseEnd);\n        if (message.normalizedText != null && Object.hasOwnProperty.call(message, \"normalizedText\")) writer.uint32(\n        /* id 7, wireType 2 =*/\n        58).string(message.normalizedText);\n        return writer;\n      };\n      /**\n       * Encodes the specified Hypothesis message, length delimited. Does not implicitly {@link Hypothesis.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Hypothesis\n       * @static\n       * @param {IHypothesis} message Hypothesis message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Hypothesis.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a Hypothesis message from the specified reader or buffer.\n       * @function decode\n       * @memberof Hypothesis\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Hypothesis} Hypothesis\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Hypothesis.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Hypothesis();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.words = reader.string();\n              break;\n\n            case 2:\n              message.acousticCost = reader.float();\n              break;\n\n            case 3:\n              message.linguisticCost = reader.float();\n              break;\n\n            case 4:\n              message.finalCost = reader.float();\n              break;\n\n            case 5:\n              message.phraseStart = reader.float();\n              break;\n\n            case 6:\n              message.phraseEnd = reader.float();\n              break;\n\n            case 7:\n              message.normalizedText = reader.string();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a Hypothesis message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Hypothesis\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Hypothesis} Hypothesis\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Hypothesis.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a Hypothesis message.\n       * @function verify\n       * @memberof Hypothesis\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      Hypothesis.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.words != null && message.hasOwnProperty(\"words\")) if (!$util.isString(message.words)) return \"words: string expected\";\n        if (message.acousticCost != null && message.hasOwnProperty(\"acousticCost\")) if (typeof message.acousticCost !== \"number\") return \"acousticCost: number expected\";\n        if (message.linguisticCost != null && message.hasOwnProperty(\"linguisticCost\")) if (typeof message.linguisticCost !== \"number\") return \"linguisticCost: number expected\";\n        if (message.finalCost != null && message.hasOwnProperty(\"finalCost\")) if (typeof message.finalCost !== \"number\") return \"finalCost: number expected\";\n        if (message.phraseStart != null && message.hasOwnProperty(\"phraseStart\")) if (typeof message.phraseStart !== \"number\") return \"phraseStart: number expected\";\n        if (message.phraseEnd != null && message.hasOwnProperty(\"phraseEnd\")) if (typeof message.phraseEnd !== \"number\") return \"phraseEnd: number expected\";\n        if (message.normalizedText != null && message.hasOwnProperty(\"normalizedText\")) if (!$util.isString(message.normalizedText)) return \"normalizedText: string expected\";\n        return null;\n      };\n      /**\n       * Creates a Hypothesis message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Hypothesis\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Hypothesis} Hypothesis\n       */\n\n\n      Hypothesis.fromObject = function fromObject(object) {\n        if (object instanceof $root.Hypothesis) return object;\n        var message = new $root.Hypothesis();\n        if (object.words != null) message.words = String(object.words);\n        if (object.acousticCost != null) message.acousticCost = Number(object.acousticCost);\n        if (object.linguisticCost != null) message.linguisticCost = Number(object.linguisticCost);\n        if (object.finalCost != null) message.finalCost = Number(object.finalCost);\n        if (object.phraseStart != null) message.phraseStart = Number(object.phraseStart);\n        if (object.phraseEnd != null) message.phraseEnd = Number(object.phraseEnd);\n        if (object.normalizedText != null) message.normalizedText = String(object.normalizedText);\n        return message;\n      };\n      /**\n       * Creates a plain object from a Hypothesis message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Hypothesis\n       * @static\n       * @param {Hypothesis} message Hypothesis\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Hypothesis.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.defaults) {\n          object.words = \"\";\n          object.acousticCost = 0;\n          object.linguisticCost = 0;\n          object.finalCost = 0;\n          object.phraseStart = 0;\n          object.phraseEnd = 0;\n          object.normalizedText = \"\";\n        }\n\n        if (message.words != null && message.hasOwnProperty(\"words\")) object.words = message.words;\n        if (message.acousticCost != null && message.hasOwnProperty(\"acousticCost\")) object.acousticCost = options.json && !isFinite(message.acousticCost) ? String(message.acousticCost) : message.acousticCost;\n        if (message.linguisticCost != null && message.hasOwnProperty(\"linguisticCost\")) object.linguisticCost = options.json && !isFinite(message.linguisticCost) ? String(message.linguisticCost) : message.linguisticCost;\n        if (message.finalCost != null && message.hasOwnProperty(\"finalCost\")) object.finalCost = options.json && !isFinite(message.finalCost) ? String(message.finalCost) : message.finalCost;\n        if (message.phraseStart != null && message.hasOwnProperty(\"phraseStart\")) object.phraseStart = options.json && !isFinite(message.phraseStart) ? String(message.phraseStart) : message.phraseStart;\n        if (message.phraseEnd != null && message.hasOwnProperty(\"phraseEnd\")) object.phraseEnd = options.json && !isFinite(message.phraseEnd) ? String(message.phraseEnd) : message.phraseEnd;\n        if (message.normalizedText != null && message.hasOwnProperty(\"normalizedText\")) object.normalizedText = message.normalizedText;\n        return object;\n      };\n      /**\n       * Converts this Hypothesis to JSON.\n       * @function toJSON\n       * @memberof Hypothesis\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Hypothesis.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Hypothesis;\n    }();\n\n    $root.DecoderResult = function () {\n      /**\n       * Properties of a DecoderResult.\n       * @exports IDecoderResult\n       * @interface IDecoderResult\n       * @property {Array.<IHypothesis>|null} [hypothesis] DecoderResult hypothesis\n       * @property {number|null} [chunkStart] DecoderResult chunkStart\n       * @property {number|null} [chunkEnd] DecoderResult chunkEnd\n       * @property {number|null} [timeEndpointDetectionMs] DecoderResult timeEndpointDetectionMs\n       * @property {number|null} [timeDecodingMs] DecoderResult timeDecodingMs\n       * @property {IVariables|null} [variables] DecoderResult variables\n       * @property {boolean|null} [isFinal] DecoderResult isFinal\n       * @property {Array.<IEmotionResult>|null} [emotionResult] DecoderResult emotionResult\n       * @property {Array.<DecoderResult.IContextAnswer>|null} [contextAnswer] DecoderResult contextAnswer\n       */\n\n      /**\n       * Constructs a new DecoderResult.\n       * @exports DecoderResult\n       * @classdesc Represents a DecoderResult.\n       * @implements IDecoderResult\n       * @constructor\n       * @param {IDecoderResult=} [properties] Properties to set\n       */\n      function DecoderResult(properties) {\n        this.hypothesis = [];\n        this.emotionResult = [];\n        this.contextAnswer = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * DecoderResult hypothesis.\n       * @member {Array.<IHypothesis>} hypothesis\n       * @memberof DecoderResult\n       * @instance\n       */\n\n\n      DecoderResult.prototype.hypothesis = $util.emptyArray;\n      /**\n       * DecoderResult chunkStart.\n       * @member {number} chunkStart\n       * @memberof DecoderResult\n       * @instance\n       */\n\n      DecoderResult.prototype.chunkStart = 0;\n      /**\n       * DecoderResult chunkEnd.\n       * @member {number} chunkEnd\n       * @memberof DecoderResult\n       * @instance\n       */\n\n      DecoderResult.prototype.chunkEnd = 0;\n      /**\n       * DecoderResult timeEndpointDetectionMs.\n       * @member {number} timeEndpointDetectionMs\n       * @memberof DecoderResult\n       * @instance\n       */\n\n      DecoderResult.prototype.timeEndpointDetectionMs = 0;\n      /**\n       * DecoderResult timeDecodingMs.\n       * @member {number} timeDecodingMs\n       * @memberof DecoderResult\n       * @instance\n       */\n\n      DecoderResult.prototype.timeDecodingMs = 0;\n      /**\n       * DecoderResult variables.\n       * @member {IVariables|null|undefined} variables\n       * @memberof DecoderResult\n       * @instance\n       */\n\n      DecoderResult.prototype.variables = null;\n      /**\n       * DecoderResult isFinal.\n       * @member {boolean} isFinal\n       * @memberof DecoderResult\n       * @instance\n       */\n\n      DecoderResult.prototype.isFinal = false;\n      /**\n       * DecoderResult emotionResult.\n       * @member {Array.<IEmotionResult>} emotionResult\n       * @memberof DecoderResult\n       * @instance\n       */\n\n      DecoderResult.prototype.emotionResult = $util.emptyArray;\n      /**\n       * DecoderResult contextAnswer.\n       * @member {Array.<DecoderResult.IContextAnswer>} contextAnswer\n       * @memberof DecoderResult\n       * @instance\n       */\n\n      DecoderResult.prototype.contextAnswer = $util.emptyArray;\n      /**\n       * Creates a new DecoderResult instance using the specified properties.\n       * @function create\n       * @memberof DecoderResult\n       * @static\n       * @param {IDecoderResult=} [properties] Properties to set\n       * @returns {DecoderResult} DecoderResult instance\n       */\n\n      DecoderResult.create = function create(properties) {\n        return new DecoderResult(properties);\n      };\n      /**\n       * Encodes the specified DecoderResult message. Does not implicitly {@link DecoderResult.verify|verify} messages.\n       * @function encode\n       * @memberof DecoderResult\n       * @static\n       * @param {IDecoderResult} message DecoderResult message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      DecoderResult.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.hypothesis != null && message.hypothesis.length) for (var i = 0; i < message.hypothesis.length; ++i) $root.Hypothesis.encode(message.hypothesis[i], writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).fork()).ldelim();\n        if (message.chunkStart != null && Object.hasOwnProperty.call(message, \"chunkStart\")) writer.uint32(\n        /* id 2, wireType 5 =*/\n        21).float(message.chunkStart);\n        if (message.chunkEnd != null && Object.hasOwnProperty.call(message, \"chunkEnd\")) writer.uint32(\n        /* id 3, wireType 5 =*/\n        29).float(message.chunkEnd);\n        if (message.timeEndpointDetectionMs != null && Object.hasOwnProperty.call(message, \"timeEndpointDetectionMs\")) writer.uint32(\n        /* id 4, wireType 5 =*/\n        37).float(message.timeEndpointDetectionMs);\n        if (message.timeDecodingMs != null && Object.hasOwnProperty.call(message, \"timeDecodingMs\")) writer.uint32(\n        /* id 5, wireType 5 =*/\n        45).float(message.timeDecodingMs);\n        if (message.variables != null && Object.hasOwnProperty.call(message, \"variables\")) $root.Variables.encode(message.variables, writer.uint32(\n        /* id 6, wireType 2 =*/\n        50).fork()).ldelim();\n        if (message.isFinal != null && Object.hasOwnProperty.call(message, \"isFinal\")) writer.uint32(\n        /* id 7, wireType 0 =*/\n        56).bool(message.isFinal);\n        if (message.emotionResult != null && message.emotionResult.length) for (var i = 0; i < message.emotionResult.length; ++i) $root.EmotionResult.encode(message.emotionResult[i], writer.uint32(\n        /* id 8, wireType 2 =*/\n        66).fork()).ldelim();\n        if (message.contextAnswer != null && message.contextAnswer.length) for (var i = 0; i < message.contextAnswer.length; ++i) $root.DecoderResult.ContextAnswer.encode(message.contextAnswer[i], writer.uint32(\n        /* id 9, wireType 2 =*/\n        74).fork()).ldelim();\n        return writer;\n      };\n      /**\n       * Encodes the specified DecoderResult message, length delimited. Does not implicitly {@link DecoderResult.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof DecoderResult\n       * @static\n       * @param {IDecoderResult} message DecoderResult message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      DecoderResult.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a DecoderResult message from the specified reader or buffer.\n       * @function decode\n       * @memberof DecoderResult\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {DecoderResult} DecoderResult\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      DecoderResult.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.DecoderResult();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.hypothesis && message.hypothesis.length)) message.hypothesis = [];\n              message.hypothesis.push($root.Hypothesis.decode(reader, reader.uint32()));\n              break;\n\n            case 2:\n              message.chunkStart = reader.float();\n              break;\n\n            case 3:\n              message.chunkEnd = reader.float();\n              break;\n\n            case 4:\n              message.timeEndpointDetectionMs = reader.float();\n              break;\n\n            case 5:\n              message.timeDecodingMs = reader.float();\n              break;\n\n            case 6:\n              message.variables = $root.Variables.decode(reader, reader.uint32());\n              break;\n\n            case 7:\n              message.isFinal = reader.bool();\n              break;\n\n            case 8:\n              if (!(message.emotionResult && message.emotionResult.length)) message.emotionResult = [];\n              message.emotionResult.push($root.EmotionResult.decode(reader, reader.uint32()));\n              break;\n\n            case 9:\n              if (!(message.contextAnswer && message.contextAnswer.length)) message.contextAnswer = [];\n              message.contextAnswer.push($root.DecoderResult.ContextAnswer.decode(reader, reader.uint32()));\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a DecoderResult message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof DecoderResult\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {DecoderResult} DecoderResult\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      DecoderResult.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a DecoderResult message.\n       * @function verify\n       * @memberof DecoderResult\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      DecoderResult.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n        if (message.hypothesis != null && message.hasOwnProperty(\"hypothesis\")) {\n          if (!Array.isArray(message.hypothesis)) return \"hypothesis: array expected\";\n\n          for (var i = 0; i < message.hypothesis.length; ++i) {\n            var error = $root.Hypothesis.verify(message.hypothesis[i]);\n            if (error) return \"hypothesis.\" + error;\n          }\n        }\n\n        if (message.chunkStart != null && message.hasOwnProperty(\"chunkStart\")) if (typeof message.chunkStart !== \"number\") return \"chunkStart: number expected\";\n        if (message.chunkEnd != null && message.hasOwnProperty(\"chunkEnd\")) if (typeof message.chunkEnd !== \"number\") return \"chunkEnd: number expected\";\n        if (message.timeEndpointDetectionMs != null && message.hasOwnProperty(\"timeEndpointDetectionMs\")) if (typeof message.timeEndpointDetectionMs !== \"number\") return \"timeEndpointDetectionMs: number expected\";\n        if (message.timeDecodingMs != null && message.hasOwnProperty(\"timeDecodingMs\")) if (typeof message.timeDecodingMs !== \"number\") return \"timeDecodingMs: number expected\";\n\n        if (message.variables != null && message.hasOwnProperty(\"variables\")) {\n          var error = $root.Variables.verify(message.variables);\n          if (error) return \"variables.\" + error;\n        }\n\n        if (message.isFinal != null && message.hasOwnProperty(\"isFinal\")) if (typeof message.isFinal !== \"boolean\") return \"isFinal: boolean expected\";\n\n        if (message.emotionResult != null && message.hasOwnProperty(\"emotionResult\")) {\n          if (!Array.isArray(message.emotionResult)) return \"emotionResult: array expected\";\n\n          for (var i = 0; i < message.emotionResult.length; ++i) {\n            var error = $root.EmotionResult.verify(message.emotionResult[i]);\n            if (error) return \"emotionResult.\" + error;\n          }\n        }\n\n        if (message.contextAnswer != null && message.hasOwnProperty(\"contextAnswer\")) {\n          if (!Array.isArray(message.contextAnswer)) return \"contextAnswer: array expected\";\n\n          for (var i = 0; i < message.contextAnswer.length; ++i) {\n            var error = $root.DecoderResult.ContextAnswer.verify(message.contextAnswer[i]);\n            if (error) return \"contextAnswer.\" + error;\n          }\n        }\n\n        return null;\n      };\n      /**\n       * Creates a DecoderResult message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof DecoderResult\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {DecoderResult} DecoderResult\n       */\n\n\n      DecoderResult.fromObject = function fromObject(object) {\n        if (object instanceof $root.DecoderResult) return object;\n        var message = new $root.DecoderResult();\n\n        if (object.hypothesis) {\n          if (!Array.isArray(object.hypothesis)) throw TypeError(\".DecoderResult.hypothesis: array expected\");\n          message.hypothesis = [];\n\n          for (var i = 0; i < object.hypothesis.length; ++i) {\n            if (typeof object.hypothesis[i] !== \"object\") throw TypeError(\".DecoderResult.hypothesis: object expected\");\n            message.hypothesis[i] = $root.Hypothesis.fromObject(object.hypothesis[i]);\n          }\n        }\n\n        if (object.chunkStart != null) message.chunkStart = Number(object.chunkStart);\n        if (object.chunkEnd != null) message.chunkEnd = Number(object.chunkEnd);\n        if (object.timeEndpointDetectionMs != null) message.timeEndpointDetectionMs = Number(object.timeEndpointDetectionMs);\n        if (object.timeDecodingMs != null) message.timeDecodingMs = Number(object.timeDecodingMs);\n\n        if (object.variables != null) {\n          if (typeof object.variables !== \"object\") throw TypeError(\".DecoderResult.variables: object expected\");\n          message.variables = $root.Variables.fromObject(object.variables);\n        }\n\n        if (object.isFinal != null) message.isFinal = Boolean(object.isFinal);\n\n        if (object.emotionResult) {\n          if (!Array.isArray(object.emotionResult)) throw TypeError(\".DecoderResult.emotionResult: array expected\");\n          message.emotionResult = [];\n\n          for (var i = 0; i < object.emotionResult.length; ++i) {\n            if (typeof object.emotionResult[i] !== \"object\") throw TypeError(\".DecoderResult.emotionResult: object expected\");\n            message.emotionResult[i] = $root.EmotionResult.fromObject(object.emotionResult[i]);\n          }\n        }\n\n        if (object.contextAnswer) {\n          if (!Array.isArray(object.contextAnswer)) throw TypeError(\".DecoderResult.contextAnswer: array expected\");\n          message.contextAnswer = [];\n\n          for (var i = 0; i < object.contextAnswer.length; ++i) {\n            if (typeof object.contextAnswer[i] !== \"object\") throw TypeError(\".DecoderResult.contextAnswer: object expected\");\n            message.contextAnswer[i] = $root.DecoderResult.ContextAnswer.fromObject(object.contextAnswer[i]);\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a DecoderResult message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof DecoderResult\n       * @static\n       * @param {DecoderResult} message DecoderResult\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      DecoderResult.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.arrays || options.defaults) {\n          object.hypothesis = [];\n          object.emotionResult = [];\n          object.contextAnswer = [];\n        }\n\n        if (options.defaults) {\n          object.chunkStart = 0;\n          object.chunkEnd = 0;\n          object.timeEndpointDetectionMs = 0;\n          object.timeDecodingMs = 0;\n          object.variables = null;\n          object.isFinal = false;\n        }\n\n        if (message.hypothesis && message.hypothesis.length) {\n          object.hypothesis = [];\n\n          for (var j = 0; j < message.hypothesis.length; ++j) object.hypothesis[j] = $root.Hypothesis.toObject(message.hypothesis[j], options);\n        }\n\n        if (message.chunkStart != null && message.hasOwnProperty(\"chunkStart\")) object.chunkStart = options.json && !isFinite(message.chunkStart) ? String(message.chunkStart) : message.chunkStart;\n        if (message.chunkEnd != null && message.hasOwnProperty(\"chunkEnd\")) object.chunkEnd = options.json && !isFinite(message.chunkEnd) ? String(message.chunkEnd) : message.chunkEnd;\n        if (message.timeEndpointDetectionMs != null && message.hasOwnProperty(\"timeEndpointDetectionMs\")) object.timeEndpointDetectionMs = options.json && !isFinite(message.timeEndpointDetectionMs) ? String(message.timeEndpointDetectionMs) : message.timeEndpointDetectionMs;\n        if (message.timeDecodingMs != null && message.hasOwnProperty(\"timeDecodingMs\")) object.timeDecodingMs = options.json && !isFinite(message.timeDecodingMs) ? String(message.timeDecodingMs) : message.timeDecodingMs;\n        if (message.variables != null && message.hasOwnProperty(\"variables\")) object.variables = $root.Variables.toObject(message.variables, options);\n        if (message.isFinal != null && message.hasOwnProperty(\"isFinal\")) object.isFinal = message.isFinal;\n\n        if (message.emotionResult && message.emotionResult.length) {\n          object.emotionResult = [];\n\n          for (var j = 0; j < message.emotionResult.length; ++j) object.emotionResult[j] = $root.EmotionResult.toObject(message.emotionResult[j], options);\n        }\n\n        if (message.contextAnswer && message.contextAnswer.length) {\n          object.contextAnswer = [];\n\n          for (var j = 0; j < message.contextAnswer.length; ++j) object.contextAnswer[j] = $root.DecoderResult.ContextAnswer.toObject(message.contextAnswer[j], options);\n        }\n\n        return object;\n      };\n      /**\n       * Converts this DecoderResult to JSON.\n       * @function toJSON\n       * @memberof DecoderResult\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      DecoderResult.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      DecoderResult.ContextAnswer = function () {\n        /**\n         * Properties of a ContextAnswer.\n         * @memberof DecoderResult\n         * @interface IContextAnswer\n         * @property {Array.<DecoderResult.ContextAnswer.IContextRef>|null} [contextResult] ContextAnswer contextResult\n         */\n\n        /**\n         * Constructs a new ContextAnswer.\n         * @memberof DecoderResult\n         * @classdesc Represents a ContextAnswer.\n         * @implements IContextAnswer\n         * @constructor\n         * @param {DecoderResult.IContextAnswer=} [properties] Properties to set\n         */\n        function ContextAnswer(properties) {\n          this.contextResult = [];\n          if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n        }\n        /**\n         * ContextAnswer contextResult.\n         * @member {Array.<DecoderResult.ContextAnswer.IContextRef>} contextResult\n         * @memberof DecoderResult.ContextAnswer\n         * @instance\n         */\n\n\n        ContextAnswer.prototype.contextResult = $util.emptyArray;\n        /**\n         * Creates a new ContextAnswer instance using the specified properties.\n         * @function create\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {DecoderResult.IContextAnswer=} [properties] Properties to set\n         * @returns {DecoderResult.ContextAnswer} ContextAnswer instance\n         */\n\n        ContextAnswer.create = function create(properties) {\n          return new ContextAnswer(properties);\n        };\n        /**\n         * Encodes the specified ContextAnswer message. Does not implicitly {@link DecoderResult.ContextAnswer.verify|verify} messages.\n         * @function encode\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {DecoderResult.IContextAnswer} message ContextAnswer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n\n\n        ContextAnswer.encode = function encode(message, writer) {\n          if (!writer) writer = $Writer.create();\n          if (message.contextResult != null && message.contextResult.length) for (var i = 0; i < message.contextResult.length; ++i) $root.DecoderResult.ContextAnswer.ContextRef.encode(message.contextResult[i], writer.uint32(\n          /* id 1, wireType 2 =*/\n          10).fork()).ldelim();\n          return writer;\n        };\n        /**\n         * Encodes the specified ContextAnswer message, length delimited. Does not implicitly {@link DecoderResult.ContextAnswer.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {DecoderResult.IContextAnswer} message ContextAnswer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n\n\n        ContextAnswer.encodeDelimited = function encodeDelimited(message, writer) {\n          return this.encode(message, writer).ldelim();\n        };\n        /**\n         * Decodes a ContextAnswer message from the specified reader or buffer.\n         * @function decode\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {DecoderResult.ContextAnswer} ContextAnswer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n\n\n        ContextAnswer.decode = function decode(reader, length) {\n          if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n          var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.DecoderResult.ContextAnswer();\n\n          while (reader.pos < end) {\n            var tag = reader.uint32();\n\n            switch (tag >>> 3) {\n              case 1:\n                if (!(message.contextResult && message.contextResult.length)) message.contextResult = [];\n                message.contextResult.push($root.DecoderResult.ContextAnswer.ContextRef.decode(reader, reader.uint32()));\n                break;\n\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n\n          return message;\n        };\n        /**\n         * Decodes a ContextAnswer message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {DecoderResult.ContextAnswer} ContextAnswer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n\n\n        ContextAnswer.decodeDelimited = function decodeDelimited(reader) {\n          if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n          return this.decode(reader, reader.uint32());\n        };\n        /**\n         * Verifies a ContextAnswer message.\n         * @function verify\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n\n\n        ContextAnswer.verify = function verify(message) {\n          if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n          if (message.contextResult != null && message.hasOwnProperty(\"contextResult\")) {\n            if (!Array.isArray(message.contextResult)) return \"contextResult: array expected\";\n\n            for (var i = 0; i < message.contextResult.length; ++i) {\n              var error = $root.DecoderResult.ContextAnswer.ContextRef.verify(message.contextResult[i]);\n              if (error) return \"contextResult.\" + error;\n            }\n          }\n\n          return null;\n        };\n        /**\n         * Creates a ContextAnswer message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {DecoderResult.ContextAnswer} ContextAnswer\n         */\n\n\n        ContextAnswer.fromObject = function fromObject(object) {\n          if (object instanceof $root.DecoderResult.ContextAnswer) return object;\n          var message = new $root.DecoderResult.ContextAnswer();\n\n          if (object.contextResult) {\n            if (!Array.isArray(object.contextResult)) throw TypeError(\".DecoderResult.ContextAnswer.contextResult: array expected\");\n            message.contextResult = [];\n\n            for (var i = 0; i < object.contextResult.length; ++i) {\n              if (typeof object.contextResult[i] !== \"object\") throw TypeError(\".DecoderResult.ContextAnswer.contextResult: object expected\");\n              message.contextResult[i] = $root.DecoderResult.ContextAnswer.ContextRef.fromObject(object.contextResult[i]);\n            }\n          }\n\n          return message;\n        };\n        /**\n         * Creates a plain object from a ContextAnswer message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof DecoderResult.ContextAnswer\n         * @static\n         * @param {DecoderResult.ContextAnswer} message ContextAnswer\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n\n\n        ContextAnswer.toObject = function toObject(message, options) {\n          if (!options) options = {};\n          var object = {};\n          if (options.arrays || options.defaults) object.contextResult = [];\n\n          if (message.contextResult && message.contextResult.length) {\n            object.contextResult = [];\n\n            for (var j = 0; j < message.contextResult.length; ++j) object.contextResult[j] = $root.DecoderResult.ContextAnswer.ContextRef.toObject(message.contextResult[j], options);\n          }\n\n          return object;\n        };\n        /**\n         * Converts this ContextAnswer to JSON.\n         * @function toJSON\n         * @memberof DecoderResult.ContextAnswer\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n\n\n        ContextAnswer.prototype.toJSON = function toJSON() {\n          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        ContextAnswer.ContextRef = function () {\n          /**\n           * Properties of a ContextRef.\n           * @memberof DecoderResult.ContextAnswer\n           * @interface IContextRef\n           * @property {string|null} [id] ContextRef id\n           * @property {number|null} [index] ContextRef index\n           * @property {string|null} [originalValue] ContextRef originalValue\n           * @property {string|null} [predictedValue] ContextRef predictedValue\n           * @property {number|null} [score] ContextRef score\n           */\n\n          /**\n           * Constructs a new ContextRef.\n           * @memberof DecoderResult.ContextAnswer\n           * @classdesc Represents a ContextRef.\n           * @implements IContextRef\n           * @constructor\n           * @param {DecoderResult.ContextAnswer.IContextRef=} [properties] Properties to set\n           */\n          function ContextRef(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n          /**\n           * ContextRef id.\n           * @member {string} id\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           */\n\n\n          ContextRef.prototype.id = \"\";\n          /**\n           * ContextRef index.\n           * @member {number} index\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           */\n\n          ContextRef.prototype.index = 0;\n          /**\n           * ContextRef originalValue.\n           * @member {string} originalValue\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           */\n\n          ContextRef.prototype.originalValue = \"\";\n          /**\n           * ContextRef predictedValue.\n           * @member {string} predictedValue\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           */\n\n          ContextRef.prototype.predictedValue = \"\";\n          /**\n           * ContextRef score.\n           * @member {number} score\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           */\n\n          ContextRef.prototype.score = 0;\n          /**\n           * Creates a new ContextRef instance using the specified properties.\n           * @function create\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {DecoderResult.ContextAnswer.IContextRef=} [properties] Properties to set\n           * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef instance\n           */\n\n          ContextRef.create = function create(properties) {\n            return new ContextRef(properties);\n          };\n          /**\n           * Encodes the specified ContextRef message. Does not implicitly {@link DecoderResult.ContextAnswer.ContextRef.verify|verify} messages.\n           * @function encode\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {DecoderResult.ContextAnswer.IContextRef} message ContextRef message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n\n\n          ContextRef.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\")) writer.uint32(\n            /* id 1, wireType 2 =*/\n            10).string(message.id);\n            if (message.index != null && Object.hasOwnProperty.call(message, \"index\")) writer.uint32(\n            /* id 2, wireType 0 =*/\n            16).int32(message.index);\n            if (message.originalValue != null && Object.hasOwnProperty.call(message, \"originalValue\")) writer.uint32(\n            /* id 3, wireType 2 =*/\n            26).string(message.originalValue);\n            if (message.predictedValue != null && Object.hasOwnProperty.call(message, \"predictedValue\")) writer.uint32(\n            /* id 4, wireType 2 =*/\n            34).string(message.predictedValue);\n            if (message.score != null && Object.hasOwnProperty.call(message, \"score\")) writer.uint32(\n            /* id 5, wireType 5 =*/\n            45).float(message.score);\n            return writer;\n          };\n          /**\n           * Encodes the specified ContextRef message, length delimited. Does not implicitly {@link DecoderResult.ContextAnswer.ContextRef.verify|verify} messages.\n           * @function encodeDelimited\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {DecoderResult.ContextAnswer.IContextRef} message ContextRef message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n\n\n          ContextRef.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          /**\n           * Decodes a ContextRef message from the specified reader or buffer.\n           * @function decode\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n\n\n          ContextRef.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n                message = new $root.DecoderResult.ContextAnswer.ContextRef();\n\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n\n              switch (tag >>> 3) {\n                case 1:\n                  message.id = reader.string();\n                  break;\n\n                case 2:\n                  message.index = reader.int32();\n                  break;\n\n                case 3:\n                  message.originalValue = reader.string();\n                  break;\n\n                case 4:\n                  message.predictedValue = reader.string();\n                  break;\n\n                case 5:\n                  message.score = reader.float();\n                  break;\n\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n\n            return message;\n          };\n          /**\n           * Decodes a ContextRef message from the specified reader or buffer, length delimited.\n           * @function decodeDelimited\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n\n\n          ContextRef.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          /**\n           * Verifies a ContextRef message.\n           * @function verify\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {Object.<string,*>} message Plain object to verify\n           * @returns {string|null} `null` if valid, otherwise the reason why it is not\n           */\n\n\n          ContextRef.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null) return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\")) if (!$util.isString(message.id)) return \"id: string expected\";\n            if (message.index != null && message.hasOwnProperty(\"index\")) if (!$util.isInteger(message.index)) return \"index: integer expected\";\n            if (message.originalValue != null && message.hasOwnProperty(\"originalValue\")) if (!$util.isString(message.originalValue)) return \"originalValue: string expected\";\n            if (message.predictedValue != null && message.hasOwnProperty(\"predictedValue\")) if (!$util.isString(message.predictedValue)) return \"predictedValue: string expected\";\n            if (message.score != null && message.hasOwnProperty(\"score\")) if (typeof message.score !== \"number\") return \"score: number expected\";\n            return null;\n          };\n          /**\n           * Creates a ContextRef message from a plain object. Also converts values to their respective internal types.\n           * @function fromObject\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {Object.<string,*>} object Plain object\n           * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n           */\n\n\n          ContextRef.fromObject = function fromObject(object) {\n            if (object instanceof $root.DecoderResult.ContextAnswer.ContextRef) return object;\n            var message = new $root.DecoderResult.ContextAnswer.ContextRef();\n            if (object.id != null) message.id = String(object.id);\n            if (object.index != null) message.index = object.index | 0;\n            if (object.originalValue != null) message.originalValue = String(object.originalValue);\n            if (object.predictedValue != null) message.predictedValue = String(object.predictedValue);\n            if (object.score != null) message.score = Number(object.score);\n            return message;\n          };\n          /**\n           * Creates a plain object from a ContextRef message. Also converts values to other types if specified.\n           * @function toObject\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @static\n           * @param {DecoderResult.ContextAnswer.ContextRef} message ContextRef\n           * @param {$protobuf.IConversionOptions} [options] Conversion options\n           * @returns {Object.<string,*>} Plain object\n           */\n\n\n          ContextRef.toObject = function toObject(message, options) {\n            if (!options) options = {};\n            var object = {};\n\n            if (options.defaults) {\n              object.id = \"\";\n              object.index = 0;\n              object.originalValue = \"\";\n              object.predictedValue = \"\";\n              object.score = 0;\n            }\n\n            if (message.id != null && message.hasOwnProperty(\"id\")) object.id = message.id;\n            if (message.index != null && message.hasOwnProperty(\"index\")) object.index = message.index;\n            if (message.originalValue != null && message.hasOwnProperty(\"originalValue\")) object.originalValue = message.originalValue;\n            if (message.predictedValue != null && message.hasOwnProperty(\"predictedValue\")) object.predictedValue = message.predictedValue;\n            if (message.score != null && message.hasOwnProperty(\"score\")) object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;\n            return object;\n          };\n          /**\n           * Converts this ContextRef to JSON.\n           * @function toJSON\n           * @memberof DecoderResult.ContextAnswer.ContextRef\n           * @instance\n           * @returns {Object.<string,*>} JSON object\n           */\n\n\n          ContextRef.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n          };\n\n          return ContextRef;\n        }();\n\n        return ContextAnswer;\n      }();\n\n      return DecoderResult;\n    }();\n\n    $root.ErrorResponse = function () {\n      /**\n       * Properties of an ErrorResponse.\n       * @exports IErrorResponse\n       * @interface IErrorResponse\n       * @property {string|null} [errorMessage] ErrorResponse errorMessage\n       */\n\n      /**\n       * Constructs a new ErrorResponse.\n       * @exports ErrorResponse\n       * @classdesc Represents an ErrorResponse.\n       * @implements IErrorResponse\n       * @constructor\n       * @param {IErrorResponse=} [properties] Properties to set\n       */\n      function ErrorResponse(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * ErrorResponse errorMessage.\n       * @member {string} errorMessage\n       * @memberof ErrorResponse\n       * @instance\n       */\n\n\n      ErrorResponse.prototype.errorMessage = \"\";\n      /**\n       * Creates a new ErrorResponse instance using the specified properties.\n       * @function create\n       * @memberof ErrorResponse\n       * @static\n       * @param {IErrorResponse=} [properties] Properties to set\n       * @returns {ErrorResponse} ErrorResponse instance\n       */\n\n      ErrorResponse.create = function create(properties) {\n        return new ErrorResponse(properties);\n      };\n      /**\n       * Encodes the specified ErrorResponse message. Does not implicitly {@link ErrorResponse.verify|verify} messages.\n       * @function encode\n       * @memberof ErrorResponse\n       * @static\n       * @param {IErrorResponse} message ErrorResponse message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ErrorResponse.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\")) writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).string(message.errorMessage);\n        return writer;\n      };\n      /**\n       * Encodes the specified ErrorResponse message, length delimited. Does not implicitly {@link ErrorResponse.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof ErrorResponse\n       * @static\n       * @param {IErrorResponse} message ErrorResponse message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes an ErrorResponse message from the specified reader or buffer.\n       * @function decode\n       * @memberof ErrorResponse\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {ErrorResponse} ErrorResponse\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ErrorResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.ErrorResponse();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.errorMessage = reader.string();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes an ErrorResponse message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof ErrorResponse\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {ErrorResponse} ErrorResponse\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ErrorResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies an ErrorResponse message.\n       * @function verify\n       * @memberof ErrorResponse\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      ErrorResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\")) if (!$util.isString(message.errorMessage)) return \"errorMessage: string expected\";\n        return null;\n      };\n      /**\n       * Creates an ErrorResponse message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof ErrorResponse\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {ErrorResponse} ErrorResponse\n       */\n\n\n      ErrorResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.ErrorResponse) return object;\n        var message = new $root.ErrorResponse();\n        if (object.errorMessage != null) message.errorMessage = String(object.errorMessage);\n        return message;\n      };\n      /**\n       * Creates a plain object from an ErrorResponse message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof ErrorResponse\n       * @static\n       * @param {ErrorResponse} message ErrorResponse\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      ErrorResponse.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) object.errorMessage = \"\";\n        if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\")) object.errorMessage = message.errorMessage;\n        return object;\n      };\n      /**\n       * Converts this ErrorResponse to JSON.\n       * @function toJSON\n       * @memberof ErrorResponse\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      ErrorResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return ErrorResponse;\n    }();\n\n    $root.PacketWrapperFromServer = function () {\n      /**\n       * Properties of a PacketWrapperFromServer.\n       * @exports IPacketWrapperFromServer\n       * @interface IPacketWrapperFromServer\n       * @property {IUndecodedSeconds|null} [undecodedSecondsField] PacketWrapperFromServer undecodedSecondsField\n       * @property {IFullyFinalized|null} [fullyFinalizedField] PacketWrapperFromServer fullyFinalizedField\n       * @property {IDecoderResult|null} [decoderResultField] PacketWrapperFromServer decoderResultField\n       * @property {IErrorResponse|null} [errorResponse] PacketWrapperFromServer errorResponse\n       */\n\n      /**\n       * Constructs a new PacketWrapperFromServer.\n       * @exports PacketWrapperFromServer\n       * @classdesc Represents a PacketWrapperFromServer.\n       * @implements IPacketWrapperFromServer\n       * @constructor\n       * @param {IPacketWrapperFromServer=} [properties] Properties to set\n       */\n      function PacketWrapperFromServer(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * PacketWrapperFromServer undecodedSecondsField.\n       * @member {IUndecodedSeconds|null|undefined} undecodedSecondsField\n       * @memberof PacketWrapperFromServer\n       * @instance\n       */\n\n\n      PacketWrapperFromServer.prototype.undecodedSecondsField = null;\n      /**\n       * PacketWrapperFromServer fullyFinalizedField.\n       * @member {IFullyFinalized|null|undefined} fullyFinalizedField\n       * @memberof PacketWrapperFromServer\n       * @instance\n       */\n\n      PacketWrapperFromServer.prototype.fullyFinalizedField = null;\n      /**\n       * PacketWrapperFromServer decoderResultField.\n       * @member {IDecoderResult|null|undefined} decoderResultField\n       * @memberof PacketWrapperFromServer\n       * @instance\n       */\n\n      PacketWrapperFromServer.prototype.decoderResultField = null;\n      /**\n       * PacketWrapperFromServer errorResponse.\n       * @member {IErrorResponse|null|undefined} errorResponse\n       * @memberof PacketWrapperFromServer\n       * @instance\n       */\n\n      PacketWrapperFromServer.prototype.errorResponse = null; // OneOf field names bound to virtual getters and setters\n\n      var $oneOfFields;\n      /**\n       * PacketWrapperFromServer MessageType.\n       * @member {\"undecodedSecondsField\"|\"fullyFinalizedField\"|\"decoderResultField\"|\"errorResponse\"|undefined} MessageType\n       * @memberof PacketWrapperFromServer\n       * @instance\n       */\n\n      Object.defineProperty(PacketWrapperFromServer.prototype, \"MessageType\", {\n        get: $util.oneOfGetter($oneOfFields = [\"undecodedSecondsField\", \"fullyFinalizedField\", \"decoderResultField\", \"errorResponse\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * Creates a new PacketWrapperFromServer instance using the specified properties.\n       * @function create\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {IPacketWrapperFromServer=} [properties] Properties to set\n       * @returns {PacketWrapperFromServer} PacketWrapperFromServer instance\n       */\n\n      PacketWrapperFromServer.create = function create(properties) {\n        return new PacketWrapperFromServer(properties);\n      };\n      /**\n       * Encodes the specified PacketWrapperFromServer message. Does not implicitly {@link PacketWrapperFromServer.verify|verify} messages.\n       * @function encode\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {IPacketWrapperFromServer} message PacketWrapperFromServer message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      PacketWrapperFromServer.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.undecodedSecondsField != null && Object.hasOwnProperty.call(message, \"undecodedSecondsField\")) $root.UndecodedSeconds.encode(message.undecodedSecondsField, writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).fork()).ldelim();\n        if (message.fullyFinalizedField != null && Object.hasOwnProperty.call(message, \"fullyFinalizedField\")) $root.FullyFinalized.encode(message.fullyFinalizedField, writer.uint32(\n        /* id 2, wireType 2 =*/\n        18).fork()).ldelim();\n        if (message.decoderResultField != null && Object.hasOwnProperty.call(message, \"decoderResultField\")) $root.DecoderResult.encode(message.decoderResultField, writer.uint32(\n        /* id 4, wireType 2 =*/\n        34).fork()).ldelim();\n        if (message.errorResponse != null && Object.hasOwnProperty.call(message, \"errorResponse\")) $root.ErrorResponse.encode(message.errorResponse, writer.uint32(\n        /* id 8, wireType 2 =*/\n        66).fork()).ldelim();\n        return writer;\n      };\n      /**\n       * Encodes the specified PacketWrapperFromServer message, length delimited. Does not implicitly {@link PacketWrapperFromServer.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {IPacketWrapperFromServer} message PacketWrapperFromServer message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      PacketWrapperFromServer.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a PacketWrapperFromServer message from the specified reader or buffer.\n       * @function decode\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      PacketWrapperFromServer.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.PacketWrapperFromServer();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.undecodedSecondsField = $root.UndecodedSeconds.decode(reader, reader.uint32());\n              break;\n\n            case 2:\n              message.fullyFinalizedField = $root.FullyFinalized.decode(reader, reader.uint32());\n              break;\n\n            case 4:\n              message.decoderResultField = $root.DecoderResult.decode(reader, reader.uint32());\n              break;\n\n            case 8:\n              message.errorResponse = $root.ErrorResponse.decode(reader, reader.uint32());\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a PacketWrapperFromServer message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      PacketWrapperFromServer.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a PacketWrapperFromServer message.\n       * @function verify\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      PacketWrapperFromServer.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        var properties = {};\n\n        if (message.undecodedSecondsField != null && message.hasOwnProperty(\"undecodedSecondsField\")) {\n          properties.MessageType = 1;\n          {\n            var error = $root.UndecodedSeconds.verify(message.undecodedSecondsField);\n            if (error) return \"undecodedSecondsField.\" + error;\n          }\n        }\n\n        if (message.fullyFinalizedField != null && message.hasOwnProperty(\"fullyFinalizedField\")) {\n          if (properties.MessageType === 1) return \"MessageType: multiple values\";\n          properties.MessageType = 1;\n          {\n            var error = $root.FullyFinalized.verify(message.fullyFinalizedField);\n            if (error) return \"fullyFinalizedField.\" + error;\n          }\n        }\n\n        if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n          if (properties.MessageType === 1) return \"MessageType: multiple values\";\n          properties.MessageType = 1;\n          {\n            var error = $root.DecoderResult.verify(message.decoderResultField);\n            if (error) return \"decoderResultField.\" + error;\n          }\n        }\n\n        if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n          if (properties.MessageType === 1) return \"MessageType: multiple values\";\n          properties.MessageType = 1;\n          {\n            var error = $root.ErrorResponse.verify(message.errorResponse);\n            if (error) return \"errorResponse.\" + error;\n          }\n        }\n\n        return null;\n      };\n      /**\n       * Creates a PacketWrapperFromServer message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n       */\n\n\n      PacketWrapperFromServer.fromObject = function fromObject(object) {\n        if (object instanceof $root.PacketWrapperFromServer) return object;\n        var message = new $root.PacketWrapperFromServer();\n\n        if (object.undecodedSecondsField != null) {\n          if (typeof object.undecodedSecondsField !== \"object\") throw TypeError(\".PacketWrapperFromServer.undecodedSecondsField: object expected\");\n          message.undecodedSecondsField = $root.UndecodedSeconds.fromObject(object.undecodedSecondsField);\n        }\n\n        if (object.fullyFinalizedField != null) {\n          if (typeof object.fullyFinalizedField !== \"object\") throw TypeError(\".PacketWrapperFromServer.fullyFinalizedField: object expected\");\n          message.fullyFinalizedField = $root.FullyFinalized.fromObject(object.fullyFinalizedField);\n        }\n\n        if (object.decoderResultField != null) {\n          if (typeof object.decoderResultField !== \"object\") throw TypeError(\".PacketWrapperFromServer.decoderResultField: object expected\");\n          message.decoderResultField = $root.DecoderResult.fromObject(object.decoderResultField);\n        }\n\n        if (object.errorResponse != null) {\n          if (typeof object.errorResponse !== \"object\") throw TypeError(\".PacketWrapperFromServer.errorResponse: object expected\");\n          message.errorResponse = $root.ErrorResponse.fromObject(object.errorResponse);\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a PacketWrapperFromServer message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof PacketWrapperFromServer\n       * @static\n       * @param {PacketWrapperFromServer} message PacketWrapperFromServer\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      PacketWrapperFromServer.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (message.undecodedSecondsField != null && message.hasOwnProperty(\"undecodedSecondsField\")) {\n          object.undecodedSecondsField = $root.UndecodedSeconds.toObject(message.undecodedSecondsField, options);\n          if (options.oneofs) object.MessageType = \"undecodedSecondsField\";\n        }\n\n        if (message.fullyFinalizedField != null && message.hasOwnProperty(\"fullyFinalizedField\")) {\n          object.fullyFinalizedField = $root.FullyFinalized.toObject(message.fullyFinalizedField, options);\n          if (options.oneofs) object.MessageType = \"fullyFinalizedField\";\n        }\n\n        if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n          object.decoderResultField = $root.DecoderResult.toObject(message.decoderResultField, options);\n          if (options.oneofs) object.MessageType = \"decoderResultField\";\n        }\n\n        if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n          object.errorResponse = $root.ErrorResponse.toObject(message.errorResponse, options);\n          if (options.oneofs) object.MessageType = \"errorResponse\";\n        }\n\n        return object;\n      };\n      /**\n       * Converts this PacketWrapperFromServer to JSON.\n       * @function toJSON\n       * @memberof PacketWrapperFromServer\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      PacketWrapperFromServer.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return PacketWrapperFromServer;\n    }();\n\n    return $root;\n  });\n});\n\nvar createSpeechRecognizer = function (voiceListener) {\n  var _a = createNanoEvents(),\n      emit = _a.emit,\n      on = _a.on;\n\n  var off;\n  var status = 'inactive';\n  var currentMessageId;\n\n  var stop = function () {\n    if (voiceListener.status !== 'stopped') {\n      status = 'inactive';\n      voiceListener.stop();\n    }\n  };\n\n  var start = function (_a) {\n    var sendVoice = _a.sendVoice,\n        messageId = _a.messageId,\n        onMessage = _a.onMessage;\n    return voiceListener.listen(sendVoice).then(function () {\n      status = 'active';\n      currentMessageId = messageId;\n      off = onMessage(function (message) {\n        var _a, _b;\n\n        if (message.status && message.status.code != null && message.status.code < 0) {\n          off();\n          stop();\n        }\n\n        if (message.messageId === messageId && message.messageName === MessageNames.STT) {\n          if (message.text) {\n            emit('hypotesis', message.text.data || '', message.last === 1, message.messageId);\n\n            if (message.last === 1) {\n              off();\n              stop();\n            }\n          }\n\n          if ((_a = message.bytes) === null || _a === void 0 ? void 0 : _a.data) {\n            var decoderResultField = asr.PacketWrapperFromServer.decode(message.bytes.data).decoderResultField;\n\n            if (decoderResultField && ((_b = decoderResultField.hypothesis) === null || _b === void 0 ? void 0 : _b.length)) {\n              emit('hypotesis', decoderResultField.hypothesis[0].normalizedText || '', !!decoderResultField.isFinal, message.messageId);\n\n              if (decoderResultField.isFinal) {\n                off();\n                stop();\n              }\n            }\n          }\n        }\n      });\n    });\n  };\n\n  return {\n    start: start,\n    stop: stop,\n    on: on,\n\n    get status() {\n      return status;\n    },\n\n    get messageId() {\n      return currentMessageId;\n    }\n\n  };\n};\n\nvar isAudioSupported = typeof window !== 'undefined' && (window.AudioContext || window.webkitAudioContext);\n/**\n * Возвращает новый инстанс AudioContext или ошибку\n * @param options AudioContextOptions\n * @returns AudioContext\n */\n\nvar createAudioContext = function (options) {\n  if (window.AudioContext) {\n    return new AudioContext(options);\n  }\n\n  if (window.webkitAudioContext) {\n    // eslint-disable-next-line new-cap\n    return new window.webkitAudioContext();\n  }\n\n  throw new Error('Audio not supported');\n};\n\nvar _a = createNanoEvents(),\n    on = _a.on,\n    emit = _a.emit;\n\nvar audioContext;\n/**\n * При помощи вызова функции из аргумента, возвращает, готовый к воспроизведению звука, AudioContext.\n * Всегда возвращает один и тот же AudioContext\n * @param onReady Функция, в аргумент которой будет возвращен AudioContext\n */\n\nvar resolveAudioContext = function (onReady) {\n  if (!audioContext) {\n    var isSafari_1 = navigator.vendor.search('Apple') >= 0;\n    var context_1 = createAudioContext();\n    audioContext = {\n      context: context_1,\n      ready: !isSafari_1 && context_1.state === 'running',\n      on: on\n    }; /// Контекст может быть не готов для использования сразу после создания\n    /// Если попробовать что-то воспроизвести в этом контексте - звука не будет\n\n    if (!audioContext.ready) {\n      var handleClick_1 = function () {\n        document.removeEventListener('click', handleClick_1);\n        document.removeEventListener('touchstart', handleClick_1);\n\n        if (isSafari_1) {\n          /// проигрываем тишину, т.к нужно что-то проиграть,\n          /// чтобы сафари разрешил воспроизводить звуки в любой момент в этом контексте\n          var oscillator = audioContext.context.createOscillator();\n          oscillator.frequency.value = 0;\n          oscillator.connect(audioContext.context.destination);\n          oscillator.start(0);\n          oscillator.stop(0.5);\n        }\n\n        if (audioContext.context.state === 'suspended') {\n          /// Developers who write games, WebRTC applications, or other websites that use the Web Audio API\n          /// should call context.resume() after the first user gesture (e.g. a click, or tap)\n          /// https://sites.google.com/a/chromium.org/dev/audio-video/autoplay\n          audioContext.context.resume();\n        }\n\n        audioContext.ready = true;\n        emit('ready');\n      }; /// чтобы сделать контекст готовым к использованию (воспроизведению звука),\n      /// необходимо событие от пользователя\n      // для пк\n\n\n      document.addEventListener('click', handleClick_1); // для мобильных устройств\n\n      document.addEventListener('touchstart', handleClick_1);\n    }\n  }\n\n  if (audioContext.ready) {\n    onReady && onReady(audioContext.context);\n  } else {\n    var unsubscribe_1 = on('ready', function () {\n      onReady(audioContext.context);\n      unsubscribe_1();\n    });\n  }\n};\n/**\n * Понижает sample rate c inSampleRate до значения outSampleRate и преобразует Float32Array в ArrayBuffer\n * @param buffer Аудио\n * @param inSampleRate текущий sample rate\n * @param outSampleRate требуемый sample rate\n * @returns Аудио со значением sample rate = outSampleRate\n */\n\n\nvar downsampleBuffer = function (buffer, inSampleRate, outSampleRate) {\n  if (outSampleRate > inSampleRate) {\n    throw new Error('downsampling rate show be smaller than original sample rate');\n  }\n\n  var sampleRateRatio = inSampleRate / outSampleRate;\n  var newLength = Math.round(buffer.length / sampleRateRatio);\n  var result = new Int16Array(newLength);\n  var offsetResult = 0;\n  var offsetBuffer = 0;\n\n  while (offsetResult < result.length) {\n    var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n    var accum = 0;\n    var count = 0;\n\n    for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n      accum += buffer[i];\n      count++;\n    }\n\n    result[offsetResult] = Math.min(1, accum / count) * 0x7fff;\n    offsetResult++;\n    offsetBuffer = nextOffsetBuffer;\n  }\n\n  return result.buffer;\n};\n\nvar TARGET_SAMPLE_RATE = 16000;\nvar IS_FIREFOX = typeof window !== 'undefined' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\nvar context;\nvar processor;\n/**\n * Преобразует stream в чанки (кусочки), и передает их в cb,\n * будет это делать, пока не будет вызвана функция остановки\n * @param stream Аудио-поток\n * @param cb callback, куда будут переданы чанки из потока\n * @returns Функция, вызов которой остановит передачу чанков\n */\n\nvar createAudioRecorder = function (stream, cb) {\n  return new Promise(function (resolve) {\n    var state = 'inactive';\n    var input;\n\n    var stop = function () {\n      if (state === 'inactive') {\n        throw new Error(\"Can't stop inactive recorder\");\n      }\n\n      state = 'inactive';\n      stream.getTracks().forEach(function (track) {\n        track.stop();\n      });\n      input.disconnect();\n    };\n\n    var start = function () {\n      if (state !== 'inactive') {\n        throw new Error(\"Can't start not inactive recorder\");\n      }\n\n      state = 'recording';\n\n      if (!context) {\n        context = createAudioContext({\n          // firefox не умеет выравнивать samplerate, будем делать это самостоятельно\n          sampleRate: IS_FIREFOX ? undefined : TARGET_SAMPLE_RATE\n        });\n      }\n\n      input = context.createMediaStreamSource(stream);\n\n      if (!processor) {\n        processor = context.createScriptProcessor(2048, 1, 1);\n      }\n\n      var listener = function (e) {\n        var buffer = e.inputBuffer.getChannelData(0);\n        var data = downsampleBuffer(buffer, context.sampleRate, TARGET_SAMPLE_RATE);\n        var last = state === 'inactive';\n        cb(data, last);\n\n        if (last) {\n          processor.removeEventListener('audioprocess', listener);\n        }\n      };\n\n      processor.addEventListener('audioprocess', listener);\n      processor.addEventListener('audioprocess', function () {\n        return resolve(stop);\n      }, {\n        once: true\n      });\n      input.connect(processor);\n      processor.connect(context.destination);\n    };\n\n    start();\n  });\n};\n/**\n * Запрашивает у браузера доступ к микрофону и резолвит Promise, если разрешение получено.\n * После получения разрешения, чанки с голосом будут передаваться в cb - пока не будет вызвана функция из результата.\n * @param cb Callback, куда будут передаваться чанки с голосом пользователя\n * @returns Promise, который содержит функцию прерывающую слушание\n */\n\n\nvar createNavigatorAudioProvider = function (cb) {\n  return navigator.mediaDevices.getUserMedia({\n    audio: true\n  }).then(function (stream) {\n    return createAudioRecorder(stream, cb);\n  });\n};\n/**\n * Возвращает объект, позволяющий получать запись голоса пользователя и управлять ею.\n * @param createAudioProvider Источник голоса\n * @returns Api для запуска и остановки слушания\n */\n\n\nvar createVoiceListener = function (createAudioProvider) {\n  if (createAudioProvider === void 0) {\n    createAudioProvider = createNavigatorAudioProvider;\n  }\n\n  var _a = createNanoEvents(),\n      emit = _a.emit,\n      on = _a.on;\n\n  var stopRecord;\n  var status = 'stopped';\n\n  var stop = function () {\n    status = 'stopped';\n    stopRecord();\n    emit('status', 'stopped');\n  };\n\n  var listen = function (handleVoice) {\n    status = 'started';\n    emit('status', 'started');\n    return createAudioProvider(function (data, last) {\n      return handleVoice(new Uint8Array(data), last);\n    }).then(function (recStop) {\n      stopRecord = recStop;\n    }).then(function () {\n      status = 'listen';\n      emit('status', 'listen');\n    }).catch(function (err) {\n      status = 'stopped';\n      emit('status', 'stopped');\n      throw err;\n    });\n  };\n\n  return {\n    listen: listen,\n    stop: stop,\n    on: on,\n\n    get status() {\n      return status;\n    }\n\n  };\n};\n/** Создает коллекцию треков  */\n\n\nvar createTrackCollection = function () {\n  var trackIds;\n  var trackMap;\n\n  var clear = function () {\n    trackIds = new Array();\n    trackMap = new Map();\n  };\n\n  var push = function (id, track) {\n    if (trackMap.has(id)) {\n      throw new Error('Track already exists');\n    }\n\n    trackMap.set(id, track);\n    trackIds.push(id);\n  };\n\n  var has = function (id) {\n    return trackMap.has(id);\n  };\n\n  var getById = function (id) {\n    var track = trackMap.get(id);\n\n    if (track === undefined) {\n      throw new Error('Unknown track id');\n    }\n\n    return track;\n  };\n\n  var getByIndex = function (index) {\n    if (index < 0 || index >= trackIds.length) {\n      throw new Error('Index out of bounds');\n    }\n\n    var track = trackMap.get(trackIds[index]);\n\n    if (track == null) {\n      throw new Error('Something wrong...');\n    }\n\n    return track;\n  };\n\n  var some = function (predicate) {\n    return trackIds.some(function (id) {\n      return predicate(getById(id));\n    });\n  };\n\n  clear();\n  return {\n    clear: clear,\n    has: has,\n    get: getById,\n    getByIndex: getByIndex,\n    push: push,\n    some: some,\n\n    get length() {\n      return trackIds.length;\n    }\n\n  };\n};\n/** Создает структуру для хранения загружаемых и воспроизводимых частей трека */\n\n\nvar createChunkQueue = function () {\n  var buffer = []; // очередь на воспроизведение\n\n  var chunks = []; // очередь воспроизведения\n\n  var duration = 0; // продолжительность очереди на воспроизведение, сек\n\n  var loaded = false; // флаг завершения загрузки\n\n  /** Добавить чанк в очередь на воспроизведение */\n\n  var push = function (chunk) {\n    var _a;\n\n    buffer.push(chunk);\n    duration += ((_a = chunk.buffer) === null || _a === void 0 ? void 0 : _a.duration) || 0;\n  };\n  /** Добавить чанк в очередь воспроизведения */\n\n\n  var toPlay = function (chunk) {\n    chunks.push(chunk);\n  };\n  /** Удалить чанк из очереди воспроизведения */\n\n\n  var remove = function (chunk) {\n    chunks.splice(chunks.indexOf(chunk), 1);\n  };\n  /** Получить очередь на воспроизведение */\n\n\n  var popAll = function () {\n    duration = 0;\n    return buffer.splice(0, buffer.length);\n  };\n  /** Проставляем признак окончания загрузки трека */\n\n\n  var allLoaded = function () {\n    loaded = true;\n  };\n\n  return {\n    get bufferLen() {\n      return buffer.length;\n    },\n\n    get chunks() {\n      return chunks;\n    },\n\n    allLoaded: allLoaded,\n    toPlay: toPlay,\n    remove: remove,\n    push: push,\n    popAll: popAll,\n\n    get length() {\n      return chunks.length;\n    },\n\n    get duration() {\n      return duration;\n    },\n\n    get ended() {\n      // считаем трек законченным, когда все загружено и воспроизведено\n      return loaded && chunks.length === 0 && buffer.length === 0;\n    },\n\n    get loaded() {\n      return loaded;\n    }\n\n  };\n};\n\nvar from16BitToFloat32 = function (incomingData) {\n  var l = incomingData.length;\n  var outputData = new Float32Array(l);\n\n  for (var i = 0; i < l; i += 1) {\n    outputData[i] = incomingData[i] / 32768.0;\n  }\n\n  return outputData;\n};\n/** Возвращает потоковый подгружаемый трек, который умеет себя проигрывать */\n\n\nvar createTrackStream = function (ctx, _a) {\n  var _b = _a.sampleRate,\n      sampleRate = _b === void 0 ? 24000 : _b,\n      _c = _a.numberOfChannels,\n      numberOfChannels = _c === void 0 ? 1 : _c,\n      _d = _a.delay,\n      delay = _d === void 0 ? 0 : _d,\n      onPlay = _a.onPlay,\n      onEnd = _a.onEnd,\n      trackStatus = _a.trackStatus; // очередь загруженных чанков (кусочков) трека\n\n  var queue = createChunkQueue();\n  var extraByte = null;\n  var status = trackStatus || 'stop';\n  var lastChunkOffset = 0;\n  var startTime = 0;\n  var firstChunk = true;\n\n  var end = function () {\n    // останавливаем воспроизведение чанков из очереди воспроизведения\n    queue.chunks.forEach(function (chunk) {\n      chunk.stop();\n    });\n    status = 'end';\n    onEnd && onEnd();\n    startTime = 0;\n    lastChunkOffset = 0;\n  };\n\n  var play = function () {\n    if (status === 'end') {\n      return;\n    }\n\n    if (status !== 'play') {\n      status = 'play';\n      onPlay && onPlay();\n    }\n\n    if (queue.ended) {\n      end();\n      return;\n    } // воспроизводим трек, если он полностью загрузился или длина загруженного больше задержки\n\n\n    if (queue.loaded || queue.duration >= delay) {\n      startTime = queue.length === 0 ? ctx.currentTime : startTime;\n      var chunks = queue.popAll();\n      chunks.forEach(function (chunk) {\n        var _a;\n\n        queue.toPlay(chunk);\n        chunk.start(startTime + lastChunkOffset);\n        lastChunkOffset += ((_a = chunk.buffer) === null || _a === void 0 ? void 0 : _a.duration) || 0;\n      });\n    }\n  };\n\n  var getExtraBytes = function (data, bytesArraysSizes) {\n    if (extraByte == null && bytesArraysSizes.incomingMessageVoiceDataLength % 2) {\n      extraByte = data[bytesArraysSizes.incomingMessageVoiceDataLength - 1];\n      bytesArraysSizes.incomingMessageVoiceDataLength -= 1;\n      bytesArraysSizes.sourceLen -= 1;\n    } else if (extraByte != null) {\n      bytesArraysSizes.prepend = extraByte;\n      bytesArraysSizes.start = 1;\n\n      if (bytesArraysSizes.incomingMessageVoiceDataLength % 2) {\n        bytesArraysSizes.incomingMessageVoiceDataLength += 1;\n        extraByte = null;\n      } else {\n        extraByte = data[bytesArraysSizes.incomingMessageVoiceDataLength - 1];\n        bytesArraysSizes.sourceLen -= 1;\n      }\n    }\n  };\n\n  var createChunk = function (chunk) {\n    var audioBuffer = ctx.createBuffer(numberOfChannels, chunk.length / numberOfChannels, sampleRate);\n\n    for (var i = 0; i < numberOfChannels; i++) {\n      var channelChunk = new Float32Array(chunk.length / numberOfChannels);\n      var index = 0;\n\n      for (var j = i; j < chunk.length; j += numberOfChannels) {\n        channelChunk[index++] = chunk[j];\n      }\n\n      audioBuffer.getChannelData(i).set(channelChunk);\n    }\n\n    var source = ctx.createBufferSource();\n    source.buffer = audioBuffer;\n    source.connect(ctx.destination);\n\n    source.onended = function () {\n      queue.remove(source);\n\n      if (queue.ended) {\n        status = 'end';\n        onEnd && onEnd();\n      }\n    };\n\n    return source;\n  };\n  /** добавляет чанк в очередь на воспроизведение */\n\n\n  var write = function (data) {\n    // 44 байта - заголовок трека\n    var slicePoint = firstChunk ? 44 : 0;\n    var bytesArraysSizes = {\n      incomingMessageVoiceDataLength: data.length,\n      sourceLen: data.length,\n      start: 0,\n      prepend: null\n    };\n    firstChunk = false;\n\n    if (slicePoint >= data.length) {\n      return;\n    }\n\n    getExtraBytes(data, bytesArraysSizes);\n    var dataBuffer = new ArrayBuffer(bytesArraysSizes.incomingMessageVoiceDataLength);\n    var bufferUi8 = new Uint8Array(dataBuffer);\n    var bufferI16 = new Int16Array(dataBuffer);\n    bufferUi8.set(data.slice(0, bytesArraysSizes.sourceLen), bytesArraysSizes.start);\n\n    if (bytesArraysSizes.prepend != null) {\n      bufferUi8[0] = bytesArraysSizes.prepend;\n    }\n\n    var chunk = createChunk(from16BitToFloat32(bufferI16.slice(slicePoint)));\n    queue.push(chunk);\n\n    if (status === 'play') {\n      play();\n    }\n  };\n\n  return {\n    get loaded() {\n      return queue.loaded;\n    },\n\n    setLoaded: function () {\n      queue.allLoaded();\n\n      if (status === 'play') {\n        play();\n      }\n    },\n    write: write,\n\n    get status() {\n      return status;\n    },\n\n    play: play,\n    stop: end\n  };\n};\n\nvar createVoicePlayer = function (actx, _a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.startVoiceDelay,\n      startVoiceDelay = _c === void 0 ? 0.2 : _c,\n      sampleRate = _b.sampleRate,\n      numberOfChannels = _b.numberOfChannels;\n\n  var _d = createNanoEvents(),\n      on = _d.on,\n      emit = _d.emit;\n\n  var tracks = createTrackCollection(); // true - воспроизводим все треки в очереди (новые в том числе), false - скипаем всю очередь (новые в т.ч.)\n\n  var active = true; // индекс текущего трека в tracks\n\n  var cursor = 0;\n\n  var play = function () {\n    if (cursor >= tracks.length) {\n      if (tracks.some(function (track) {\n        return !track.loaded;\n      })) {\n        return;\n      } // очищаем коллекцию, если все треки были воспроизведены\n\n\n      cursor = 0;\n      tracks.clear();\n      return;\n    } // рекурсивно последовательно включаем треки из очереди\n\n\n    var current = tracks.getByIndex(cursor);\n\n    if (current.status === 'end') {\n      if (cursor < tracks.length) {\n        cursor++;\n        play();\n      }\n    } else {\n      current.play();\n    }\n  };\n\n  var append = function (data, trackId, last) {\n    if (last === void 0) {\n      last = false;\n    }\n\n    var current = tracks.has(trackId) ? tracks.get(trackId) : undefined;\n\n    if (current == null) {\n      /// если trackId нет в коллекции - создаем трек\n      /// по окончании проигрывания - запускаем следующий трек, вызывая play\n      current = createTrackStream(actx, {\n        sampleRate: sampleRate,\n        numberOfChannels: numberOfChannels,\n        delay: startVoiceDelay,\n        onPlay: function () {\n          return emit('play', trackId);\n        },\n        onEnd: function () {\n          emit('end', trackId);\n          play();\n        },\n        trackStatus: active ? 'stop' : 'end'\n      });\n      tracks.push(trackId, current);\n    }\n\n    if (current.status !== 'end' && data.length) {\n      current.write(data);\n    }\n\n    if (last) {\n      // все чанки трека загружены\n      current.setLoaded();\n    }\n\n    play();\n  };\n\n  var stop = function () {\n    while (cursor < tracks.length) {\n      var cur = cursor;\n      cursor++;\n      tracks.getByIndex(cur).stop();\n    }\n  };\n\n  return {\n    append: append,\n    setActive: function (value) {\n      active = value;\n\n      if (value) {\n        play();\n      } else {\n        stop();\n      }\n    },\n    on: on,\n    stop: stop\n  };\n};\n\nvar createVoice = function (client, emit, /// пока onReady не вызван, треки не воспроизводятся\n/// когда случится onReady, очередь треков начнет проигрываться\nonReady) {\n  var voicePlayer;\n  var listener = createVoiceListener();\n  var musicRecognizer = createMusicRecognizer(listener);\n  var speechRecognizer = createSpeechRecognizer(listener);\n  var subscriptions = [];\n  var settings = {\n    disableDubbing: false,\n    disableListening: false\n  };\n  var isPlaying = false; // проигрывается/не проигрывается озвучка\n\n  var autolistenMesId = null; // id сообщения, после проигрывания которого, нужно активировать слушание\n\n  /** останавливает слушание голоса, возвращает true - если слушание было активно */\n\n  var stopListening = function () {\n    var result = speechRecognizer.status === 'active' || musicRecognizer.status === 'active';\n    autolistenMesId = null;\n\n    if (speechRecognizer.status === 'active') {\n      speechRecognizer.stop();\n      client.sendCancel(speechRecognizer.messageId);\n      return true;\n    }\n\n    if (musicRecognizer.status === 'active') {\n      musicRecognizer.stop();\n      client.sendCancel(musicRecognizer.messageId);\n      return true;\n    }\n\n    return result;\n  };\n  /** Останавливает слушание и воспроизведение */\n\n\n  var stop = function () {\n    // здесь важен порядок остановки голоса\n    stopListening();\n    voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n  };\n  /** Активирует слушание голоса\n   * если было активно слушание или проигрывание - останавливает, слушание в этом случае не активируется\n   */\n\n\n  var listen = function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (stopListening()) {\n          return [2\n          /*return*/\n          ];\n        }\n\n        if (isPlaying) {\n          voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n          return [2\n          /*return*/\n          ];\n        }\n\n        if (settings.disableListening) {\n          return [2\n          /*return*/\n          ];\n        } // повторные вызовы не пройдут, пока пользователь не разрешит/запретит аудио\n\n\n        if (listener.status === 'stopped') {\n          return [2\n          /*return*/\n          , client.createVoiceStream(function (_a) {\n            var sendVoice = _a.sendVoice,\n                messageId = _a.messageId,\n                onMessage = _a.onMessage;\n            return speechRecognizer.start({\n              sendVoice: sendVoice,\n              messageId: messageId,\n              onMessage: onMessage\n            });\n          })];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /** Активирует распознавание музыки\n   * если было активно слушание или проигрывание - останавливает, распознование музыки в этом случае не активируется\n   */\n\n\n  var shazam = function () {\n    if (stopListening()) {\n      return;\n    }\n\n    if (isPlaying) {\n      voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n    }\n\n    if (settings.disableListening) {\n      return;\n    } // повторные вызовы не пройдут, пока пользователь не разрешит/запретит аудио\n\n\n    if (listener.status === 'stopped') {\n      client.createVoiceStream(function (_a) {\n        var sendVoice = _a.sendVoice,\n            messageId = _a.messageId,\n            onMessage = _a.onMessage;\n        return musicRecognizer.start({\n          sendVoice: sendVoice,\n          messageId: messageId,\n          onMessage: onMessage\n        });\n      });\n    }\n  };\n\n  if (isAudioSupported) {\n    resolveAudioContext(function (context) {\n      /// создаем плеер только если поддерживается аудио\n      /// и только когда готов AudioContext\n      voicePlayer = createVoicePlayer(context, {\n        startVoiceDelay: 1\n      }); // начало проигрывания озвучки\n\n      subscriptions.push(voicePlayer.on('play', function () {\n        isPlaying = true;\n        emit({\n          emotion: 'talk'\n        });\n      })); // окончание проигрывания озвучки\n\n      subscriptions.push(voicePlayer.on('end', function (mesId) {\n        isPlaying = false;\n        emit({\n          emotion: 'idle'\n        });\n\n        if (mesId === autolistenMesId) {\n          listen();\n        }\n      })); // оповещаем о готовности к воспроизведению звука\n\n      onReady && onReady();\n    });\n  } // обработка входящей озвучки\n\n\n  subscriptions.push(client.on('voice', function (data, message) {\n    if (settings.disableDubbing) {\n      return;\n    }\n\n    voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.append(data, message.messageId.toString(), message.last === 1);\n  })); // гипотезы распознавания речи\n\n  subscriptions.push(speechRecognizer.on('hypotesis', function (text, isLast, mid) {\n    emit({\n      asr: {\n        text: listener.status === 'listen' && !settings.disableListening ? text : '',\n        last: isLast,\n        mid: mid\n      }\n    });\n  })); // статусы слушания речи\n\n  subscriptions.push(listener.on('status', function (status) {\n    if (status === 'listen') {\n      voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(false);\n      emit({\n        emotion: 'listen'\n      });\n    } else if (status === 'stopped') {\n      voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(!settings.disableDubbing);\n      emit({\n        asr: {\n          text: ''\n        },\n        emotion: 'idle'\n      });\n    }\n  })); // активация автослушания\n\n  subscriptions.push(client.on('systemMessage', function (systemMessage, originalMessage) {\n    var autoListening = systemMessage.auto_listening;\n\n    if (autoListening) {\n      /// если озвучка включена - сохраняем mesId чтобы включить слушание после озвучки\n      /// если озвучка выключена - включаем слушание сразу\n      if (!settings.disableDubbing) {\n        autolistenMesId = originalMessage.messageId.toString();\n      } else {\n        listen();\n      }\n    }\n  }));\n  return {\n    destroy: function () {\n      stopListening();\n      voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(false);\n      subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) {\n        return unsubscribe();\n      });\n    },\n    change: function (newSettings) {\n      var disableDubbing = newSettings.disableDubbing,\n          disableListening = newSettings.disableListening; /// ниже важен порядок обработки флагов слушания и озвучки\n      /// сначала слушание, потом озвучка\n      // вкл/выкл фичи листенинга\n\n      if (typeof disableListening !== 'undefined' && settings.disableListening !== disableListening) {\n        settings.disableListening = disableListening;\n\n        if (disableListening === true) {\n          stopListening();\n        }\n      } // вкл/выкл фичи озвучки\n\n\n      if (typeof disableDubbing !== 'undefined' && settings.disableDubbing !== disableDubbing) {\n        settings.disableDubbing = disableDubbing;\n        voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(!disableDubbing);\n      }\n\n      Object.assign(settings, newSettings);\n    },\n    listen: listen,\n    shazam: shazam,\n    stop: stop\n  };\n};\n\nvar STATE_UPDATE_TIMEOUT = 200;\nvar DEFAULT_PROJECT_ID = 'd929986a-611a-2ba0-6174-1928c99600a5';\nvar DEFAULT_APPLICATION_ID = '7c4e23bf-cd93-b57e-874b-d9fc1b35f93d';\nvar DEFAULT_APP_VERSION_ID = '26d0bb2e-45d6-a276-f70e-6c016d1f9cff';\nvar DEFAULT_APP = {\n  projectId: DEFAULT_PROJECT_ID,\n  applicationId: DEFAULT_APPLICATION_ID,\n  appversionId: DEFAULT_APP_VERSION_ID,\n  frontendStateId: [DEFAULT_PROJECT_ID, DEFAULT_APPLICATION_ID, DEFAULT_APP_VERSION_ID].join('_'),\n  frontendType: 'DIALOG',\n  systemName: 'assistant',\n  frontendEndpoint: 'None'\n};\n\nvar isDefaultApp = function (appInfo) {\n  return appInfo.frontendStateId === DEFAULT_APP.frontendStateId;\n};\n\nvar promiseTimeout = function (promise, timeout) {\n  var timeoutId;\n  return Promise.race([promise.then(function (v) {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n\n    return v;\n  }), new Promise(function (_, reject) {\n    timeoutId = window.setTimeout(function () {\n      reject(new Error(\"Timed out in \" + timeout + \" ms.\"));\n    }, timeout);\n  })]);\n};\n\nvar createAssistant = function (_a) {\n  var _b;\n\n  var getMeta = _a.getMeta,\n      configuration = __rest(_a, [\"getMeta\"]);\n\n  var _c = createNanoEvents(),\n      on = _c.on,\n      emit = _c.emit;\n\n  var subscriptions = []; // хеш [messageId]: requestId, где requestId - пользовательский ид экшена\n\n  var requestIdMap = {}; // готов/не готов воспроизводить озвучку\n\n  var voiceReady = false; // текущий апп\n\n  var app = {\n    info: DEFAULT_APP\n  };\n  var settings = {\n    disableDubbing: configuration.settings.dubbing === -1,\n    disableListening: false,\n    sendTextAsSsml: false\n  };\n  var backgroundApps = {};\n\n  var metaProvider = function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var appState, _a, current_app, getBackgroundAppsMeta, background_apps;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(app !== null && app.info.frontendEndpoint && app.info.frontendEndpoint !== 'None' && app.getState)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , promiseTimeout(app.getState(), STATE_UPDATE_TIMEOUT).catch(function () {\n              // eslint-disable-next-line no-console\n              console.error('App-state wasn`t resolved, timeout had been expired');\n              return undefined;\n            })];\n\n          case 1:\n            _a = _b.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            _a = undefined;\n            _b.label = 3;\n\n          case 3:\n            appState = _a;\n            current_app = {\n              app_info: app.info,\n              state: appState || {}\n            };\n\n            getBackgroundAppsMeta = function () {\n              return __awaiter(void 0, void 0, void 0, function () {\n                var apps, backgroundAppsIds, backgroundAppsMeta;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      apps = __assign({}, backgroundApps);\n                      backgroundAppsIds = Object.keys(apps);\n                      backgroundAppsMeta = [];\n                      return [4\n                      /*yield*/\n                      , Promise.all(backgroundAppsIds.map(function (applicationId) {\n                        return __awaiter(void 0, void 0, void 0, function () {\n                          var _a, getState;\n\n                          return __generator(this, function (_b) {\n                            _a = apps[applicationId].getState, getState = _a === void 0 ? function () {\n                              return Promise.resolve({});\n                            } : _a;\n                            return [2\n                            /*return*/\n                            , promiseTimeout(getState(), STATE_UPDATE_TIMEOUT).then(function (state) {\n                              return state;\n                            }, function () {\n                              return {};\n                            })];\n                          });\n                        });\n                      })).then(function (results) {\n                        results.forEach(function (appResult, index) {\n                          var state = appResult;\n                          var applicationId = backgroundAppsIds[index];\n                          backgroundAppsMeta.push({\n                            app_info: apps[applicationId].appInfo,\n                            state: state\n                          });\n                        });\n                      })];\n\n                    case 1:\n                      _a.sent();\n\n                      return [2\n                      /*return*/\n                      , backgroundAppsMeta];\n                  }\n                });\n              });\n            };\n\n            return [4\n            /*yield*/\n            , getBackgroundAppsMeta()];\n\n          case 4:\n            background_apps = _b.sent();\n            return [2\n            /*return*/\n            , {\n              meta: __assign({\n                time: getTime(),\n                current_app: current_app,\n                background_apps: background_apps\n              }, getMeta ? getMeta() : {})\n            }];\n        }\n      });\n    });\n  };\n\n  var transport = createTransport((_b = configuration.fakeVps) === null || _b === void 0 ? void 0 : _b.createFakeWS);\n  var protocol = createProtocol(transport, __assign(__assign({}, configuration), {\n    // выключаем озвучку, пока голос не готов\n    settings: __assign(__assign({}, configuration.settings), {\n      dubbing: !voiceReady ? -1 : configuration.settings.dubbing\n    })\n  }));\n  var client = createClient(protocol, metaProvider);\n  var voice = createVoice(client, function (event) {\n    return emit('assistant', event);\n  }, function () {\n    voiceReady = true; // когда голос готов, возвращаем первоначальное состояние\n\n    protocol.changeSettings({\n      dubbing: settings.disableDubbing ? -1 : 1\n    });\n  });\n  /** завершает текущий апп */\n\n  var closeApp = function () {\n    var current = app;\n    app = {\n      info: DEFAULT_APP\n    };\n\n    if (!isDefaultApp(current.info)) {\n      emit('app', {\n        type: 'close',\n        app: current.info\n      });\n    }\n  };\n  /** отправляет текст */\n\n\n  var sendText = function (text, shouldSendDisableDubbing) {\n    if (shouldSendDisableDubbing === void 0) {\n      shouldSendDisableDubbing = false;\n    }\n\n    voice.stop();\n    client.sendText(text, settings.sendTextAsSsml, shouldSendDisableDubbing);\n  };\n  /** отправляет server_action */\n\n\n  var sendServerAction = function (serverAction, messageName, requestId, actionApp) {\n    if (messageName === void 0) {\n      messageName = 'SERVER_ACTION';\n    }\n\n    if (requestId === void 0) {\n      requestId = undefined;\n    }\n\n    if (actionApp === void 0) {\n      actionApp = app.info;\n    }\n\n    voice.stop();\n    client.sendServerAction(serverAction, actionApp, messageName).then(function (messageId) {\n      if (requestId && messageId) {\n        requestIdMap[messageId.toString()] = requestId;\n      }\n    });\n  };\n  /** отправляет ответ на запрос доступа к местоположению и пр. меты */\n\n\n  var sendMetaForPermissionRequest = function (requestMessageId, appInfo, items) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getAnswerForRequestPermissions(requestMessageId, appInfo, items)];\n\n          case 1:\n            data = _a.sent();\n            client.sendData(data, 'SERVER_ACTION');\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  subscriptions.push(protocol.on('ready', function () {\n    return emit('vps', {\n      type: 'ready'\n    });\n  })); // при неудачном переподключении к сокету\n\n  subscriptions.push(transport.on('error', function (error) {\n    emit('vps', {\n      type: 'error',\n      error: error\n    });\n  })); // обработка исходящих сообщений\n\n  subscriptions.push(protocol.on('outcoming', function (message) {\n    emit('vps', {\n      type: 'outcoming',\n      message: message\n    });\n  })); // обработка ошибок\n\n  subscriptions.push(protocol.on('error', function (error) {\n    emit('error', error);\n  })); // оповещение о статусах\n\n  subscriptions.push(client.on('status', function (status) {\n    emit('status', status);\n  })); // обработка входящих команд, и событий аппа\n\n  subscriptions.push(client.on('systemMessage', function (systemMessage, originalMessage) {\n    if (originalMessage.messageName === 'ANSWER_TO_USER') {\n      var activate_app_info = systemMessage.activate_app_info,\n          items = systemMessage.items,\n          mesAppInfo = systemMessage.app_info,\n          character = systemMessage.character;\n\n      if (character) {\n        emit('assistant', {\n          character: character.id\n        });\n      } // по-умолчанию activate_app_info: true\n\n\n      if (mesAppInfo && activate_app_info !== false) {\n        emit('app', {\n          type: 'run',\n          app: mesAppInfo\n        });\n      }\n\n      if (items) {\n        for (var i = 0; i < (items || []).length; i++) {\n          var command = items[i].command;\n\n          if (typeof command !== 'undefined') {\n            if (command.type === 'start_music_recognition') {\n              voice.shazam();\n              return;\n            }\n\n            if (command.type === 'request_permissions' && mesAppInfo) {\n              sendMetaForPermissionRequest(originalMessage.messageId, mesAppInfo, command.permissions);\n              return;\n            }\n\n            if (command.type === 'action') {\n              emit('actionCommand', {\n                type: 'command',\n                command: command\n              });\n            }\n\n            if ((command.type === 'smart_app_data' || command.type === 'start_smart_search' || command.type === 'navigation') && mesAppInfo) {\n              // эмитим все команды, т.к бывают фоновые команды\n              emit('app', {\n                type: 'command',\n                command: __assign(__assign({}, command), {\n                  sdk_meta: {\n                    mid: originalMessage.messageId.toString(),\n                    requestId: requestIdMap[originalMessage.messageId.toString()]\n                  }\n                }),\n                app: mesAppInfo\n              });\n            }\n\n            if (command.type === 'close_app') {\n              closeApp();\n            }\n          }\n        }\n      }\n\n      emit('vps', {\n        type: 'incoming',\n        systemMessage: systemMessage,\n        originalMessage: originalMessage\n      });\n    }\n  })); // прокидывает команды backgroundApp'ов в их подписчики\n\n  on('app', function (event) {\n    var _a;\n\n    if (event.type === 'command') {\n      var backgroundAppOnCommand = (_a = backgroundApps[event.app.applicationId]) === null || _a === void 0 ? void 0 : _a.commandsSubscribers;\n\n      if (Array.isArray(backgroundAppOnCommand)) {\n        backgroundAppOnCommand.forEach(function (onCommand) {\n          var _a;\n\n          onCommand(event.command, (_a = event.command.sdk_meta) === null || _a === void 0 ? void 0 : _a.mid);\n        });\n      }\n    }\n  });\n  /** уничтожает ассистент, очищает подписки */\n\n  var destroy = function () {\n    voice.destroy();\n    client.destroy();\n    protocol.destroy();\n    subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) {\n      return unsubscribe();\n    });\n  };\n  /** запускает ассистент (приветствие) */\n\n\n  var start = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.disableGreetings,\n        disableGreetings = _c === void 0 ? false : _c,\n        _d = _b.initPhrase,\n        initPhrase = _d === void 0 ? undefined : _d,\n        _e = _b.isFirstSession,\n        isFirstSession = _e === void 0 ? false : _e;\n\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            if (!(!disableGreetings && isDefaultApp(app.info))) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , client.sendOpenAssistant({\n              isFirstSession: isFirstSession\n            })];\n\n          case 1:\n            _f.sent();\n\n            _f.label = 2;\n\n          case 2:\n            if (initPhrase) {\n              return [2\n              /*return*/\n              , client.sendText(initPhrase).then(function (messageId) {\n                return messageId ? client.waitForAnswer(messageId) : undefined;\n              })];\n            }\n\n            return [2\n            /*return*/\n            , undefined];\n        }\n      });\n    });\n  };\n\n  return {\n    get activeApp() {\n      return !isDefaultApp(app.info) ? app.info : null;\n    },\n\n    get settings() {\n      return settings;\n    },\n\n    destroy: destroy,\n    closeApp: closeApp,\n    listen: voice.listen,\n    sendServerAction: sendServerAction,\n    sendText: sendText,\n    start: start,\n    stop: function () {\n      voice.stop();\n      protocol.clearQueue();\n      transport.close();\n    },\n    stopVoice: voice.stop,\n    emit: emit,\n    on: on,\n    changeConfiguration: protocol.changeConfiguration,\n    changeSettings: function (newSettings) {\n      var dubbingChanged = settings.disableDubbing !== !!newSettings.disableDubbing;\n      settings = __assign(__assign({}, settings), newSettings);\n      voice.change({\n        disableDubbing: settings.disableDubbing,\n        disableListening: settings.disableListening\n      });\n\n      if (!dubbingChanged) {\n        return;\n      }\n\n      protocol.changeSettings({\n        dubbing: settings.disableDubbing || !voiceReady ? -1 : 1\n      });\n    },\n    reconnect: protocol.reconnect,\n\n    get protocol() {\n      return protocol;\n    },\n\n    setActiveApp: function (info, getState) {\n      app = {\n        info: info,\n        getState: getState\n      };\n    },\n    addBackgroundApp: function (_a) {\n      var appInfo = _a.appInfo,\n          getState = _a.getState;\n      backgroundApps[appInfo.applicationId] = {\n        appInfo: appInfo,\n        getState: getState,\n        commandsSubscribers: []\n      };\n\n      var remove = function () {\n        delete backgroundApps[appInfo.applicationId];\n      };\n\n      var onCommand = function (subscriber) {\n        var _a;\n\n        (_a = backgroundApps[appInfo.applicationId]) === null || _a === void 0 ? void 0 : _a.commandsSubscribers.push(subscriber);\n        return {\n          clearSubscribers: function () {\n            if (backgroundApps[appInfo.applicationId]) {\n              backgroundApps[appInfo.applicationId].commandsSubscribers = [];\n            }\n          }\n        };\n      };\n\n      var sendServerActionToBackgroundApp = function (serverAction, messageName, requestId) {\n        var _a;\n\n        if (messageName === void 0) {\n          messageName = 'SERVER_ACTION';\n        }\n\n        if (requestId === void 0) {\n          requestId = undefined;\n        }\n\n        return sendServerAction(serverAction, messageName, requestId, (_a = backgroundApps[appInfo.applicationId]) === null || _a === void 0 ? void 0 : _a.appInfo);\n      };\n\n      return {\n        remove: remove,\n        onCommand: onCommand,\n        sendServerAction: sendServerActionToBackgroundApp\n      };\n    }\n  };\n};\n\nexport { appendHeader as a, createAssistant as c };","map":{"version":3,"sources":["/Users/a19404057/Documents/assistant-client/assistant-client/examples/todo-canvas-app/node_modules/@sberdevices/assistant-client/esm/assistant-64c33db8.js"],"names":["M","MessageNames","d","__awaiter","e","__generator","c","createNanoEvents","a","__assign","p","proto","_","__rest","b","__spreadArrays","f","createCommonjsModule","h","commonjsRequire","m","minimal","g","commonjsGlobal","createClient","protocol","provideMeta","undefined","_a","on","emit","waitForAnswer","messageId","Promise","resolve","off","systemMessageData","originalMessage","messageName","ANSWER_TO_USER","DO_NOTHING","sendData","data","getMessageId","sendSystemMessage","sendCancel","sendOpenAssistant","isFirstSession","meta","_b","_c","label","is_first_session","sent","sendMeta","Object","keys","length","sendServerAction","serverAction","appInfo","app_info","server_action","sendText","text","isSsml","shouldSendDisableDubbing","trim","batch","clientSendText","sendSettings","prevDubbing","sendDisableDubbing","configuration","settings","dubbing","createVoiceStream","callback","sendVoice","onMessage","cb","message","voice","Uint8Array","systemMessage","JSON","parse","status","destroy","createClientMethods","sendMessage","send","payload","other","sendDevice","last","device","Device","create","sendInitialSettings","params","initialSettings","InitialSettings","cancel","Cancel","sendLegacyDevice","legacyDevice","LegacyDevice","Settings","type","Text","mesName","SystemMessage","stringify","Voice","batchingMessageId","lastMessageSent","checkLastMessageStatus","Error","upgradedSendText","_i","arguments","upgradedSendSystemMessage","upgradedSendVoice","upgradedSendSettings","safeJSONParse","str","defaultValue","err","compileBasePayload","userId","token","userChannel","version","vpsToken","appendHeader","uint8Array","arrayBuffer","ArrayBuffer","dataView","DataView","setInt32","newUint8Array","set","removeHeader","slice","createProtocol","transport","logger","getToken","url","locale","basePayload","subscriptions","messageQueue","initMessageId","currentSettings","currentMessageId","Date","now","destroyed","clearReadyTimer","createdMessage","Message","encodedMessage","encode","finish","encodedMessageWithHeader","push","open","sendDeviceOriginal","sendInitialSettingsOriginal","sendLegacyDeviceOriginal","sendSettingsOriginal","args","apply","updateDefaults","obj","assign","updateDevice","additionalInfo","deviceOptions","oldInfo","newInfo","updateSettings","_d","e_1","_e","trys","concat","clearTimeout","window","setTimeout","shift","decodedMessage","decode","clearQueue","splice","close","map","unsubscribe","changeConfiguration","changeDevice","changeSettings","reconnect","defaultWSCreator","WebSocket","createTransport","createWS","stopped","ws","timeOut","retries","navigator","onLine","binaryType","addEventListener","readyState","getMetaPermissons","permission","key","getCurrentLocation","reject","geolocation","getCurrentPosition","coords","timestamp","lat","latitude","toString","lon","longitude","accuracy","timeout","getTime","timezone_id","Intl","DateTimeFormat","resolvedOptions","timeZone","timezone_offset_sec","getTimezoneOffset","getAnswerForRequestPermissions","requestMessageId","items","permissions","response","record_audio","geo","read_contacts","auto_listening","time","action_id","request_message_id","command_response","request_permissions","all","location_1","location","console","warn","then","mtt","module","global","factory","exports","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Music2TrackProtocol","DecoderResult","properties","i","prototype","result","isMusicFound","isFinal","writer","hasOwnProperty","call","uint32","string","bool","encodeDelimited","ldelim","reader","end","len","pos","tag","skipType","decodeDelimited","verify","isString","fromObject","object","String","Boolean","toObject","options","defaults","toJSON","constructor","toJSONOptions","ErrorResponse","errorMessage","errorCode","int32","isInteger","MttResponse","decoderResultField","errorResponse","$oneOfFields","defineProperty","get","oneOfGetter","oneOfSetter","fork","MessageType","error","TypeError","oneofs","createMusicRecognizer","voiceListener","stop","start","listen","MUSIC_RECOGNITION","code","toUpperCase","bytes","asr","Variables","variables","emptyObject","value","end2","tag2","isObject","objects","keys2","j","UndecodedSeconds","undecodedSeconds","float","Number","json","isFinite","FullyFinalized","EmotionResult","name","confidence","Hypothesis","words","acousticCost","linguisticCost","finalCost","phraseStart","phraseEnd","normalizedText","hypothesis","emotionResult","contextAnswer","emptyArray","chunkStart","chunkEnd","timeEndpointDetectionMs","timeDecodingMs","ContextAnswer","Array","isArray","arrays","contextResult","ContextRef","id","index","originalValue","predictedValue","score","PacketWrapperFromServer","undecodedSecondsField","fullyFinalizedField","createSpeechRecognizer","STT","isAudioSupported","AudioContext","webkitAudioContext","createAudioContext","audioContext","resolveAudioContext","onReady","isSafari_1","vendor","search","context_1","context","ready","state","handleClick_1","document","removeEventListener","oscillator","createOscillator","frequency","connect","destination","resume","unsubscribe_1","downsampleBuffer","buffer","inSampleRate","outSampleRate","sampleRateRatio","newLength","Math","round","Int16Array","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","min","TARGET_SAMPLE_RATE","IS_FIREFOX","userAgent","toLowerCase","indexOf","processor","createAudioRecorder","stream","input","getTracks","forEach","track","disconnect","sampleRate","createMediaStreamSource","createScriptProcessor","listener","inputBuffer","getChannelData","once","createNavigatorAudioProvider","mediaDevices","getUserMedia","audio","createVoiceListener","createAudioProvider","stopRecord","handleVoice","recStop","catch","createTrackCollection","trackIds","trackMap","clear","Map","has","getById","getByIndex","some","predicate","createChunkQueue","chunks","duration","loaded","chunk","toPlay","remove","popAll","allLoaded","bufferLen","ended","from16BitToFloat32","incomingData","l","outputData","Float32Array","createTrackStream","ctx","numberOfChannels","delay","onPlay","onEnd","trackStatus","queue","extraByte","lastChunkOffset","startTime","firstChunk","play","currentTime","getExtraBytes","bytesArraysSizes","incomingMessageVoiceDataLength","sourceLen","prepend","createChunk","audioBuffer","createBuffer","channelChunk","source","createBufferSource","onended","write","slicePoint","dataBuffer","bufferUi8","bufferI16","setLoaded","createVoicePlayer","actx","startVoiceDelay","tracks","active","cursor","current","append","trackId","cur","setActive","createVoice","client","voicePlayer","musicRecognizer","speechRecognizer","disableDubbing","disableListening","isPlaying","autolistenMesId","stopListening","shazam","emotion","mesId","isLast","mid","autoListening","change","newSettings","STATE_UPDATE_TIMEOUT","DEFAULT_PROJECT_ID","DEFAULT_APPLICATION_ID","DEFAULT_APP_VERSION_ID","DEFAULT_APP","projectId","applicationId","appversionId","frontendStateId","join","frontendType","systemName","frontendEndpoint","isDefaultApp","promiseTimeout","promise","timeoutId","race","v","createAssistant","getMeta","requestIdMap","voiceReady","app","info","sendTextAsSsml","backgroundApps","metaProvider","appState","current_app","getBackgroundAppsMeta","background_apps","getState","apps","backgroundAppsIds","backgroundAppsMeta","results","appResult","fakeVps","createFakeWS","event","closeApp","requestId","actionApp","sendMetaForPermissionRequest","activate_app_info","mesAppInfo","character","command","sdk_meta","backgroundAppOnCommand","commandsSubscribers","onCommand","disableGreetings","initPhrase","_f","activeApp","stopVoice","dubbingChanged","setActiveApp","addBackgroundApp","subscriber","clearSubscribers","sendServerActionToBackgroundApp"],"mappings":"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","sourcesContent":["import { M as MessageNames, d as __awaiter, e as __generator, c as createNanoEvents, a as __assign, p as proto, _ as __rest, b as __spreadArrays, f as createCommonjsModule, h as commonjsRequire, m as minimal, g as commonjsGlobal } from './typings-79533271.js';\n\nvar createClient = function (protocol, provideMeta) {\n    if (provideMeta === void 0) { provideMeta = undefined; }\n    var _a = createNanoEvents(), on = _a.on, emit = _a.emit;\n    /** ждет ответ бека и возвращает данные из этого ответа */\n    var waitForAnswer = function (messageId) {\n        return new Promise(function (resolve) {\n            var off = on('systemMessage', function (systemMessageData, originalMessage) {\n                if (originalMessage.messageId === messageId &&\n                    (originalMessage.messageName === MessageNames.ANSWER_TO_USER ||\n                        originalMessage.messageName === MessageNames.DO_NOTHING)) {\n                    off();\n                    resolve(systemMessageData);\n                }\n            });\n        });\n    };\n    /** отправляет произвольный systemMessage, не подкладывает мету */\n    var sendData = function (data, messageName) {\n        if (messageName === void 0) { messageName = ''; }\n        var messageId = protocol.getMessageId();\n        protocol.sendSystemMessage({\n            data: data,\n            messageName: messageName,\n        }, true, messageId);\n        return messageId;\n    };\n    /** отправляет cancel на сообщение */\n    var sendCancel = function (messageId) {\n        protocol.sendCancel({}, true, messageId);\n    };\n    /** отправляет приветствие */\n    var sendOpenAssistant = function (_a) {\n        var isFirstSession = (_a === void 0 ? { isFirstSession: false } : _a).isFirstSession;\n        return __awaiter(void 0, void 0, void 0, function () {\n            var data, meta, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        data = isFirstSession ? { is_first_session: true } : {};\n                        if (!provideMeta) return [3 /*break*/, 2];\n                        return [4 /*yield*/, provideMeta()];\n                    case 1:\n                        _b = _c.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        _b = {};\n                        _c.label = 3;\n                    case 3:\n                        meta = _b;\n                        return [2 /*return*/, waitForAnswer(sendData(__assign(__assign({}, meta), data), 'OPEN_ASSISTANT'))];\n                }\n            });\n        });\n    };\n    /** вызывает sendSystemMessage, куда подкладывает мету */\n    var sendMeta = function (sendSystemMessage) { return __awaiter(void 0, void 0, void 0, function () {\n        var meta, _a;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    if (!provideMeta) return [3 /*break*/, 2];\n                    return [4 /*yield*/, provideMeta()];\n                case 1:\n                    _a = _b.sent();\n                    return [3 /*break*/, 3];\n                case 2:\n                    _a = {};\n                    _b.label = 3;\n                case 3:\n                    meta = _a;\n                    if (Object.keys(meta).length) {\n                        sendSystemMessage({\n                            data: meta,\n                            messageName: '',\n                        }, false);\n                    }\n                    return [2 /*return*/];\n            }\n        });\n    }); };\n    /** отправляет server_action и мету */\n    var sendServerAction = function (serverAction, appInfo, messageName) {\n        if (messageName === void 0) { messageName = 'SERVER_ACTION'; }\n        return __awaiter(void 0, void 0, void 0, function () {\n            var messageId;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        messageId = protocol.getMessageId();\n                        // мету и server_action отправляем в одном systemMessage\n                        return [4 /*yield*/, sendMeta(function (_a) {\n                                var data = _a.data;\n                                protocol.sendSystemMessage({\n                                    // eslint-disable-next-line @typescript-eslint/camelcase\n                                    data: __assign(__assign({}, data), { app_info: appInfo, server_action: serverAction }),\n                                    messageName: messageName || 'SERVER_ACTION',\n                                }, true, messageId);\n                            })];\n                    case 1:\n                        // мету и server_action отправляем в одном systemMessage\n                        _a.sent();\n                        return [2 /*return*/, messageId];\n                }\n            });\n        });\n    };\n    /** отправляет текст и текущую мету */\n    var sendText = function (text, isSsml, shouldSendDisableDubbing) {\n        if (isSsml === void 0) { isSsml = false; }\n        return __awaiter(void 0, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (text.trim() === '') {\n                    return [2 /*return*/, undefined];\n                }\n                return [2 /*return*/, protocol.batch(function (_a) {\n                        var sendSystemMessage = _a.sendSystemMessage, clientSendText = _a.sendText, sendSettings = _a.sendSettings, messageId = _a.messageId;\n                        return __awaiter(void 0, void 0, void 0, function () {\n                            var prevDubbing, sendDisableDubbing;\n                            return __generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0: return [4 /*yield*/, sendMeta(sendSystemMessage)];\n                                    case 1:\n                                        _b.sent();\n                                        prevDubbing = protocol.configuration.settings.dubbing;\n                                        sendDisableDubbing = prevDubbing !== -1 && shouldSendDisableDubbing;\n                                        if (!sendDisableDubbing) return [3 /*break*/, 3];\n                                        return [4 /*yield*/, sendSettings({ dubbing: -1 }, false)];\n                                    case 2:\n                                        _b.sent();\n                                        _b.label = 3;\n                                    case 3:\n                                        isSsml ? clientSendText(text, {}, 'application/ssml') : clientSendText(text, {});\n                                        if (sendDisableDubbing) {\n                                            sendSettings({ dubbing: prevDubbing });\n                                        }\n                                        return [2 /*return*/, messageId];\n                                }\n                            });\n                        });\n                    })];\n            });\n        });\n    };\n    /** инициализирует исходящий голосовой поток, факт. передает в callback параметры для отправки голоса,\n     * отправляет мету */\n    var createVoiceStream = function (callback) {\n        return protocol.batch(function (_a) {\n            var sendSystemMessage = _a.sendSystemMessage, sendVoice = _a.sendVoice, messageId = _a.messageId;\n            return __awaiter(void 0, void 0, void 0, function () {\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0: return [4 /*yield*/, callback({\n                                sendVoice: sendVoice,\n                                messageId: messageId,\n                                onMessage: function (cb) { return protocol.on('incoming', cb); },\n                            })];\n                        case 1:\n                            _b.sent();\n                            sendMeta(sendSystemMessage);\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        });\n    };\n    var off = protocol.on('incoming', function (message) {\n        var _a;\n        if (message.voice) {\n            emit('voice', message.voice.data || new Uint8Array(), message);\n        }\n        if ((_a = message.systemMessage) === null || _a === void 0 ? void 0 : _a.data) {\n            emit('systemMessage', JSON.parse(message.systemMessage.data), message);\n        }\n        if (message.status) {\n            emit('status', message.status, message);\n        }\n    });\n    return {\n        destroy: function () {\n            off();\n        },\n        createVoiceStream: createVoiceStream,\n        sendData: sendData,\n        sendMeta: sendMeta,\n        sendOpenAssistant: sendOpenAssistant,\n        sendServerAction: sendServerAction,\n        sendText: sendText,\n        sendCancel: sendCancel,\n        on: on,\n        waitForAnswer: waitForAnswer,\n    };\n};\n\nvar createClientMethods = function (_a) {\n    var getMessageId = _a.getMessageId, sendMessage = _a.sendMessage;\n    var send = function (_a) {\n        var payload = _a.payload, messageId = _a.messageId, other = __rest(_a, [\"payload\", \"messageId\"]);\n        sendMessage(__assign(__assign(__assign({ messageName: '' }, payload), { messageId: messageId }), other));\n    };\n    var sendDevice = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                device: proto.Device.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendInitialSettings = function (data, last, messageId, params) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        if (params === void 0) { params = {}; }\n        return send({\n            payload: __assign({ initialSettings: proto.InitialSettings.create(data), last: last ? 1 : -1 }, params),\n            messageId: messageId,\n        });\n    };\n    var sendCancel = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                cancel: proto.Cancel.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendLegacyDevice = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                legacyDevice: proto.LegacyDevice.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendSettings = function (data, last, messageId) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        return send({\n            payload: {\n                settings: proto.Settings.create(data),\n                last: last ? 1 : -1,\n            },\n            messageId: messageId,\n        });\n    };\n    var sendText = function (data, params, type, messageId) {\n        var _a;\n        if (params === void 0) { params = {}; }\n        if (type === void 0) { type = ''; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        var text = type ? { data: data, type: type } : { data: data };\n        send(__assign({ payload: {\n                text: proto.Text.create(text),\n                last: (_a = params.last) !== null && _a !== void 0 ? _a : 1,\n            }, messageId: messageId }, params));\n    };\n    var sendSystemMessage = function (_a, last, messageId, params) {\n        var data = _a.data, _b = _a.messageName, mesName = _b === void 0 ? '' : _b;\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        if (params === void 0) { params = {}; }\n        send({\n            payload: __assign({ systemMessage: proto.SystemMessage.create({\n                    data: JSON.stringify(data),\n                }), messageName: mesName, last: last ? 1 : -1 }, params),\n            messageId: messageId,\n        });\n    };\n    var sendVoice = function (data, last, messageId, mesName, params) {\n        if (last === void 0) { last = true; }\n        if (messageId === void 0) { messageId = getMessageId(); }\n        if (params === void 0) { params = {}; }\n        return send({\n            payload: __assign({ voice: proto.Voice.create({\n                    data: new Uint8Array(data),\n                }), messageName: mesName, last: last ? 1 : -1 }, params),\n            messageId: messageId,\n        });\n    };\n    var batch = function (cb) {\n        var batchingMessageId = getMessageId();\n        var lastMessageSent = false;\n        var checkLastMessageStatus = function (last) {\n            if (lastMessageSent) {\n                if (last) {\n                    throw new Error(\"Can't send two last items in batch\");\n                }\n                else {\n                    throw new Error(\"Can't send messages in batch after last message have been sent\");\n                }\n            }\n            else if (last) {\n                lastMessageSent = true;\n            }\n        };\n        var upgradedSendText = function () {\n            var _a = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                _a[_i] = arguments[_i];\n            }\n            var data = _a[0], params = _a[1], type = _a[2];\n            checkLastMessageStatus((params === null || params === void 0 ? void 0 : params.last) === 1);\n            return sendText(data, params, type, batchingMessageId);\n        };\n        var upgradedSendSystemMessage = function (data, last, params) {\n            checkLastMessageStatus(last);\n            return sendSystemMessage(data, last, batchingMessageId, params);\n        };\n        var upgradedSendVoice = function (data, last, mesName, params) {\n            checkLastMessageStatus(last);\n            return sendVoice(data, last, batchingMessageId, mesName, params);\n        };\n        var upgradedSendSettings = function (data, last, messageId) {\n            checkLastMessageStatus(last);\n            return sendSettings(data, last, messageId);\n        };\n        return cb({\n            sendText: upgradedSendText,\n            sendSystemMessage: upgradedSendSystemMessage,\n            sendVoice: upgradedSendVoice,\n            sendSettings: upgradedSendSettings,\n            messageId: batchingMessageId,\n        });\n    };\n    return {\n        sendDevice: sendDevice,\n        sendInitialSettings: sendInitialSettings,\n        sendCancel: sendCancel,\n        sendLegacyDevice: sendLegacyDevice,\n        sendSettings: sendSettings,\n        sendText: sendText,\n        sendSystemMessage: sendSystemMessage,\n        sendVoice: sendVoice,\n        batch: batch,\n    };\n};\n\nvar safeJSONParse = function (str, defaultValue) {\n    try {\n        return JSON.parse(str);\n    }\n    catch (err) {\n        return defaultValue;\n    }\n};\nvar compileBasePayload = function (_a) {\n    var userId = _a.userId, token = _a.token, userChannel = _a.userChannel, version = _a.version, messageName = _a.messageName, vpsToken = _a.vpsToken;\n    if (version < 3) {\n        return {\n            userId: userId,\n            token: token,\n            userChannel: userChannel,\n            messageName: messageName,\n            vpsToken: vpsToken,\n            version: version,\n        };\n    }\n    return {\n        token: token,\n        messageName: messageName,\n        version: version,\n    };\n};\nvar appendHeader = function (uint8Array) {\n    // Добавляем 4 байта в начало с длинной сообщения\n    var arrayBuffer = new ArrayBuffer(4);\n    var dataView = new DataView(arrayBuffer, 0);\n    dataView.setInt32(0, uint8Array.length, true);\n    var newUint8Array = new Uint8Array(4 + uint8Array.length);\n    newUint8Array.set(new Uint8Array(arrayBuffer));\n    newUint8Array.set(uint8Array, 4);\n    return newUint8Array;\n};\nvar removeHeader = function (uint8Array) {\n    // Убираем 4 байта в начале с длинной сообщения\n    var newUint8Array = new Uint8Array(uint8Array).slice(4);\n    return newUint8Array;\n};\nvar createProtocol = function (transport, _a) {\n    var logger = _a.logger, getToken = _a.getToken, params = __rest(_a, [\"logger\", \"getToken\"]);\n    var configuration = __assign(__assign({}, params), { token: '' });\n    var url = configuration.url, userId = configuration.userId, userChannel = configuration.userChannel, locale = configuration.locale, device = configuration.device, settings = configuration.settings, legacyDevice = configuration.legacyDevice, version = configuration.version, messageName = configuration.messageName, vpsToken = configuration.vpsToken, meta = configuration.meta;\n    var basePayload = compileBasePayload({ userId: userId, token: '', messageName: messageName, vpsToken: vpsToken, userChannel: userChannel, version: version });\n    var _b = createNanoEvents(), on = _b.on, emit = _b.emit;\n    var subscriptions = [];\n    var messageQueue = [];\n    var initMessageId; // ид инициализационного сообщения, отправим мессаджи в неинициализированный протокол\n    var currentSettings = { device: device, legacyDevice: legacyDevice, settings: settings, locale: locale };\n    var currentMessageId = Date.now();\n    var status = 'closed';\n    var destroyed = false;\n    var clearReadyTimer; // ид таймера установки состояния ready\n    var getMessageId = function () {\n        return currentMessageId++;\n    };\n    var send = function (message) {\n        var createdMessage = proto.Message.create(__assign(__assign({}, basePayload), message));\n        logger === null || logger === void 0 ? void 0 : logger({ type: 'outcoming', message: createdMessage });\n        var encodedMessage = proto.Message.encode(createdMessage).finish();\n        var encodedMessageWithHeader = appendHeader(encodedMessage);\n        transport.send(encodedMessageWithHeader);\n        emit('outcoming', createdMessage);\n    };\n    var sendMessage = function (message) {\n        // отправляем инициализационные сообщения или все, когда сессия = ready\n        if (status === 'ready' || (typeof initMessageId !== undefined && message.messageId === initMessageId)) {\n            send(message);\n        }\n        else {\n            // накапливаем сообщения, отправим после успешного коннекта\n            messageQueue.push(message);\n            if (status === 'closed' && !destroyed) {\n                transport.open(url);\n            }\n        }\n    };\n    var _c = createClientMethods({ getMessageId: getMessageId, sendMessage: sendMessage }), sendDeviceOriginal = _c.sendDevice, sendInitialSettingsOriginal = _c.sendInitialSettings, sendCancel = _c.sendCancel, sendLegacyDeviceOriginal = _c.sendLegacyDevice, sendSettingsOriginal = _c.sendSettings, sendText = _c.sendText, sendSystemMessage = _c.sendSystemMessage, sendVoice = _c.sendVoice, batch = _c.batch;\n    var sendDevice = (function (data) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        currentSettings = __assign(__assign({}, currentSettings), { device: data });\n        return sendDeviceOriginal.apply(void 0, __spreadArrays([data], args));\n    });\n    var sendInitialSettings = (function (data) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        if (data.device && data.settings) {\n            currentSettings = __assign(__assign({}, currentSettings), { device: data.device, settings: data.settings, locale: data.locale || undefined });\n        }\n        return sendInitialSettingsOriginal.apply(void 0, __spreadArrays([data], args));\n    });\n    var sendLegacyDevice = (function (data) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        currentSettings = __assign(__assign({}, currentSettings), { legacyDevice: data });\n        return sendLegacyDeviceOriginal.apply(void 0, __spreadArrays([data], args));\n    });\n    var updateDefaults = function (obj) {\n        Object.assign(basePayload, obj);\n        Object.assign(configuration, obj);\n    };\n    var updateDevice = function (obj) {\n        var _a, _b;\n        if (obj) {\n            var additionalInfo = obj.additionalInfo, deviceOptions = __rest(obj, [\"additionalInfo\"]);\n            var oldInfo = ((_a = currentSettings.device) === null || _a === void 0 ? void 0 : _a.additionalInfo) ? safeJSONParse((_b = currentSettings.device) === null || _b === void 0 ? void 0 : _b.additionalInfo, {})\n                : {};\n            var newInfo = additionalInfo ? safeJSONParse(additionalInfo, {}) : {};\n            currentSettings.device = __assign(__assign(__assign({}, currentSettings.device), deviceOptions), { additionalInfo: JSON.stringify(__assign(__assign({}, oldInfo), newInfo)) });\n        }\n    };\n    var updateSettings = function (obj) {\n        Object.assign(currentSettings.settings, obj);\n        if (status === 'connected' || status === 'ready') {\n            sendSettingsOriginal(obj);\n        }\n    };\n    subscriptions.push(transport.on('connecting', function () {\n        status = 'connecting';\n    }));\n    subscriptions.push(transport.on('close', function () {\n        status = 'closed';\n    }));\n    subscriptions.push(transport.on('ready', function () { return __awaiter(void 0, void 0, void 0, function () {\n        var _a, _b, _c, _d, e_1;\n        return __generator(this, function (_e) {\n            switch (_e.label) {\n                case 0:\n                    _e.trys.push([0, 2, , 3]);\n                    _b = (_a = Object).assign;\n                    _c = [basePayload];\n                    _d = {};\n                    return [4 /*yield*/, getToken()];\n                case 1:\n                    _b.apply(_a, _c.concat([(_d.token = _e.sent(), _d)]));\n                    return [3 /*break*/, 3];\n                case 2:\n                    e_1 = _e.sent();\n                    emit('error', {\n                        type: 'GET_TOKEN_ERROR',\n                        message: e_1 === null || e_1 === void 0 ? void 0 : e_1.message,\n                    });\n                    return [2 /*return*/];\n                case 3:\n                    Object.assign(configuration, { token: basePayload.token });\n                    initMessageId = getMessageId();\n                    if (version < 3) {\n                        if (version === 1 && currentSettings.legacyDevice) {\n                            sendLegacyDevice(currentSettings.legacyDevice, false, initMessageId);\n                        }\n                        else if (version === 2 && currentSettings.device) {\n                            sendDevice(currentSettings.device, false, initMessageId);\n                        }\n                        sendSettingsOriginal(currentSettings.settings, true, initMessageId);\n                    }\n                    else {\n                        sendInitialSettings({\n                            userId: userId,\n                            userChannel: userChannel,\n                            device: currentSettings.device,\n                            settings: currentSettings.settings,\n                            locale: version > 3 ? currentSettings.locale : undefined,\n                        }, true, initMessageId, { meta: meta });\n                    }\n                    status = 'connected';\n                    clearTimeout(clearReadyTimer);\n                    /// считаем коннект = ready, если по истечении таймаута сокет не был разорван\n                    /// т.к бек может разрывать сокет, если с settings что-то не так\n                    clearReadyTimer = window.setTimeout(function () {\n                        if (status !== 'connected') {\n                            return;\n                        }\n                        status = 'ready';\n                        while (messageQueue.length > 0) {\n                            var message = messageQueue.shift();\n                            if (message) {\n                                send(message);\n                            }\n                        }\n                        emit('ready');\n                    }, 500);\n                    logger === null || logger === void 0 ? void 0 : logger({ type: 'init', params: __assign(__assign({}, configuration), currentSettings) });\n                    return [2 /*return*/];\n            }\n        });\n    }); }));\n    subscriptions.push(transport.on('message', function (message) {\n        var decodedMessage = proto.Message.decode(removeHeader(message));\n        logger === null || logger === void 0 ? void 0 : logger({ type: 'incoming', message: decodedMessage });\n        emit('incoming', decodedMessage);\n    }));\n    return {\n        clearQueue: function () {\n            messageQueue.splice(0, messageQueue.length);\n        },\n        destroy: function () {\n            destroyed = true;\n            transport.close();\n            subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) { return unsubscribe(); });\n        },\n        on: on,\n        getMessageId: getMessageId,\n        sendCancel: sendCancel,\n        sendText: sendText,\n        sendSystemMessage: sendSystemMessage,\n        sendVoice: sendVoice,\n        send: sendMessage,\n        batch: batch,\n        changeConfiguration: updateDefaults,\n        changeDevice: updateDevice,\n        changeSettings: updateSettings,\n        reconnect: function () {\n            if (status !== 'closed') {\n                transport.reconnect(url); // даем время случиться close\n            }\n            else {\n                transport.open(url);\n            }\n        },\n        get currentMessageId() {\n            return currentMessageId;\n        },\n        get configuration() {\n            return configuration;\n        },\n    };\n};\n\nvar defaultWSCreator = function (url) { return new WebSocket(url); };\nvar createTransport = function (createWS) {\n    if (createWS === void 0) { createWS = defaultWSCreator; }\n    var _a = createNanoEvents(), on = _a.on, emit = _a.emit;\n    var status = 'closed';\n    var stopped = false;\n    var ws;\n    var timeOut; // ид таймера автореконнекта\n    var retries = 0; // количество попыток коннекта при ошибке\n    var close = function () {\n        stopped = true;\n        ws && ws.close(); // статус изменится по подписке\n        clearTimeout(timeOut);\n        timeOut = undefined;\n    };\n    var send = function (data) {\n        if (!navigator.onLine) {\n            close();\n            emit('error');\n            return;\n        }\n        ws.send(data);\n    };\n    var open = function (url) {\n        if (status !== 'closed') {\n            return;\n        }\n        status = 'connecting';\n        emit('connecting');\n        // TODO: нужен таймаут для подключения\n        ws = createWS(url);\n        ws.binaryType = 'arraybuffer';\n        ws.addEventListener('open', function () {\n            if (ws.readyState === 1) {\n                retries = 0; // сбрасываем количество попыток реконнекта\n                status = 'ready';\n                emit('ready');\n            }\n        });\n        ws.addEventListener('close', function () {\n            status = 'closed';\n            emit('close');\n        });\n        ws.addEventListener('error', function (e) {\n            if (status !== 'connecting') {\n                throw e;\n            }\n            // пробуем переподключаться, если возникла ошибка при коннекте\n            if (!ws || (ws.readyState === 3 && !stopped)) {\n                if (timeOut) {\n                    clearTimeout(timeOut);\n                }\n                if (retries < 3) {\n                    timeOut = window.setTimeout(function () {\n                        open(url);\n                        retries++;\n                    }, 300 * retries);\n                }\n                else {\n                    retries = 0;\n                    emit('error', e);\n                }\n            }\n        });\n        ws.addEventListener('message', function (e) {\n            emit('message', e.data);\n        });\n    };\n    var reconnect = function (url) {\n        if (status === 'closed') {\n            open(url);\n            return;\n        }\n        close();\n        setTimeout(function () { return reconnect(url); });\n    };\n    return {\n        send: send,\n        open: open,\n        close: close,\n        reconnect: reconnect,\n        on: on,\n    };\n};\n\nvar getMetaPermissons = function (permission) {\n    return Object.keys(permission).map(function (key) { return ({\n        type: key,\n        status: permission[key],\n    }); });\n};\nvar getCurrentLocation = function () { return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n                navigator.geolocation.getCurrentPosition(function (_a) {\n                    var coords = _a.coords, timestamp = _a.timestamp;\n                    resolve({\n                        lat: coords.latitude.toString(),\n                        lon: coords.longitude.toString(),\n                        accuracy: coords.accuracy,\n                        timestamp: timestamp,\n                    });\n                }, reject, { timeout: 5000 });\n            })];\n    });\n}); };\nvar getTime = function () { return ({\n    // Здесь нужен полифилл, т.к. `Intl.DateTimeFormat().resolvedOptions().timeZone` - возвращает пустую строку\n    timezone_id: Intl.DateTimeFormat().resolvedOptions().timeZone,\n    timezone_offset_sec: -new Date().getTimezoneOffset() * 60,\n    timestamp: Date.now(),\n}); };\nvar getAnswerForRequestPermissions = function (requestMessageId, appInfo, items) { return __awaiter(void 0, void 0, void 0, function () {\n    var permissions, response;\n    return __generator(this, function (_a) {\n        permissions = {\n            record_audio: 'denied_once',\n            geo: 'denied_once',\n            read_contacts: 'denied_permanently',\n            push: 'denied_once',\n        };\n        response = {\n            auto_listening: false,\n            app_info: appInfo,\n            meta: {\n                time: getTime(),\n                permissions: [],\n            },\n            server_action: {\n                action_id: 'command_response',\n                request_message_id: requestMessageId,\n                command_response: {\n                    request_permissions: {\n                        permissions: [],\n                    },\n                },\n            },\n        };\n        return [2 /*return*/, Promise.all(items.map(function (permission) { return __awaiter(void 0, void 0, void 0, function () {\n                var _a, location_1, _b;\n                var _c, _d;\n                return __generator(this, function (_e) {\n                    switch (_e.label) {\n                        case 0:\n                            _a = permission;\n                            switch (_a) {\n                                case 'geo': return [3 /*break*/, 1];\n                            }\n                            return [3 /*break*/, 5];\n                        case 1:\n                            _e.trys.push([1, 3, , 4]);\n                            return [4 /*yield*/, getCurrentLocation()];\n                        case 2:\n                            location_1 = _e.sent();\n                            permissions.geo = 'granted';\n                            response.meta.location = location_1;\n                            (_c = response.server_action.command_response.request_permissions) === null || _c === void 0 ? void 0 : _c.permissions.push({\n                                type: 'geo',\n                                status: 'granted',\n                            });\n                            return [3 /*break*/, 4];\n                        case 3:\n                            _b = _e.sent();\n                            permissions.geo = 'denied_permanently';\n                            (_d = response.server_action.command_response.request_permissions) === null || _d === void 0 ? void 0 : _d.permissions.push({\n                                type: 'geo',\n                                status: 'denied_permanently',\n                            });\n                            return [3 /*break*/, 4];\n                        case 4: return [3 /*break*/, 6];\n                        case 5:\n                            // eslint-disable-next-line no-console\n                            console.warn('Unsupported permission request:', permission);\n                            _e.label = 6;\n                        case 6: return [2 /*return*/];\n                    }\n                });\n            }); })).then(function () {\n                response.meta.permissions = getMetaPermissons(permissions);\n                return response;\n            })];\n    });\n}); };\n\nvar mtt = createCommonjsModule(function (module) {\n/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n(function(global, factory) { /* global define, require, module */\n\n    /* AMD */ if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports)\n        module.exports = factory(minimal);\n\n})(commonjsGlobal, function($protobuf) {\n\n    // Common aliases\n    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n    \n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    \n    $root.Music2TrackProtocol = (function() {\n    \n        /**\n         * Namespace Music2TrackProtocol.\n         * @exports Music2TrackProtocol\n         * @namespace\n         */\n        var Music2TrackProtocol = {};\n    \n        Music2TrackProtocol.DecoderResult = (function() {\n    \n            /**\n             * Properties of a DecoderResult.\n             * @memberof Music2TrackProtocol\n             * @interface IDecoderResult\n             * @property {string|null} [result] DecoderResult result\n             * @property {boolean|null} [isMusicFound] DecoderResult isMusicFound\n             * @property {boolean|null} [isFinal] DecoderResult isFinal\n             */\n    \n            /**\n             * Constructs a new DecoderResult.\n             * @memberof Music2TrackProtocol\n             * @classdesc Represents a DecoderResult.\n             * @implements IDecoderResult\n             * @constructor\n             * @param {Music2TrackProtocol.IDecoderResult=} [properties] Properties to set\n             */\n            function DecoderResult(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n    \n            /**\n             * DecoderResult result.\n             * @member {string} result\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @instance\n             */\n            DecoderResult.prototype.result = \"\";\n    \n            /**\n             * DecoderResult isMusicFound.\n             * @member {boolean} isMusicFound\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @instance\n             */\n            DecoderResult.prototype.isMusicFound = false;\n    \n            /**\n             * DecoderResult isFinal.\n             * @member {boolean} isFinal\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @instance\n             */\n            DecoderResult.prototype.isFinal = false;\n    \n            /**\n             * Creates a new DecoderResult instance using the specified properties.\n             * @function create\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Music2TrackProtocol.IDecoderResult=} [properties] Properties to set\n             * @returns {Music2TrackProtocol.DecoderResult} DecoderResult instance\n             */\n            DecoderResult.create = function create(properties) {\n                return new DecoderResult(properties);\n            };\n    \n            /**\n             * Encodes the specified DecoderResult message. Does not implicitly {@link Music2TrackProtocol.DecoderResult.verify|verify} messages.\n             * @function encode\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Music2TrackProtocol.IDecoderResult} message DecoderResult message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DecoderResult.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.result != null && Object.hasOwnProperty.call(message, \"result\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.result);\n                if (message.isMusicFound != null && Object.hasOwnProperty.call(message, \"isMusicFound\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isMusicFound);\n                if (message.isFinal != null && Object.hasOwnProperty.call(message, \"isFinal\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isFinal);\n                return writer;\n            };\n    \n            /**\n             * Encodes the specified DecoderResult message, length delimited. Does not implicitly {@link Music2TrackProtocol.DecoderResult.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Music2TrackProtocol.IDecoderResult} message DecoderResult message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DecoderResult.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n    \n            /**\n             * Decodes a DecoderResult message from the specified reader or buffer.\n             * @function decode\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DecoderResult.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Music2TrackProtocol.DecoderResult();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.result = reader.string();\n                        break;\n                    case 2:\n                        message.isMusicFound = reader.bool();\n                        break;\n                    case 3:\n                        message.isFinal = reader.bool();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Decodes a DecoderResult message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DecoderResult.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n    \n            /**\n             * Verifies a DecoderResult message.\n             * @function verify\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DecoderResult.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.result != null && message.hasOwnProperty(\"result\"))\n                    if (!$util.isString(message.result))\n                        return \"result: string expected\";\n                if (message.isMusicFound != null && message.hasOwnProperty(\"isMusicFound\"))\n                    if (typeof message.isMusicFound !== \"boolean\")\n                        return \"isMusicFound: boolean expected\";\n                if (message.isFinal != null && message.hasOwnProperty(\"isFinal\"))\n                    if (typeof message.isFinal !== \"boolean\")\n                        return \"isFinal: boolean expected\";\n                return null;\n            };\n    \n            /**\n             * Creates a DecoderResult message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Music2TrackProtocol.DecoderResult} DecoderResult\n             */\n            DecoderResult.fromObject = function fromObject(object) {\n                if (object instanceof $root.Music2TrackProtocol.DecoderResult)\n                    return object;\n                var message = new $root.Music2TrackProtocol.DecoderResult();\n                if (object.result != null)\n                    message.result = String(object.result);\n                if (object.isMusicFound != null)\n                    message.isMusicFound = Boolean(object.isMusicFound);\n                if (object.isFinal != null)\n                    message.isFinal = Boolean(object.isFinal);\n                return message;\n            };\n    \n            /**\n             * Creates a plain object from a DecoderResult message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @static\n             * @param {Music2TrackProtocol.DecoderResult} message DecoderResult\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DecoderResult.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.result = \"\";\n                    object.isMusicFound = false;\n                    object.isFinal = false;\n                }\n                if (message.result != null && message.hasOwnProperty(\"result\"))\n                    object.result = message.result;\n                if (message.isMusicFound != null && message.hasOwnProperty(\"isMusicFound\"))\n                    object.isMusicFound = message.isMusicFound;\n                if (message.isFinal != null && message.hasOwnProperty(\"isFinal\"))\n                    object.isFinal = message.isFinal;\n                return object;\n            };\n    \n            /**\n             * Converts this DecoderResult to JSON.\n             * @function toJSON\n             * @memberof Music2TrackProtocol.DecoderResult\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DecoderResult.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return DecoderResult;\n        })();\n    \n        Music2TrackProtocol.ErrorResponse = (function() {\n    \n            /**\n             * Properties of an ErrorResponse.\n             * @memberof Music2TrackProtocol\n             * @interface IErrorResponse\n             * @property {string|null} [errorMessage] ErrorResponse errorMessage\n             * @property {number|null} [errorCode] ErrorResponse errorCode\n             */\n    \n            /**\n             * Constructs a new ErrorResponse.\n             * @memberof Music2TrackProtocol\n             * @classdesc Represents an ErrorResponse.\n             * @implements IErrorResponse\n             * @constructor\n             * @param {Music2TrackProtocol.IErrorResponse=} [properties] Properties to set\n             */\n            function ErrorResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n    \n            /**\n             * ErrorResponse errorMessage.\n             * @member {string} errorMessage\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @instance\n             */\n            ErrorResponse.prototype.errorMessage = \"\";\n    \n            /**\n             * ErrorResponse errorCode.\n             * @member {number} errorCode\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @instance\n             */\n            ErrorResponse.prototype.errorCode = 0;\n    \n            /**\n             * Creates a new ErrorResponse instance using the specified properties.\n             * @function create\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Music2TrackProtocol.IErrorResponse=} [properties] Properties to set\n             * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse instance\n             */\n            ErrorResponse.create = function create(properties) {\n                return new ErrorResponse(properties);\n            };\n    \n            /**\n             * Encodes the specified ErrorResponse message. Does not implicitly {@link Music2TrackProtocol.ErrorResponse.verify|verify} messages.\n             * @function encode\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Music2TrackProtocol.IErrorResponse} message ErrorResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ErrorResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.errorMessage);\n                if (message.errorCode != null && Object.hasOwnProperty.call(message, \"errorCode\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.errorCode);\n                return writer;\n            };\n    \n            /**\n             * Encodes the specified ErrorResponse message, length delimited. Does not implicitly {@link Music2TrackProtocol.ErrorResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Music2TrackProtocol.IErrorResponse} message ErrorResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n    \n            /**\n             * Decodes an ErrorResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ErrorResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Music2TrackProtocol.ErrorResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.errorMessage = reader.string();\n                        break;\n                    case 2:\n                        message.errorCode = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Decodes an ErrorResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ErrorResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n    \n            /**\n             * Verifies an ErrorResponse message.\n             * @function verify\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ErrorResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                    if (!$util.isString(message.errorMessage))\n                        return \"errorMessage: string expected\";\n                if (message.errorCode != null && message.hasOwnProperty(\"errorCode\"))\n                    if (!$util.isInteger(message.errorCode))\n                        return \"errorCode: integer expected\";\n                return null;\n            };\n    \n            /**\n             * Creates an ErrorResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Music2TrackProtocol.ErrorResponse} ErrorResponse\n             */\n            ErrorResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.Music2TrackProtocol.ErrorResponse)\n                    return object;\n                var message = new $root.Music2TrackProtocol.ErrorResponse();\n                if (object.errorMessage != null)\n                    message.errorMessage = String(object.errorMessage);\n                if (object.errorCode != null)\n                    message.errorCode = object.errorCode | 0;\n                return message;\n            };\n    \n            /**\n             * Creates a plain object from an ErrorResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @static\n             * @param {Music2TrackProtocol.ErrorResponse} message ErrorResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ErrorResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.errorMessage = \"\";\n                    object.errorCode = 0;\n                }\n                if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                    object.errorMessage = message.errorMessage;\n                if (message.errorCode != null && message.hasOwnProperty(\"errorCode\"))\n                    object.errorCode = message.errorCode;\n                return object;\n            };\n    \n            /**\n             * Converts this ErrorResponse to JSON.\n             * @function toJSON\n             * @memberof Music2TrackProtocol.ErrorResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ErrorResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return ErrorResponse;\n        })();\n    \n        Music2TrackProtocol.MttResponse = (function() {\n    \n            /**\n             * Properties of a MttResponse.\n             * @memberof Music2TrackProtocol\n             * @interface IMttResponse\n             * @property {Music2TrackProtocol.IDecoderResult|null} [decoderResultField] MttResponse decoderResultField\n             * @property {Music2TrackProtocol.IErrorResponse|null} [errorResponse] MttResponse errorResponse\n             */\n    \n            /**\n             * Constructs a new MttResponse.\n             * @memberof Music2TrackProtocol\n             * @classdesc Represents a MttResponse.\n             * @implements IMttResponse\n             * @constructor\n             * @param {Music2TrackProtocol.IMttResponse=} [properties] Properties to set\n             */\n            function MttResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n    \n            /**\n             * MttResponse decoderResultField.\n             * @member {Music2TrackProtocol.IDecoderResult|null|undefined} decoderResultField\n             * @memberof Music2TrackProtocol.MttResponse\n             * @instance\n             */\n            MttResponse.prototype.decoderResultField = null;\n    \n            /**\n             * MttResponse errorResponse.\n             * @member {Music2TrackProtocol.IErrorResponse|null|undefined} errorResponse\n             * @memberof Music2TrackProtocol.MttResponse\n             * @instance\n             */\n            MttResponse.prototype.errorResponse = null;\n    \n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n    \n            /**\n             * MttResponse MessageType.\n             * @member {\"decoderResultField\"|\"errorResponse\"|undefined} MessageType\n             * @memberof Music2TrackProtocol.MttResponse\n             * @instance\n             */\n            Object.defineProperty(MttResponse.prototype, \"MessageType\", {\n                get: $util.oneOfGetter($oneOfFields = [\"decoderResultField\", \"errorResponse\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * Creates a new MttResponse instance using the specified properties.\n             * @function create\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Music2TrackProtocol.IMttResponse=} [properties] Properties to set\n             * @returns {Music2TrackProtocol.MttResponse} MttResponse instance\n             */\n            MttResponse.create = function create(properties) {\n                return new MttResponse(properties);\n            };\n    \n            /**\n             * Encodes the specified MttResponse message. Does not implicitly {@link Music2TrackProtocol.MttResponse.verify|verify} messages.\n             * @function encode\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Music2TrackProtocol.IMttResponse} message MttResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MttResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.decoderResultField != null && Object.hasOwnProperty.call(message, \"decoderResultField\"))\n                    $root.Music2TrackProtocol.DecoderResult.encode(message.decoderResultField, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.errorResponse != null && Object.hasOwnProperty.call(message, \"errorResponse\"))\n                    $root.Music2TrackProtocol.ErrorResponse.encode(message.errorResponse, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n    \n            /**\n             * Encodes the specified MttResponse message, length delimited. Does not implicitly {@link Music2TrackProtocol.MttResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Music2TrackProtocol.IMttResponse} message MttResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MttResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n    \n            /**\n             * Decodes a MttResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Music2TrackProtocol.MttResponse} MttResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MttResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Music2TrackProtocol.MttResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.decoderResultField = $root.Music2TrackProtocol.DecoderResult.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.errorResponse = $root.Music2TrackProtocol.ErrorResponse.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Decodes a MttResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Music2TrackProtocol.MttResponse} MttResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MttResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n    \n            /**\n             * Verifies a MttResponse message.\n             * @function verify\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            MttResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n                    properties.MessageType = 1;\n                    {\n                        var error = $root.Music2TrackProtocol.DecoderResult.verify(message.decoderResultField);\n                        if (error)\n                            return \"decoderResultField.\" + error;\n                    }\n                }\n                if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n                    if (properties.MessageType === 1)\n                        return \"MessageType: multiple values\";\n                    properties.MessageType = 1;\n                    {\n                        var error = $root.Music2TrackProtocol.ErrorResponse.verify(message.errorResponse);\n                        if (error)\n                            return \"errorResponse.\" + error;\n                    }\n                }\n                return null;\n            };\n    \n            /**\n             * Creates a MttResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Music2TrackProtocol.MttResponse} MttResponse\n             */\n            MttResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.Music2TrackProtocol.MttResponse)\n                    return object;\n                var message = new $root.Music2TrackProtocol.MttResponse();\n                if (object.decoderResultField != null) {\n                    if (typeof object.decoderResultField !== \"object\")\n                        throw TypeError(\".Music2TrackProtocol.MttResponse.decoderResultField: object expected\");\n                    message.decoderResultField = $root.Music2TrackProtocol.DecoderResult.fromObject(object.decoderResultField);\n                }\n                if (object.errorResponse != null) {\n                    if (typeof object.errorResponse !== \"object\")\n                        throw TypeError(\".Music2TrackProtocol.MttResponse.errorResponse: object expected\");\n                    message.errorResponse = $root.Music2TrackProtocol.ErrorResponse.fromObject(object.errorResponse);\n                }\n                return message;\n            };\n    \n            /**\n             * Creates a plain object from a MttResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Music2TrackProtocol.MttResponse\n             * @static\n             * @param {Music2TrackProtocol.MttResponse} message MttResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            MttResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n                    object.decoderResultField = $root.Music2TrackProtocol.DecoderResult.toObject(message.decoderResultField, options);\n                    if (options.oneofs)\n                        object.MessageType = \"decoderResultField\";\n                }\n                if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n                    object.errorResponse = $root.Music2TrackProtocol.ErrorResponse.toObject(message.errorResponse, options);\n                    if (options.oneofs)\n                        object.MessageType = \"errorResponse\";\n                }\n                return object;\n            };\n    \n            /**\n             * Converts this MttResponse to JSON.\n             * @function toJSON\n             * @memberof Music2TrackProtocol.MttResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            MttResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return MttResponse;\n        })();\n    \n        return Music2TrackProtocol;\n    })();\n\n    return $root;\n});\n});\n\nvar createMusicRecognizer = function (voiceListener) {\n    var off;\n    var status = 'inactive';\n    var currentMessageId;\n    var stop = function () {\n        if (voiceListener.status !== 'stopped') {\n            status = 'inactive';\n            voiceListener.stop();\n        }\n    };\n    var start = function (_a) {\n        var sendVoice = _a.sendVoice, messageId = _a.messageId, onMessage = _a.onMessage;\n        return voiceListener\n            .listen(function (data, last) { return !last && sendVoice(data, last, MessageNames.MUSIC_RECOGNITION); })\n            .then(function () {\n            status = 'active';\n            currentMessageId = messageId;\n            off = onMessage(function (message) {\n                var _a, _b;\n                if (message.status && message.status.code != null && message.status.code < 0) {\n                    off();\n                    stop();\n                }\n                if (message.messageId === messageId &&\n                    message.messageName.toUpperCase() === MessageNames.MUSIC_RECOGNITION) {\n                    if (!((_b = (_a = message.bytes) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.length)) {\n                        return;\n                    }\n                    var _c = mtt.Music2TrackProtocol.MttResponse.decode(message.bytes.data), decoderResultField = _c.decoderResultField, errorResponse = _c.errorResponse;\n                    if ((decoderResultField === null || decoderResultField === void 0 ? void 0 : decoderResultField.isFinal) || errorResponse) {\n                        off();\n                        stop();\n                    }\n                }\n            });\n        });\n    };\n    return {\n        start: start,\n        stop: stop,\n        get status() {\n            return status;\n        },\n        get messageId() {\n            return currentMessageId;\n        },\n    };\n};\n\nvar asr = createCommonjsModule(function (module) {\n/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n(function(global, factory) { /* global define, require, module */\n\n    /* AMD */ if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports)\n        module.exports = factory(minimal);\n\n})(commonjsGlobal, function($protobuf) {\n\n    // Common aliases\n    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n    \n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    \n    $root.Variables = (function() {\n    \n        /**\n         * Properties of a Variables.\n         * @exports IVariables\n         * @interface IVariables\n         * @property {Object.<string,string>|null} [variables] Variables variables\n         */\n    \n        /**\n         * Constructs a new Variables.\n         * @exports Variables\n         * @classdesc Represents a Variables.\n         * @implements IVariables\n         * @constructor\n         * @param {IVariables=} [properties] Properties to set\n         */\n        function Variables(properties) {\n            this.variables = {};\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Variables variables.\n         * @member {Object.<string,string>} variables\n         * @memberof Variables\n         * @instance\n         */\n        Variables.prototype.variables = $util.emptyObject;\n    \n        /**\n         * Creates a new Variables instance using the specified properties.\n         * @function create\n         * @memberof Variables\n         * @static\n         * @param {IVariables=} [properties] Properties to set\n         * @returns {Variables} Variables instance\n         */\n        Variables.create = function create(properties) {\n            return new Variables(properties);\n        };\n    \n        /**\n         * Encodes the specified Variables message. Does not implicitly {@link Variables.verify|verify} messages.\n         * @function encode\n         * @memberof Variables\n         * @static\n         * @param {IVariables} message Variables message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Variables.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.variables != null && Object.hasOwnProperty.call(message, \"variables\"))\n                for (var keys = Object.keys(message.variables), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.variables[keys[i]]).ldelim();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Variables message, length delimited. Does not implicitly {@link Variables.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Variables\n         * @static\n         * @param {IVariables} message Variables message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Variables.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Variables message from the specified reader or buffer.\n         * @function decode\n         * @memberof Variables\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Variables} Variables\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Variables.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Variables(), key, value;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (message.variables === $util.emptyObject)\n                        message.variables = {};\n                    var end2 = reader.uint32() + reader.pos;\n                    key = \"\";\n                    value = \"\";\n                    while (reader.pos < end2) {\n                        var tag2 = reader.uint32();\n                        switch (tag2 >>> 3) {\n                        case 1:\n                            key = reader.string();\n                            break;\n                        case 2:\n                            value = reader.string();\n                            break;\n                        default:\n                            reader.skipType(tag2 & 7);\n                            break;\n                        }\n                    }\n                    message.variables[key] = value;\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Variables message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Variables\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Variables} Variables\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Variables.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Variables message.\n         * @function verify\n         * @memberof Variables\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Variables.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.variables != null && message.hasOwnProperty(\"variables\")) {\n                if (!$util.isObject(message.variables))\n                    return \"variables: object expected\";\n                var key = Object.keys(message.variables);\n                for (var i = 0; i < key.length; ++i)\n                    if (!$util.isString(message.variables[key[i]]))\n                        return \"variables: string{k:string} expected\";\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a Variables message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Variables\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Variables} Variables\n         */\n        Variables.fromObject = function fromObject(object) {\n            if (object instanceof $root.Variables)\n                return object;\n            var message = new $root.Variables();\n            if (object.variables) {\n                if (typeof object.variables !== \"object\")\n                    throw TypeError(\".Variables.variables: object expected\");\n                message.variables = {};\n                for (var keys = Object.keys(object.variables), i = 0; i < keys.length; ++i)\n                    message.variables[keys[i]] = String(object.variables[keys[i]]);\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Variables message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Variables\n         * @static\n         * @param {Variables} message Variables\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Variables.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.objects || options.defaults)\n                object.variables = {};\n            var keys2;\n            if (message.variables && (keys2 = Object.keys(message.variables)).length) {\n                object.variables = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.variables[keys2[j]] = message.variables[keys2[j]];\n            }\n            return object;\n        };\n    \n        /**\n         * Converts this Variables to JSON.\n         * @function toJSON\n         * @memberof Variables\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Variables.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Variables;\n    })();\n    \n    $root.UndecodedSeconds = (function() {\n    \n        /**\n         * Properties of an UndecodedSeconds.\n         * @exports IUndecodedSeconds\n         * @interface IUndecodedSeconds\n         * @property {number|null} [undecodedSeconds] UndecodedSeconds undecodedSeconds\n         */\n    \n        /**\n         * Constructs a new UndecodedSeconds.\n         * @exports UndecodedSeconds\n         * @classdesc Represents an UndecodedSeconds.\n         * @implements IUndecodedSeconds\n         * @constructor\n         * @param {IUndecodedSeconds=} [properties] Properties to set\n         */\n        function UndecodedSeconds(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * UndecodedSeconds undecodedSeconds.\n         * @member {number} undecodedSeconds\n         * @memberof UndecodedSeconds\n         * @instance\n         */\n        UndecodedSeconds.prototype.undecodedSeconds = 0;\n    \n        /**\n         * Creates a new UndecodedSeconds instance using the specified properties.\n         * @function create\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {IUndecodedSeconds=} [properties] Properties to set\n         * @returns {UndecodedSeconds} UndecodedSeconds instance\n         */\n        UndecodedSeconds.create = function create(properties) {\n            return new UndecodedSeconds(properties);\n        };\n    \n        /**\n         * Encodes the specified UndecodedSeconds message. Does not implicitly {@link UndecodedSeconds.verify|verify} messages.\n         * @function encode\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {IUndecodedSeconds} message UndecodedSeconds message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UndecodedSeconds.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.undecodedSeconds != null && Object.hasOwnProperty.call(message, \"undecodedSeconds\"))\n                writer.uint32(/* id 1, wireType 5 =*/13).float(message.undecodedSeconds);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified UndecodedSeconds message, length delimited. Does not implicitly {@link UndecodedSeconds.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {IUndecodedSeconds} message UndecodedSeconds message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UndecodedSeconds.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes an UndecodedSeconds message from the specified reader or buffer.\n         * @function decode\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {UndecodedSeconds} UndecodedSeconds\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UndecodedSeconds.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UndecodedSeconds();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.undecodedSeconds = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes an UndecodedSeconds message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {UndecodedSeconds} UndecodedSeconds\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UndecodedSeconds.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies an UndecodedSeconds message.\n         * @function verify\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        UndecodedSeconds.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.undecodedSeconds != null && message.hasOwnProperty(\"undecodedSeconds\"))\n                if (typeof message.undecodedSeconds !== \"number\")\n                    return \"undecodedSeconds: number expected\";\n            return null;\n        };\n    \n        /**\n         * Creates an UndecodedSeconds message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {UndecodedSeconds} UndecodedSeconds\n         */\n        UndecodedSeconds.fromObject = function fromObject(object) {\n            if (object instanceof $root.UndecodedSeconds)\n                return object;\n            var message = new $root.UndecodedSeconds();\n            if (object.undecodedSeconds != null)\n                message.undecodedSeconds = Number(object.undecodedSeconds);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from an UndecodedSeconds message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof UndecodedSeconds\n         * @static\n         * @param {UndecodedSeconds} message UndecodedSeconds\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        UndecodedSeconds.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.undecodedSeconds = 0;\n            if (message.undecodedSeconds != null && message.hasOwnProperty(\"undecodedSeconds\"))\n                object.undecodedSeconds = options.json && !isFinite(message.undecodedSeconds) ? String(message.undecodedSeconds) : message.undecodedSeconds;\n            return object;\n        };\n    \n        /**\n         * Converts this UndecodedSeconds to JSON.\n         * @function toJSON\n         * @memberof UndecodedSeconds\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        UndecodedSeconds.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return UndecodedSeconds;\n    })();\n    \n    $root.FullyFinalized = (function() {\n    \n        /**\n         * Properties of a FullyFinalized.\n         * @exports IFullyFinalized\n         * @interface IFullyFinalized\n         */\n    \n        /**\n         * Constructs a new FullyFinalized.\n         * @exports FullyFinalized\n         * @classdesc Represents a FullyFinalized.\n         * @implements IFullyFinalized\n         * @constructor\n         * @param {IFullyFinalized=} [properties] Properties to set\n         */\n        function FullyFinalized(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Creates a new FullyFinalized instance using the specified properties.\n         * @function create\n         * @memberof FullyFinalized\n         * @static\n         * @param {IFullyFinalized=} [properties] Properties to set\n         * @returns {FullyFinalized} FullyFinalized instance\n         */\n        FullyFinalized.create = function create(properties) {\n            return new FullyFinalized(properties);\n        };\n    \n        /**\n         * Encodes the specified FullyFinalized message. Does not implicitly {@link FullyFinalized.verify|verify} messages.\n         * @function encode\n         * @memberof FullyFinalized\n         * @static\n         * @param {IFullyFinalized} message FullyFinalized message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FullyFinalized.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified FullyFinalized message, length delimited. Does not implicitly {@link FullyFinalized.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof FullyFinalized\n         * @static\n         * @param {IFullyFinalized} message FullyFinalized message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FullyFinalized.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a FullyFinalized message from the specified reader or buffer.\n         * @function decode\n         * @memberof FullyFinalized\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {FullyFinalized} FullyFinalized\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FullyFinalized.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FullyFinalized();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a FullyFinalized message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof FullyFinalized\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {FullyFinalized} FullyFinalized\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FullyFinalized.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a FullyFinalized message.\n         * @function verify\n         * @memberof FullyFinalized\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FullyFinalized.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a FullyFinalized message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof FullyFinalized\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {FullyFinalized} FullyFinalized\n         */\n        FullyFinalized.fromObject = function fromObject(object) {\n            if (object instanceof $root.FullyFinalized)\n                return object;\n            return new $root.FullyFinalized();\n        };\n    \n        /**\n         * Creates a plain object from a FullyFinalized message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof FullyFinalized\n         * @static\n         * @param {FullyFinalized} message FullyFinalized\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FullyFinalized.toObject = function toObject() {\n            return {};\n        };\n    \n        /**\n         * Converts this FullyFinalized to JSON.\n         * @function toJSON\n         * @memberof FullyFinalized\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FullyFinalized.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return FullyFinalized;\n    })();\n    \n    $root.EmotionResult = (function() {\n    \n        /**\n         * Properties of an EmotionResult.\n         * @exports IEmotionResult\n         * @interface IEmotionResult\n         * @property {string|null} [name] EmotionResult name\n         * @property {number|null} [confidence] EmotionResult confidence\n         */\n    \n        /**\n         * Constructs a new EmotionResult.\n         * @exports EmotionResult\n         * @classdesc Represents an EmotionResult.\n         * @implements IEmotionResult\n         * @constructor\n         * @param {IEmotionResult=} [properties] Properties to set\n         */\n        function EmotionResult(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * EmotionResult name.\n         * @member {string} name\n         * @memberof EmotionResult\n         * @instance\n         */\n        EmotionResult.prototype.name = \"\";\n    \n        /**\n         * EmotionResult confidence.\n         * @member {number} confidence\n         * @memberof EmotionResult\n         * @instance\n         */\n        EmotionResult.prototype.confidence = 0;\n    \n        /**\n         * Creates a new EmotionResult instance using the specified properties.\n         * @function create\n         * @memberof EmotionResult\n         * @static\n         * @param {IEmotionResult=} [properties] Properties to set\n         * @returns {EmotionResult} EmotionResult instance\n         */\n        EmotionResult.create = function create(properties) {\n            return new EmotionResult(properties);\n        };\n    \n        /**\n         * Encodes the specified EmotionResult message. Does not implicitly {@link EmotionResult.verify|verify} messages.\n         * @function encode\n         * @memberof EmotionResult\n         * @static\n         * @param {IEmotionResult} message EmotionResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EmotionResult.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.confidence != null && Object.hasOwnProperty.call(message, \"confidence\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified EmotionResult message, length delimited. Does not implicitly {@link EmotionResult.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof EmotionResult\n         * @static\n         * @param {IEmotionResult} message EmotionResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EmotionResult.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes an EmotionResult message from the specified reader or buffer.\n         * @function decode\n         * @memberof EmotionResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {EmotionResult} EmotionResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EmotionResult.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EmotionResult();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.confidence = reader.float();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes an EmotionResult message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof EmotionResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {EmotionResult} EmotionResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EmotionResult.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies an EmotionResult message.\n         * @function verify\n         * @memberof EmotionResult\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        EmotionResult.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.confidence != null && message.hasOwnProperty(\"confidence\"))\n                if (typeof message.confidence !== \"number\")\n                    return \"confidence: number expected\";\n            return null;\n        };\n    \n        /**\n         * Creates an EmotionResult message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof EmotionResult\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {EmotionResult} EmotionResult\n         */\n        EmotionResult.fromObject = function fromObject(object) {\n            if (object instanceof $root.EmotionResult)\n                return object;\n            var message = new $root.EmotionResult();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.confidence != null)\n                message.confidence = Number(object.confidence);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from an EmotionResult message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof EmotionResult\n         * @static\n         * @param {EmotionResult} message EmotionResult\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        EmotionResult.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.confidence = 0;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.confidence != null && message.hasOwnProperty(\"confidence\"))\n                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;\n            return object;\n        };\n    \n        /**\n         * Converts this EmotionResult to JSON.\n         * @function toJSON\n         * @memberof EmotionResult\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        EmotionResult.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return EmotionResult;\n    })();\n    \n    $root.Hypothesis = (function() {\n    \n        /**\n         * Properties of a Hypothesis.\n         * @exports IHypothesis\n         * @interface IHypothesis\n         * @property {string|null} [words] Hypothesis words\n         * @property {number|null} [acousticCost] Hypothesis acousticCost\n         * @property {number|null} [linguisticCost] Hypothesis linguisticCost\n         * @property {number|null} [finalCost] Hypothesis finalCost\n         * @property {number|null} [phraseStart] Hypothesis phraseStart\n         * @property {number|null} [phraseEnd] Hypothesis phraseEnd\n         * @property {string|null} [normalizedText] Hypothesis normalizedText\n         */\n    \n        /**\n         * Constructs a new Hypothesis.\n         * @exports Hypothesis\n         * @classdesc Represents a Hypothesis.\n         * @implements IHypothesis\n         * @constructor\n         * @param {IHypothesis=} [properties] Properties to set\n         */\n        function Hypothesis(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Hypothesis words.\n         * @member {string} words\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.words = \"\";\n    \n        /**\n         * Hypothesis acousticCost.\n         * @member {number} acousticCost\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.acousticCost = 0;\n    \n        /**\n         * Hypothesis linguisticCost.\n         * @member {number} linguisticCost\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.linguisticCost = 0;\n    \n        /**\n         * Hypothesis finalCost.\n         * @member {number} finalCost\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.finalCost = 0;\n    \n        /**\n         * Hypothesis phraseStart.\n         * @member {number} phraseStart\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.phraseStart = 0;\n    \n        /**\n         * Hypothesis phraseEnd.\n         * @member {number} phraseEnd\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.phraseEnd = 0;\n    \n        /**\n         * Hypothesis normalizedText.\n         * @member {string} normalizedText\n         * @memberof Hypothesis\n         * @instance\n         */\n        Hypothesis.prototype.normalizedText = \"\";\n    \n        /**\n         * Creates a new Hypothesis instance using the specified properties.\n         * @function create\n         * @memberof Hypothesis\n         * @static\n         * @param {IHypothesis=} [properties] Properties to set\n         * @returns {Hypothesis} Hypothesis instance\n         */\n        Hypothesis.create = function create(properties) {\n            return new Hypothesis(properties);\n        };\n    \n        /**\n         * Encodes the specified Hypothesis message. Does not implicitly {@link Hypothesis.verify|verify} messages.\n         * @function encode\n         * @memberof Hypothesis\n         * @static\n         * @param {IHypothesis} message Hypothesis message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Hypothesis.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.words != null && Object.hasOwnProperty.call(message, \"words\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.words);\n            if (message.acousticCost != null && Object.hasOwnProperty.call(message, \"acousticCost\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.acousticCost);\n            if (message.linguisticCost != null && Object.hasOwnProperty.call(message, \"linguisticCost\"))\n                writer.uint32(/* id 3, wireType 5 =*/29).float(message.linguisticCost);\n            if (message.finalCost != null && Object.hasOwnProperty.call(message, \"finalCost\"))\n                writer.uint32(/* id 4, wireType 5 =*/37).float(message.finalCost);\n            if (message.phraseStart != null && Object.hasOwnProperty.call(message, \"phraseStart\"))\n                writer.uint32(/* id 5, wireType 5 =*/45).float(message.phraseStart);\n            if (message.phraseEnd != null && Object.hasOwnProperty.call(message, \"phraseEnd\"))\n                writer.uint32(/* id 6, wireType 5 =*/53).float(message.phraseEnd);\n            if (message.normalizedText != null && Object.hasOwnProperty.call(message, \"normalizedText\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.normalizedText);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Hypothesis message, length delimited. Does not implicitly {@link Hypothesis.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Hypothesis\n         * @static\n         * @param {IHypothesis} message Hypothesis message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Hypothesis.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Hypothesis message from the specified reader or buffer.\n         * @function decode\n         * @memberof Hypothesis\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Hypothesis} Hypothesis\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Hypothesis.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Hypothesis();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.words = reader.string();\n                    break;\n                case 2:\n                    message.acousticCost = reader.float();\n                    break;\n                case 3:\n                    message.linguisticCost = reader.float();\n                    break;\n                case 4:\n                    message.finalCost = reader.float();\n                    break;\n                case 5:\n                    message.phraseStart = reader.float();\n                    break;\n                case 6:\n                    message.phraseEnd = reader.float();\n                    break;\n                case 7:\n                    message.normalizedText = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Hypothesis message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Hypothesis\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Hypothesis} Hypothesis\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Hypothesis.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Hypothesis message.\n         * @function verify\n         * @memberof Hypothesis\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Hypothesis.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.words != null && message.hasOwnProperty(\"words\"))\n                if (!$util.isString(message.words))\n                    return \"words: string expected\";\n            if (message.acousticCost != null && message.hasOwnProperty(\"acousticCost\"))\n                if (typeof message.acousticCost !== \"number\")\n                    return \"acousticCost: number expected\";\n            if (message.linguisticCost != null && message.hasOwnProperty(\"linguisticCost\"))\n                if (typeof message.linguisticCost !== \"number\")\n                    return \"linguisticCost: number expected\";\n            if (message.finalCost != null && message.hasOwnProperty(\"finalCost\"))\n                if (typeof message.finalCost !== \"number\")\n                    return \"finalCost: number expected\";\n            if (message.phraseStart != null && message.hasOwnProperty(\"phraseStart\"))\n                if (typeof message.phraseStart !== \"number\")\n                    return \"phraseStart: number expected\";\n            if (message.phraseEnd != null && message.hasOwnProperty(\"phraseEnd\"))\n                if (typeof message.phraseEnd !== \"number\")\n                    return \"phraseEnd: number expected\";\n            if (message.normalizedText != null && message.hasOwnProperty(\"normalizedText\"))\n                if (!$util.isString(message.normalizedText))\n                    return \"normalizedText: string expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Hypothesis message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Hypothesis\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Hypothesis} Hypothesis\n         */\n        Hypothesis.fromObject = function fromObject(object) {\n            if (object instanceof $root.Hypothesis)\n                return object;\n            var message = new $root.Hypothesis();\n            if (object.words != null)\n                message.words = String(object.words);\n            if (object.acousticCost != null)\n                message.acousticCost = Number(object.acousticCost);\n            if (object.linguisticCost != null)\n                message.linguisticCost = Number(object.linguisticCost);\n            if (object.finalCost != null)\n                message.finalCost = Number(object.finalCost);\n            if (object.phraseStart != null)\n                message.phraseStart = Number(object.phraseStart);\n            if (object.phraseEnd != null)\n                message.phraseEnd = Number(object.phraseEnd);\n            if (object.normalizedText != null)\n                message.normalizedText = String(object.normalizedText);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Hypothesis message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Hypothesis\n         * @static\n         * @param {Hypothesis} message Hypothesis\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Hypothesis.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.words = \"\";\n                object.acousticCost = 0;\n                object.linguisticCost = 0;\n                object.finalCost = 0;\n                object.phraseStart = 0;\n                object.phraseEnd = 0;\n                object.normalizedText = \"\";\n            }\n            if (message.words != null && message.hasOwnProperty(\"words\"))\n                object.words = message.words;\n            if (message.acousticCost != null && message.hasOwnProperty(\"acousticCost\"))\n                object.acousticCost = options.json && !isFinite(message.acousticCost) ? String(message.acousticCost) : message.acousticCost;\n            if (message.linguisticCost != null && message.hasOwnProperty(\"linguisticCost\"))\n                object.linguisticCost = options.json && !isFinite(message.linguisticCost) ? String(message.linguisticCost) : message.linguisticCost;\n            if (message.finalCost != null && message.hasOwnProperty(\"finalCost\"))\n                object.finalCost = options.json && !isFinite(message.finalCost) ? String(message.finalCost) : message.finalCost;\n            if (message.phraseStart != null && message.hasOwnProperty(\"phraseStart\"))\n                object.phraseStart = options.json && !isFinite(message.phraseStart) ? String(message.phraseStart) : message.phraseStart;\n            if (message.phraseEnd != null && message.hasOwnProperty(\"phraseEnd\"))\n                object.phraseEnd = options.json && !isFinite(message.phraseEnd) ? String(message.phraseEnd) : message.phraseEnd;\n            if (message.normalizedText != null && message.hasOwnProperty(\"normalizedText\"))\n                object.normalizedText = message.normalizedText;\n            return object;\n        };\n    \n        /**\n         * Converts this Hypothesis to JSON.\n         * @function toJSON\n         * @memberof Hypothesis\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Hypothesis.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Hypothesis;\n    })();\n    \n    $root.DecoderResult = (function() {\n    \n        /**\n         * Properties of a DecoderResult.\n         * @exports IDecoderResult\n         * @interface IDecoderResult\n         * @property {Array.<IHypothesis>|null} [hypothesis] DecoderResult hypothesis\n         * @property {number|null} [chunkStart] DecoderResult chunkStart\n         * @property {number|null} [chunkEnd] DecoderResult chunkEnd\n         * @property {number|null} [timeEndpointDetectionMs] DecoderResult timeEndpointDetectionMs\n         * @property {number|null} [timeDecodingMs] DecoderResult timeDecodingMs\n         * @property {IVariables|null} [variables] DecoderResult variables\n         * @property {boolean|null} [isFinal] DecoderResult isFinal\n         * @property {Array.<IEmotionResult>|null} [emotionResult] DecoderResult emotionResult\n         * @property {Array.<DecoderResult.IContextAnswer>|null} [contextAnswer] DecoderResult contextAnswer\n         */\n    \n        /**\n         * Constructs a new DecoderResult.\n         * @exports DecoderResult\n         * @classdesc Represents a DecoderResult.\n         * @implements IDecoderResult\n         * @constructor\n         * @param {IDecoderResult=} [properties] Properties to set\n         */\n        function DecoderResult(properties) {\n            this.hypothesis = [];\n            this.emotionResult = [];\n            this.contextAnswer = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * DecoderResult hypothesis.\n         * @member {Array.<IHypothesis>} hypothesis\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.hypothesis = $util.emptyArray;\n    \n        /**\n         * DecoderResult chunkStart.\n         * @member {number} chunkStart\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.chunkStart = 0;\n    \n        /**\n         * DecoderResult chunkEnd.\n         * @member {number} chunkEnd\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.chunkEnd = 0;\n    \n        /**\n         * DecoderResult timeEndpointDetectionMs.\n         * @member {number} timeEndpointDetectionMs\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.timeEndpointDetectionMs = 0;\n    \n        /**\n         * DecoderResult timeDecodingMs.\n         * @member {number} timeDecodingMs\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.timeDecodingMs = 0;\n    \n        /**\n         * DecoderResult variables.\n         * @member {IVariables|null|undefined} variables\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.variables = null;\n    \n        /**\n         * DecoderResult isFinal.\n         * @member {boolean} isFinal\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.isFinal = false;\n    \n        /**\n         * DecoderResult emotionResult.\n         * @member {Array.<IEmotionResult>} emotionResult\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.emotionResult = $util.emptyArray;\n    \n        /**\n         * DecoderResult contextAnswer.\n         * @member {Array.<DecoderResult.IContextAnswer>} contextAnswer\n         * @memberof DecoderResult\n         * @instance\n         */\n        DecoderResult.prototype.contextAnswer = $util.emptyArray;\n    \n        /**\n         * Creates a new DecoderResult instance using the specified properties.\n         * @function create\n         * @memberof DecoderResult\n         * @static\n         * @param {IDecoderResult=} [properties] Properties to set\n         * @returns {DecoderResult} DecoderResult instance\n         */\n        DecoderResult.create = function create(properties) {\n            return new DecoderResult(properties);\n        };\n    \n        /**\n         * Encodes the specified DecoderResult message. Does not implicitly {@link DecoderResult.verify|verify} messages.\n         * @function encode\n         * @memberof DecoderResult\n         * @static\n         * @param {IDecoderResult} message DecoderResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DecoderResult.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.hypothesis != null && message.hypothesis.length)\n                for (var i = 0; i < message.hypothesis.length; ++i)\n                    $root.Hypothesis.encode(message.hypothesis[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.chunkStart != null && Object.hasOwnProperty.call(message, \"chunkStart\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.chunkStart);\n            if (message.chunkEnd != null && Object.hasOwnProperty.call(message, \"chunkEnd\"))\n                writer.uint32(/* id 3, wireType 5 =*/29).float(message.chunkEnd);\n            if (message.timeEndpointDetectionMs != null && Object.hasOwnProperty.call(message, \"timeEndpointDetectionMs\"))\n                writer.uint32(/* id 4, wireType 5 =*/37).float(message.timeEndpointDetectionMs);\n            if (message.timeDecodingMs != null && Object.hasOwnProperty.call(message, \"timeDecodingMs\"))\n                writer.uint32(/* id 5, wireType 5 =*/45).float(message.timeDecodingMs);\n            if (message.variables != null && Object.hasOwnProperty.call(message, \"variables\"))\n                $root.Variables.encode(message.variables, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.isFinal != null && Object.hasOwnProperty.call(message, \"isFinal\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.isFinal);\n            if (message.emotionResult != null && message.emotionResult.length)\n                for (var i = 0; i < message.emotionResult.length; ++i)\n                    $root.EmotionResult.encode(message.emotionResult[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.contextAnswer != null && message.contextAnswer.length)\n                for (var i = 0; i < message.contextAnswer.length; ++i)\n                    $root.DecoderResult.ContextAnswer.encode(message.contextAnswer[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified DecoderResult message, length delimited. Does not implicitly {@link DecoderResult.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof DecoderResult\n         * @static\n         * @param {IDecoderResult} message DecoderResult message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DecoderResult.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a DecoderResult message from the specified reader or buffer.\n         * @function decode\n         * @memberof DecoderResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {DecoderResult} DecoderResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DecoderResult.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DecoderResult();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.hypothesis && message.hypothesis.length))\n                        message.hypothesis = [];\n                    message.hypothesis.push($root.Hypothesis.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.chunkStart = reader.float();\n                    break;\n                case 3:\n                    message.chunkEnd = reader.float();\n                    break;\n                case 4:\n                    message.timeEndpointDetectionMs = reader.float();\n                    break;\n                case 5:\n                    message.timeDecodingMs = reader.float();\n                    break;\n                case 6:\n                    message.variables = $root.Variables.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.isFinal = reader.bool();\n                    break;\n                case 8:\n                    if (!(message.emotionResult && message.emotionResult.length))\n                        message.emotionResult = [];\n                    message.emotionResult.push($root.EmotionResult.decode(reader, reader.uint32()));\n                    break;\n                case 9:\n                    if (!(message.contextAnswer && message.contextAnswer.length))\n                        message.contextAnswer = [];\n                    message.contextAnswer.push($root.DecoderResult.ContextAnswer.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a DecoderResult message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof DecoderResult\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {DecoderResult} DecoderResult\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DecoderResult.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a DecoderResult message.\n         * @function verify\n         * @memberof DecoderResult\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DecoderResult.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.hypothesis != null && message.hasOwnProperty(\"hypothesis\")) {\n                if (!Array.isArray(message.hypothesis))\n                    return \"hypothesis: array expected\";\n                for (var i = 0; i < message.hypothesis.length; ++i) {\n                    var error = $root.Hypothesis.verify(message.hypothesis[i]);\n                    if (error)\n                        return \"hypothesis.\" + error;\n                }\n            }\n            if (message.chunkStart != null && message.hasOwnProperty(\"chunkStart\"))\n                if (typeof message.chunkStart !== \"number\")\n                    return \"chunkStart: number expected\";\n            if (message.chunkEnd != null && message.hasOwnProperty(\"chunkEnd\"))\n                if (typeof message.chunkEnd !== \"number\")\n                    return \"chunkEnd: number expected\";\n            if (message.timeEndpointDetectionMs != null && message.hasOwnProperty(\"timeEndpointDetectionMs\"))\n                if (typeof message.timeEndpointDetectionMs !== \"number\")\n                    return \"timeEndpointDetectionMs: number expected\";\n            if (message.timeDecodingMs != null && message.hasOwnProperty(\"timeDecodingMs\"))\n                if (typeof message.timeDecodingMs !== \"number\")\n                    return \"timeDecodingMs: number expected\";\n            if (message.variables != null && message.hasOwnProperty(\"variables\")) {\n                var error = $root.Variables.verify(message.variables);\n                if (error)\n                    return \"variables.\" + error;\n            }\n            if (message.isFinal != null && message.hasOwnProperty(\"isFinal\"))\n                if (typeof message.isFinal !== \"boolean\")\n                    return \"isFinal: boolean expected\";\n            if (message.emotionResult != null && message.hasOwnProperty(\"emotionResult\")) {\n                if (!Array.isArray(message.emotionResult))\n                    return \"emotionResult: array expected\";\n                for (var i = 0; i < message.emotionResult.length; ++i) {\n                    var error = $root.EmotionResult.verify(message.emotionResult[i]);\n                    if (error)\n                        return \"emotionResult.\" + error;\n                }\n            }\n            if (message.contextAnswer != null && message.hasOwnProperty(\"contextAnswer\")) {\n                if (!Array.isArray(message.contextAnswer))\n                    return \"contextAnswer: array expected\";\n                for (var i = 0; i < message.contextAnswer.length; ++i) {\n                    var error = $root.DecoderResult.ContextAnswer.verify(message.contextAnswer[i]);\n                    if (error)\n                        return \"contextAnswer.\" + error;\n                }\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a DecoderResult message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof DecoderResult\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {DecoderResult} DecoderResult\n         */\n        DecoderResult.fromObject = function fromObject(object) {\n            if (object instanceof $root.DecoderResult)\n                return object;\n            var message = new $root.DecoderResult();\n            if (object.hypothesis) {\n                if (!Array.isArray(object.hypothesis))\n                    throw TypeError(\".DecoderResult.hypothesis: array expected\");\n                message.hypothesis = [];\n                for (var i = 0; i < object.hypothesis.length; ++i) {\n                    if (typeof object.hypothesis[i] !== \"object\")\n                        throw TypeError(\".DecoderResult.hypothesis: object expected\");\n                    message.hypothesis[i] = $root.Hypothesis.fromObject(object.hypothesis[i]);\n                }\n            }\n            if (object.chunkStart != null)\n                message.chunkStart = Number(object.chunkStart);\n            if (object.chunkEnd != null)\n                message.chunkEnd = Number(object.chunkEnd);\n            if (object.timeEndpointDetectionMs != null)\n                message.timeEndpointDetectionMs = Number(object.timeEndpointDetectionMs);\n            if (object.timeDecodingMs != null)\n                message.timeDecodingMs = Number(object.timeDecodingMs);\n            if (object.variables != null) {\n                if (typeof object.variables !== \"object\")\n                    throw TypeError(\".DecoderResult.variables: object expected\");\n                message.variables = $root.Variables.fromObject(object.variables);\n            }\n            if (object.isFinal != null)\n                message.isFinal = Boolean(object.isFinal);\n            if (object.emotionResult) {\n                if (!Array.isArray(object.emotionResult))\n                    throw TypeError(\".DecoderResult.emotionResult: array expected\");\n                message.emotionResult = [];\n                for (var i = 0; i < object.emotionResult.length; ++i) {\n                    if (typeof object.emotionResult[i] !== \"object\")\n                        throw TypeError(\".DecoderResult.emotionResult: object expected\");\n                    message.emotionResult[i] = $root.EmotionResult.fromObject(object.emotionResult[i]);\n                }\n            }\n            if (object.contextAnswer) {\n                if (!Array.isArray(object.contextAnswer))\n                    throw TypeError(\".DecoderResult.contextAnswer: array expected\");\n                message.contextAnswer = [];\n                for (var i = 0; i < object.contextAnswer.length; ++i) {\n                    if (typeof object.contextAnswer[i] !== \"object\")\n                        throw TypeError(\".DecoderResult.contextAnswer: object expected\");\n                    message.contextAnswer[i] = $root.DecoderResult.ContextAnswer.fromObject(object.contextAnswer[i]);\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a DecoderResult message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof DecoderResult\n         * @static\n         * @param {DecoderResult} message DecoderResult\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DecoderResult.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.hypothesis = [];\n                object.emotionResult = [];\n                object.contextAnswer = [];\n            }\n            if (options.defaults) {\n                object.chunkStart = 0;\n                object.chunkEnd = 0;\n                object.timeEndpointDetectionMs = 0;\n                object.timeDecodingMs = 0;\n                object.variables = null;\n                object.isFinal = false;\n            }\n            if (message.hypothesis && message.hypothesis.length) {\n                object.hypothesis = [];\n                for (var j = 0; j < message.hypothesis.length; ++j)\n                    object.hypothesis[j] = $root.Hypothesis.toObject(message.hypothesis[j], options);\n            }\n            if (message.chunkStart != null && message.hasOwnProperty(\"chunkStart\"))\n                object.chunkStart = options.json && !isFinite(message.chunkStart) ? String(message.chunkStart) : message.chunkStart;\n            if (message.chunkEnd != null && message.hasOwnProperty(\"chunkEnd\"))\n                object.chunkEnd = options.json && !isFinite(message.chunkEnd) ? String(message.chunkEnd) : message.chunkEnd;\n            if (message.timeEndpointDetectionMs != null && message.hasOwnProperty(\"timeEndpointDetectionMs\"))\n                object.timeEndpointDetectionMs = options.json && !isFinite(message.timeEndpointDetectionMs) ? String(message.timeEndpointDetectionMs) : message.timeEndpointDetectionMs;\n            if (message.timeDecodingMs != null && message.hasOwnProperty(\"timeDecodingMs\"))\n                object.timeDecodingMs = options.json && !isFinite(message.timeDecodingMs) ? String(message.timeDecodingMs) : message.timeDecodingMs;\n            if (message.variables != null && message.hasOwnProperty(\"variables\"))\n                object.variables = $root.Variables.toObject(message.variables, options);\n            if (message.isFinal != null && message.hasOwnProperty(\"isFinal\"))\n                object.isFinal = message.isFinal;\n            if (message.emotionResult && message.emotionResult.length) {\n                object.emotionResult = [];\n                for (var j = 0; j < message.emotionResult.length; ++j)\n                    object.emotionResult[j] = $root.EmotionResult.toObject(message.emotionResult[j], options);\n            }\n            if (message.contextAnswer && message.contextAnswer.length) {\n                object.contextAnswer = [];\n                for (var j = 0; j < message.contextAnswer.length; ++j)\n                    object.contextAnswer[j] = $root.DecoderResult.ContextAnswer.toObject(message.contextAnswer[j], options);\n            }\n            return object;\n        };\n    \n        /**\n         * Converts this DecoderResult to JSON.\n         * @function toJSON\n         * @memberof DecoderResult\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DecoderResult.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        DecoderResult.ContextAnswer = (function() {\n    \n            /**\n             * Properties of a ContextAnswer.\n             * @memberof DecoderResult\n             * @interface IContextAnswer\n             * @property {Array.<DecoderResult.ContextAnswer.IContextRef>|null} [contextResult] ContextAnswer contextResult\n             */\n    \n            /**\n             * Constructs a new ContextAnswer.\n             * @memberof DecoderResult\n             * @classdesc Represents a ContextAnswer.\n             * @implements IContextAnswer\n             * @constructor\n             * @param {DecoderResult.IContextAnswer=} [properties] Properties to set\n             */\n            function ContextAnswer(properties) {\n                this.contextResult = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n    \n            /**\n             * ContextAnswer contextResult.\n             * @member {Array.<DecoderResult.ContextAnswer.IContextRef>} contextResult\n             * @memberof DecoderResult.ContextAnswer\n             * @instance\n             */\n            ContextAnswer.prototype.contextResult = $util.emptyArray;\n    \n            /**\n             * Creates a new ContextAnswer instance using the specified properties.\n             * @function create\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {DecoderResult.IContextAnswer=} [properties] Properties to set\n             * @returns {DecoderResult.ContextAnswer} ContextAnswer instance\n             */\n            ContextAnswer.create = function create(properties) {\n                return new ContextAnswer(properties);\n            };\n    \n            /**\n             * Encodes the specified ContextAnswer message. Does not implicitly {@link DecoderResult.ContextAnswer.verify|verify} messages.\n             * @function encode\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {DecoderResult.IContextAnswer} message ContextAnswer message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ContextAnswer.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.contextResult != null && message.contextResult.length)\n                    for (var i = 0; i < message.contextResult.length; ++i)\n                        $root.DecoderResult.ContextAnswer.ContextRef.encode(message.contextResult[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n    \n            /**\n             * Encodes the specified ContextAnswer message, length delimited. Does not implicitly {@link DecoderResult.ContextAnswer.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {DecoderResult.IContextAnswer} message ContextAnswer message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ContextAnswer.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n    \n            /**\n             * Decodes a ContextAnswer message from the specified reader or buffer.\n             * @function decode\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {DecoderResult.ContextAnswer} ContextAnswer\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ContextAnswer.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DecoderResult.ContextAnswer();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.contextResult && message.contextResult.length))\n                            message.contextResult = [];\n                        message.contextResult.push($root.DecoderResult.ContextAnswer.ContextRef.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Decodes a ContextAnswer message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {DecoderResult.ContextAnswer} ContextAnswer\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ContextAnswer.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n    \n            /**\n             * Verifies a ContextAnswer message.\n             * @function verify\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ContextAnswer.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.contextResult != null && message.hasOwnProperty(\"contextResult\")) {\n                    if (!Array.isArray(message.contextResult))\n                        return \"contextResult: array expected\";\n                    for (var i = 0; i < message.contextResult.length; ++i) {\n                        var error = $root.DecoderResult.ContextAnswer.ContextRef.verify(message.contextResult[i]);\n                        if (error)\n                            return \"contextResult.\" + error;\n                    }\n                }\n                return null;\n            };\n    \n            /**\n             * Creates a ContextAnswer message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {DecoderResult.ContextAnswer} ContextAnswer\n             */\n            ContextAnswer.fromObject = function fromObject(object) {\n                if (object instanceof $root.DecoderResult.ContextAnswer)\n                    return object;\n                var message = new $root.DecoderResult.ContextAnswer();\n                if (object.contextResult) {\n                    if (!Array.isArray(object.contextResult))\n                        throw TypeError(\".DecoderResult.ContextAnswer.contextResult: array expected\");\n                    message.contextResult = [];\n                    for (var i = 0; i < object.contextResult.length; ++i) {\n                        if (typeof object.contextResult[i] !== \"object\")\n                            throw TypeError(\".DecoderResult.ContextAnswer.contextResult: object expected\");\n                        message.contextResult[i] = $root.DecoderResult.ContextAnswer.ContextRef.fromObject(object.contextResult[i]);\n                    }\n                }\n                return message;\n            };\n    \n            /**\n             * Creates a plain object from a ContextAnswer message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof DecoderResult.ContextAnswer\n             * @static\n             * @param {DecoderResult.ContextAnswer} message ContextAnswer\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ContextAnswer.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.contextResult = [];\n                if (message.contextResult && message.contextResult.length) {\n                    object.contextResult = [];\n                    for (var j = 0; j < message.contextResult.length; ++j)\n                        object.contextResult[j] = $root.DecoderResult.ContextAnswer.ContextRef.toObject(message.contextResult[j], options);\n                }\n                return object;\n            };\n    \n            /**\n             * Converts this ContextAnswer to JSON.\n             * @function toJSON\n             * @memberof DecoderResult.ContextAnswer\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ContextAnswer.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            ContextAnswer.ContextRef = (function() {\n    \n                /**\n                 * Properties of a ContextRef.\n                 * @memberof DecoderResult.ContextAnswer\n                 * @interface IContextRef\n                 * @property {string|null} [id] ContextRef id\n                 * @property {number|null} [index] ContextRef index\n                 * @property {string|null} [originalValue] ContextRef originalValue\n                 * @property {string|null} [predictedValue] ContextRef predictedValue\n                 * @property {number|null} [score] ContextRef score\n                 */\n    \n                /**\n                 * Constructs a new ContextRef.\n                 * @memberof DecoderResult.ContextAnswer\n                 * @classdesc Represents a ContextRef.\n                 * @implements IContextRef\n                 * @constructor\n                 * @param {DecoderResult.ContextAnswer.IContextRef=} [properties] Properties to set\n                 */\n                function ContextRef(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n    \n                /**\n                 * ContextRef id.\n                 * @member {string} id\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 */\n                ContextRef.prototype.id = \"\";\n    \n                /**\n                 * ContextRef index.\n                 * @member {number} index\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 */\n                ContextRef.prototype.index = 0;\n    \n                /**\n                 * ContextRef originalValue.\n                 * @member {string} originalValue\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 */\n                ContextRef.prototype.originalValue = \"\";\n    \n                /**\n                 * ContextRef predictedValue.\n                 * @member {string} predictedValue\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 */\n                ContextRef.prototype.predictedValue = \"\";\n    \n                /**\n                 * ContextRef score.\n                 * @member {number} score\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 */\n                ContextRef.prototype.score = 0;\n    \n                /**\n                 * Creates a new ContextRef instance using the specified properties.\n                 * @function create\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {DecoderResult.ContextAnswer.IContextRef=} [properties] Properties to set\n                 * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef instance\n                 */\n                ContextRef.create = function create(properties) {\n                    return new ContextRef(properties);\n                };\n    \n                /**\n                 * Encodes the specified ContextRef message. Does not implicitly {@link DecoderResult.ContextAnswer.ContextRef.verify|verify} messages.\n                 * @function encode\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {DecoderResult.ContextAnswer.IContextRef} message ContextRef message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ContextRef.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                    if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.index);\n                    if (message.originalValue != null && Object.hasOwnProperty.call(message, \"originalValue\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.originalValue);\n                    if (message.predictedValue != null && Object.hasOwnProperty.call(message, \"predictedValue\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.predictedValue);\n                    if (message.score != null && Object.hasOwnProperty.call(message, \"score\"))\n                        writer.uint32(/* id 5, wireType 5 =*/45).float(message.score);\n                    return writer;\n                };\n    \n                /**\n                 * Encodes the specified ContextRef message, length delimited. Does not implicitly {@link DecoderResult.ContextAnswer.ContextRef.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {DecoderResult.ContextAnswer.IContextRef} message ContextRef message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ContextRef.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n    \n                /**\n                 * Decodes a ContextRef message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ContextRef.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DecoderResult.ContextAnswer.ContextRef();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.id = reader.string();\n                            break;\n                        case 2:\n                            message.index = reader.int32();\n                            break;\n                        case 3:\n                            message.originalValue = reader.string();\n                            break;\n                        case 4:\n                            message.predictedValue = reader.string();\n                            break;\n                        case 5:\n                            message.score = reader.float();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n    \n                /**\n                 * Decodes a ContextRef message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ContextRef.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n    \n                /**\n                 * Verifies a ContextRef message.\n                 * @function verify\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                ContextRef.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        if (!$util.isString(message.id))\n                            return \"id: string expected\";\n                    if (message.index != null && message.hasOwnProperty(\"index\"))\n                        if (!$util.isInteger(message.index))\n                            return \"index: integer expected\";\n                    if (message.originalValue != null && message.hasOwnProperty(\"originalValue\"))\n                        if (!$util.isString(message.originalValue))\n                            return \"originalValue: string expected\";\n                    if (message.predictedValue != null && message.hasOwnProperty(\"predictedValue\"))\n                        if (!$util.isString(message.predictedValue))\n                            return \"predictedValue: string expected\";\n                    if (message.score != null && message.hasOwnProperty(\"score\"))\n                        if (typeof message.score !== \"number\")\n                            return \"score: number expected\";\n                    return null;\n                };\n    \n                /**\n                 * Creates a ContextRef message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {DecoderResult.ContextAnswer.ContextRef} ContextRef\n                 */\n                ContextRef.fromObject = function fromObject(object) {\n                    if (object instanceof $root.DecoderResult.ContextAnswer.ContextRef)\n                        return object;\n                    var message = new $root.DecoderResult.ContextAnswer.ContextRef();\n                    if (object.id != null)\n                        message.id = String(object.id);\n                    if (object.index != null)\n                        message.index = object.index | 0;\n                    if (object.originalValue != null)\n                        message.originalValue = String(object.originalValue);\n                    if (object.predictedValue != null)\n                        message.predictedValue = String(object.predictedValue);\n                    if (object.score != null)\n                        message.score = Number(object.score);\n                    return message;\n                };\n    \n                /**\n                 * Creates a plain object from a ContextRef message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @static\n                 * @param {DecoderResult.ContextAnswer.ContextRef} message ContextRef\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                ContextRef.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.id = \"\";\n                        object.index = 0;\n                        object.originalValue = \"\";\n                        object.predictedValue = \"\";\n                        object.score = 0;\n                    }\n                    if (message.id != null && message.hasOwnProperty(\"id\"))\n                        object.id = message.id;\n                    if (message.index != null && message.hasOwnProperty(\"index\"))\n                        object.index = message.index;\n                    if (message.originalValue != null && message.hasOwnProperty(\"originalValue\"))\n                        object.originalValue = message.originalValue;\n                    if (message.predictedValue != null && message.hasOwnProperty(\"predictedValue\"))\n                        object.predictedValue = message.predictedValue;\n                    if (message.score != null && message.hasOwnProperty(\"score\"))\n                        object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;\n                    return object;\n                };\n    \n                /**\n                 * Converts this ContextRef to JSON.\n                 * @function toJSON\n                 * @memberof DecoderResult.ContextAnswer.ContextRef\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                ContextRef.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n    \n                return ContextRef;\n            })();\n    \n            return ContextAnswer;\n        })();\n    \n        return DecoderResult;\n    })();\n    \n    $root.ErrorResponse = (function() {\n    \n        /**\n         * Properties of an ErrorResponse.\n         * @exports IErrorResponse\n         * @interface IErrorResponse\n         * @property {string|null} [errorMessage] ErrorResponse errorMessage\n         */\n    \n        /**\n         * Constructs a new ErrorResponse.\n         * @exports ErrorResponse\n         * @classdesc Represents an ErrorResponse.\n         * @implements IErrorResponse\n         * @constructor\n         * @param {IErrorResponse=} [properties] Properties to set\n         */\n        function ErrorResponse(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * ErrorResponse errorMessage.\n         * @member {string} errorMessage\n         * @memberof ErrorResponse\n         * @instance\n         */\n        ErrorResponse.prototype.errorMessage = \"\";\n    \n        /**\n         * Creates a new ErrorResponse instance using the specified properties.\n         * @function create\n         * @memberof ErrorResponse\n         * @static\n         * @param {IErrorResponse=} [properties] Properties to set\n         * @returns {ErrorResponse} ErrorResponse instance\n         */\n        ErrorResponse.create = function create(properties) {\n            return new ErrorResponse(properties);\n        };\n    \n        /**\n         * Encodes the specified ErrorResponse message. Does not implicitly {@link ErrorResponse.verify|verify} messages.\n         * @function encode\n         * @memberof ErrorResponse\n         * @static\n         * @param {IErrorResponse} message ErrorResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ErrorResponse.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.errorMessage);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified ErrorResponse message, length delimited. Does not implicitly {@link ErrorResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof ErrorResponse\n         * @static\n         * @param {IErrorResponse} message ErrorResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes an ErrorResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof ErrorResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {ErrorResponse} ErrorResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ErrorResponse.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ErrorResponse();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.errorMessage = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes an ErrorResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof ErrorResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {ErrorResponse} ErrorResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ErrorResponse.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies an ErrorResponse message.\n         * @function verify\n         * @memberof ErrorResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ErrorResponse.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                if (!$util.isString(message.errorMessage))\n                    return \"errorMessage: string expected\";\n            return null;\n        };\n    \n        /**\n         * Creates an ErrorResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof ErrorResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {ErrorResponse} ErrorResponse\n         */\n        ErrorResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.ErrorResponse)\n                return object;\n            var message = new $root.ErrorResponse();\n            if (object.errorMessage != null)\n                message.errorMessage = String(object.errorMessage);\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from an ErrorResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof ErrorResponse\n         * @static\n         * @param {ErrorResponse} message ErrorResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ErrorResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.errorMessage = \"\";\n            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                object.errorMessage = message.errorMessage;\n            return object;\n        };\n    \n        /**\n         * Converts this ErrorResponse to JSON.\n         * @function toJSON\n         * @memberof ErrorResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ErrorResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return ErrorResponse;\n    })();\n    \n    $root.PacketWrapperFromServer = (function() {\n    \n        /**\n         * Properties of a PacketWrapperFromServer.\n         * @exports IPacketWrapperFromServer\n         * @interface IPacketWrapperFromServer\n         * @property {IUndecodedSeconds|null} [undecodedSecondsField] PacketWrapperFromServer undecodedSecondsField\n         * @property {IFullyFinalized|null} [fullyFinalizedField] PacketWrapperFromServer fullyFinalizedField\n         * @property {IDecoderResult|null} [decoderResultField] PacketWrapperFromServer decoderResultField\n         * @property {IErrorResponse|null} [errorResponse] PacketWrapperFromServer errorResponse\n         */\n    \n        /**\n         * Constructs a new PacketWrapperFromServer.\n         * @exports PacketWrapperFromServer\n         * @classdesc Represents a PacketWrapperFromServer.\n         * @implements IPacketWrapperFromServer\n         * @constructor\n         * @param {IPacketWrapperFromServer=} [properties] Properties to set\n         */\n        function PacketWrapperFromServer(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * PacketWrapperFromServer undecodedSecondsField.\n         * @member {IUndecodedSeconds|null|undefined} undecodedSecondsField\n         * @memberof PacketWrapperFromServer\n         * @instance\n         */\n        PacketWrapperFromServer.prototype.undecodedSecondsField = null;\n    \n        /**\n         * PacketWrapperFromServer fullyFinalizedField.\n         * @member {IFullyFinalized|null|undefined} fullyFinalizedField\n         * @memberof PacketWrapperFromServer\n         * @instance\n         */\n        PacketWrapperFromServer.prototype.fullyFinalizedField = null;\n    \n        /**\n         * PacketWrapperFromServer decoderResultField.\n         * @member {IDecoderResult|null|undefined} decoderResultField\n         * @memberof PacketWrapperFromServer\n         * @instance\n         */\n        PacketWrapperFromServer.prototype.decoderResultField = null;\n    \n        /**\n         * PacketWrapperFromServer errorResponse.\n         * @member {IErrorResponse|null|undefined} errorResponse\n         * @memberof PacketWrapperFromServer\n         * @instance\n         */\n        PacketWrapperFromServer.prototype.errorResponse = null;\n    \n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n    \n        /**\n         * PacketWrapperFromServer MessageType.\n         * @member {\"undecodedSecondsField\"|\"fullyFinalizedField\"|\"decoderResultField\"|\"errorResponse\"|undefined} MessageType\n         * @memberof PacketWrapperFromServer\n         * @instance\n         */\n        Object.defineProperty(PacketWrapperFromServer.prototype, \"MessageType\", {\n            get: $util.oneOfGetter($oneOfFields = [\"undecodedSecondsField\", \"fullyFinalizedField\", \"decoderResultField\", \"errorResponse\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n    \n        /**\n         * Creates a new PacketWrapperFromServer instance using the specified properties.\n         * @function create\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {IPacketWrapperFromServer=} [properties] Properties to set\n         * @returns {PacketWrapperFromServer} PacketWrapperFromServer instance\n         */\n        PacketWrapperFromServer.create = function create(properties) {\n            return new PacketWrapperFromServer(properties);\n        };\n    \n        /**\n         * Encodes the specified PacketWrapperFromServer message. Does not implicitly {@link PacketWrapperFromServer.verify|verify} messages.\n         * @function encode\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {IPacketWrapperFromServer} message PacketWrapperFromServer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PacketWrapperFromServer.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.undecodedSecondsField != null && Object.hasOwnProperty.call(message, \"undecodedSecondsField\"))\n                $root.UndecodedSeconds.encode(message.undecodedSecondsField, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.fullyFinalizedField != null && Object.hasOwnProperty.call(message, \"fullyFinalizedField\"))\n                $root.FullyFinalized.encode(message.fullyFinalizedField, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.decoderResultField != null && Object.hasOwnProperty.call(message, \"decoderResultField\"))\n                $root.DecoderResult.encode(message.decoderResultField, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.errorResponse != null && Object.hasOwnProperty.call(message, \"errorResponse\"))\n                $root.ErrorResponse.encode(message.errorResponse, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified PacketWrapperFromServer message, length delimited. Does not implicitly {@link PacketWrapperFromServer.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {IPacketWrapperFromServer} message PacketWrapperFromServer message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PacketWrapperFromServer.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a PacketWrapperFromServer message from the specified reader or buffer.\n         * @function decode\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PacketWrapperFromServer.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PacketWrapperFromServer();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.undecodedSecondsField = $root.UndecodedSeconds.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.fullyFinalizedField = $root.FullyFinalized.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.decoderResultField = $root.DecoderResult.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.errorResponse = $root.ErrorResponse.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a PacketWrapperFromServer message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PacketWrapperFromServer.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a PacketWrapperFromServer message.\n         * @function verify\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PacketWrapperFromServer.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.undecodedSecondsField != null && message.hasOwnProperty(\"undecodedSecondsField\")) {\n                properties.MessageType = 1;\n                {\n                    var error = $root.UndecodedSeconds.verify(message.undecodedSecondsField);\n                    if (error)\n                        return \"undecodedSecondsField.\" + error;\n                }\n            }\n            if (message.fullyFinalizedField != null && message.hasOwnProperty(\"fullyFinalizedField\")) {\n                if (properties.MessageType === 1)\n                    return \"MessageType: multiple values\";\n                properties.MessageType = 1;\n                {\n                    var error = $root.FullyFinalized.verify(message.fullyFinalizedField);\n                    if (error)\n                        return \"fullyFinalizedField.\" + error;\n                }\n            }\n            if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n                if (properties.MessageType === 1)\n                    return \"MessageType: multiple values\";\n                properties.MessageType = 1;\n                {\n                    var error = $root.DecoderResult.verify(message.decoderResultField);\n                    if (error)\n                        return \"decoderResultField.\" + error;\n                }\n            }\n            if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n                if (properties.MessageType === 1)\n                    return \"MessageType: multiple values\";\n                properties.MessageType = 1;\n                {\n                    var error = $root.ErrorResponse.verify(message.errorResponse);\n                    if (error)\n                        return \"errorResponse.\" + error;\n                }\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a PacketWrapperFromServer message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {PacketWrapperFromServer} PacketWrapperFromServer\n         */\n        PacketWrapperFromServer.fromObject = function fromObject(object) {\n            if (object instanceof $root.PacketWrapperFromServer)\n                return object;\n            var message = new $root.PacketWrapperFromServer();\n            if (object.undecodedSecondsField != null) {\n                if (typeof object.undecodedSecondsField !== \"object\")\n                    throw TypeError(\".PacketWrapperFromServer.undecodedSecondsField: object expected\");\n                message.undecodedSecondsField = $root.UndecodedSeconds.fromObject(object.undecodedSecondsField);\n            }\n            if (object.fullyFinalizedField != null) {\n                if (typeof object.fullyFinalizedField !== \"object\")\n                    throw TypeError(\".PacketWrapperFromServer.fullyFinalizedField: object expected\");\n                message.fullyFinalizedField = $root.FullyFinalized.fromObject(object.fullyFinalizedField);\n            }\n            if (object.decoderResultField != null) {\n                if (typeof object.decoderResultField !== \"object\")\n                    throw TypeError(\".PacketWrapperFromServer.decoderResultField: object expected\");\n                message.decoderResultField = $root.DecoderResult.fromObject(object.decoderResultField);\n            }\n            if (object.errorResponse != null) {\n                if (typeof object.errorResponse !== \"object\")\n                    throw TypeError(\".PacketWrapperFromServer.errorResponse: object expected\");\n                message.errorResponse = $root.ErrorResponse.fromObject(object.errorResponse);\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a PacketWrapperFromServer message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof PacketWrapperFromServer\n         * @static\n         * @param {PacketWrapperFromServer} message PacketWrapperFromServer\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PacketWrapperFromServer.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.undecodedSecondsField != null && message.hasOwnProperty(\"undecodedSecondsField\")) {\n                object.undecodedSecondsField = $root.UndecodedSeconds.toObject(message.undecodedSecondsField, options);\n                if (options.oneofs)\n                    object.MessageType = \"undecodedSecondsField\";\n            }\n            if (message.fullyFinalizedField != null && message.hasOwnProperty(\"fullyFinalizedField\")) {\n                object.fullyFinalizedField = $root.FullyFinalized.toObject(message.fullyFinalizedField, options);\n                if (options.oneofs)\n                    object.MessageType = \"fullyFinalizedField\";\n            }\n            if (message.decoderResultField != null && message.hasOwnProperty(\"decoderResultField\")) {\n                object.decoderResultField = $root.DecoderResult.toObject(message.decoderResultField, options);\n                if (options.oneofs)\n                    object.MessageType = \"decoderResultField\";\n            }\n            if (message.errorResponse != null && message.hasOwnProperty(\"errorResponse\")) {\n                object.errorResponse = $root.ErrorResponse.toObject(message.errorResponse, options);\n                if (options.oneofs)\n                    object.MessageType = \"errorResponse\";\n            }\n            return object;\n        };\n    \n        /**\n         * Converts this PacketWrapperFromServer to JSON.\n         * @function toJSON\n         * @memberof PacketWrapperFromServer\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PacketWrapperFromServer.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return PacketWrapperFromServer;\n    })();\n\n    return $root;\n});\n});\n\nvar createSpeechRecognizer = function (voiceListener) {\n    var _a = createNanoEvents(), emit = _a.emit, on = _a.on;\n    var off;\n    var status = 'inactive';\n    var currentMessageId;\n    var stop = function () {\n        if (voiceListener.status !== 'stopped') {\n            status = 'inactive';\n            voiceListener.stop();\n        }\n    };\n    var start = function (_a) {\n        var sendVoice = _a.sendVoice, messageId = _a.messageId, onMessage = _a.onMessage;\n        return voiceListener.listen(sendVoice).then(function () {\n            status = 'active';\n            currentMessageId = messageId;\n            off = onMessage(function (message) {\n                var _a, _b;\n                if (message.status && message.status.code != null && message.status.code < 0) {\n                    off();\n                    stop();\n                }\n                if (message.messageId === messageId && message.messageName === MessageNames.STT) {\n                    if (message.text) {\n                        emit('hypotesis', message.text.data || '', message.last === 1, message.messageId);\n                        if (message.last === 1) {\n                            off();\n                            stop();\n                        }\n                    }\n                    if ((_a = message.bytes) === null || _a === void 0 ? void 0 : _a.data) {\n                        var decoderResultField = asr.PacketWrapperFromServer.decode(message.bytes.data).decoderResultField;\n                        if (decoderResultField && ((_b = decoderResultField.hypothesis) === null || _b === void 0 ? void 0 : _b.length)) {\n                            emit('hypotesis', decoderResultField.hypothesis[0].normalizedText || '', !!decoderResultField.isFinal, message.messageId);\n                            if (decoderResultField.isFinal) {\n                                off();\n                                stop();\n                            }\n                        }\n                    }\n                }\n            });\n        });\n    };\n    return {\n        start: start,\n        stop: stop,\n        on: on,\n        get status() {\n            return status;\n        },\n        get messageId() {\n            return currentMessageId;\n        },\n    };\n};\n\nvar isAudioSupported = typeof window !== 'undefined' && (window.AudioContext || window.webkitAudioContext);\n/**\n * Возвращает новый инстанс AudioContext или ошибку\n * @param options AudioContextOptions\n * @returns AudioContext\n */\nvar createAudioContext = function (options) {\n    if (window.AudioContext) {\n        return new AudioContext(options);\n    }\n    if (window.webkitAudioContext) {\n        // eslint-disable-next-line new-cap\n        return new window.webkitAudioContext();\n    }\n    throw new Error('Audio not supported');\n};\nvar _a = createNanoEvents(), on = _a.on, emit = _a.emit;\nvar audioContext;\n/**\n * При помощи вызова функции из аргумента, возвращает, готовый к воспроизведению звука, AudioContext.\n * Всегда возвращает один и тот же AudioContext\n * @param onReady Функция, в аргумент которой будет возвращен AudioContext\n */\nvar resolveAudioContext = function (onReady) {\n    if (!audioContext) {\n        var isSafari_1 = navigator.vendor.search('Apple') >= 0;\n        var context_1 = createAudioContext();\n        audioContext = {\n            context: context_1,\n            ready: !isSafari_1 && context_1.state === 'running',\n            on: on,\n        };\n        /// Контекст может быть не готов для использования сразу после создания\n        /// Если попробовать что-то воспроизвести в этом контексте - звука не будет\n        if (!audioContext.ready) {\n            var handleClick_1 = function () {\n                document.removeEventListener('click', handleClick_1);\n                document.removeEventListener('touchstart', handleClick_1);\n                if (isSafari_1) {\n                    /// проигрываем тишину, т.к нужно что-то проиграть,\n                    /// чтобы сафари разрешил воспроизводить звуки в любой момент в этом контексте\n                    var oscillator = audioContext.context.createOscillator();\n                    oscillator.frequency.value = 0;\n                    oscillator.connect(audioContext.context.destination);\n                    oscillator.start(0);\n                    oscillator.stop(0.5);\n                }\n                if (audioContext.context.state === 'suspended') {\n                    /// Developers who write games, WebRTC applications, or other websites that use the Web Audio API\n                    /// should call context.resume() after the first user gesture (e.g. a click, or tap)\n                    /// https://sites.google.com/a/chromium.org/dev/audio-video/autoplay\n                    audioContext.context.resume();\n                }\n                audioContext.ready = true;\n                emit('ready');\n            };\n            /// чтобы сделать контекст готовым к использованию (воспроизведению звука),\n            /// необходимо событие от пользователя\n            // для пк\n            document.addEventListener('click', handleClick_1);\n            // для мобильных устройств\n            document.addEventListener('touchstart', handleClick_1);\n        }\n    }\n    if (audioContext.ready) {\n        onReady && onReady(audioContext.context);\n    }\n    else {\n        var unsubscribe_1 = on('ready', function () {\n            onReady(audioContext.context);\n            unsubscribe_1();\n        });\n    }\n};\n\n/**\n * Понижает sample rate c inSampleRate до значения outSampleRate и преобразует Float32Array в ArrayBuffer\n * @param buffer Аудио\n * @param inSampleRate текущий sample rate\n * @param outSampleRate требуемый sample rate\n * @returns Аудио со значением sample rate = outSampleRate\n */\nvar downsampleBuffer = function (buffer, inSampleRate, outSampleRate) {\n    if (outSampleRate > inSampleRate) {\n        throw new Error('downsampling rate show be smaller than original sample rate');\n    }\n    var sampleRateRatio = inSampleRate / outSampleRate;\n    var newLength = Math.round(buffer.length / sampleRateRatio);\n    var result = new Int16Array(newLength);\n    var offsetResult = 0;\n    var offsetBuffer = 0;\n    while (offsetResult < result.length) {\n        var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n        var accum = 0;\n        var count = 0;\n        for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n            accum += buffer[i];\n            count++;\n        }\n        result[offsetResult] = Math.min(1, accum / count) * 0x7fff;\n        offsetResult++;\n        offsetBuffer = nextOffsetBuffer;\n    }\n    return result.buffer;\n};\nvar TARGET_SAMPLE_RATE = 16000;\nvar IS_FIREFOX = typeof window !== 'undefined' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\nvar context;\nvar processor;\n/**\n * Преобразует stream в чанки (кусочки), и передает их в cb,\n * будет это делать, пока не будет вызвана функция остановки\n * @param stream Аудио-поток\n * @param cb callback, куда будут переданы чанки из потока\n * @returns Функция, вызов которой остановит передачу чанков\n */\nvar createAudioRecorder = function (stream, cb) {\n    return new Promise(function (resolve) {\n        var state = 'inactive';\n        var input;\n        var stop = function () {\n            if (state === 'inactive') {\n                throw new Error(\"Can't stop inactive recorder\");\n            }\n            state = 'inactive';\n            stream.getTracks().forEach(function (track) {\n                track.stop();\n            });\n            input.disconnect();\n        };\n        var start = function () {\n            if (state !== 'inactive') {\n                throw new Error(\"Can't start not inactive recorder\");\n            }\n            state = 'recording';\n            if (!context) {\n                context = createAudioContext({\n                    // firefox не умеет выравнивать samplerate, будем делать это самостоятельно\n                    sampleRate: IS_FIREFOX ? undefined : TARGET_SAMPLE_RATE,\n                });\n            }\n            input = context.createMediaStreamSource(stream);\n            if (!processor) {\n                processor = context.createScriptProcessor(2048, 1, 1);\n            }\n            var listener = function (e) {\n                var buffer = e.inputBuffer.getChannelData(0);\n                var data = downsampleBuffer(buffer, context.sampleRate, TARGET_SAMPLE_RATE);\n                var last = state === 'inactive';\n                cb(data, last);\n                if (last) {\n                    processor.removeEventListener('audioprocess', listener);\n                }\n            };\n            processor.addEventListener('audioprocess', listener);\n            processor.addEventListener('audioprocess', function () { return resolve(stop); }, { once: true });\n            input.connect(processor);\n            processor.connect(context.destination);\n        };\n        start();\n    });\n};\n/**\n * Запрашивает у браузера доступ к микрофону и резолвит Promise, если разрешение получено.\n * После получения разрешения, чанки с голосом будут передаваться в cb - пока не будет вызвана функция из результата.\n * @param cb Callback, куда будут передаваться чанки с голосом пользователя\n * @returns Promise, который содержит функцию прерывающую слушание\n */\nvar createNavigatorAudioProvider = function (cb) {\n    return navigator.mediaDevices\n        .getUserMedia({\n        audio: true,\n    })\n        .then(function (stream) { return createAudioRecorder(stream, cb); });\n};\n\n/**\n * Возвращает объект, позволяющий получать запись голоса пользователя и управлять ею.\n * @param createAudioProvider Источник голоса\n * @returns Api для запуска и остановки слушания\n */\nvar createVoiceListener = function (createAudioProvider) {\n    if (createAudioProvider === void 0) { createAudioProvider = createNavigatorAudioProvider; }\n    var _a = createNanoEvents(), emit = _a.emit, on = _a.on;\n    var stopRecord;\n    var status = 'stopped';\n    var stop = function () {\n        status = 'stopped';\n        stopRecord();\n        emit('status', 'stopped');\n    };\n    var listen = function (handleVoice) {\n        status = 'started';\n        emit('status', 'started');\n        return createAudioProvider(function (data, last) { return handleVoice(new Uint8Array(data), last); })\n            .then(function (recStop) {\n            stopRecord = recStop;\n        })\n            .then(function () {\n            status = 'listen';\n            emit('status', 'listen');\n        })\n            .catch(function (err) {\n            status = 'stopped';\n            emit('status', 'stopped');\n            throw err;\n        });\n    };\n    return {\n        listen: listen,\n        stop: stop,\n        on: on,\n        get status() {\n            return status;\n        },\n    };\n};\n\n/** Создает коллекцию треков  */\nvar createTrackCollection = function () {\n    var trackIds;\n    var trackMap;\n    var clear = function () {\n        trackIds = new Array();\n        trackMap = new Map();\n    };\n    var push = function (id, track) {\n        if (trackMap.has(id)) {\n            throw new Error('Track already exists');\n        }\n        trackMap.set(id, track);\n        trackIds.push(id);\n    };\n    var has = function (id) { return trackMap.has(id); };\n    var getById = function (id) {\n        var track = trackMap.get(id);\n        if (track === undefined) {\n            throw new Error('Unknown track id');\n        }\n        return track;\n    };\n    var getByIndex = function (index) {\n        if (index < 0 || index >= trackIds.length) {\n            throw new Error('Index out of bounds');\n        }\n        var track = trackMap.get(trackIds[index]);\n        if (track == null) {\n            throw new Error('Something wrong...');\n        }\n        return track;\n    };\n    var some = function (predicate) { return trackIds.some(function (id) { return predicate(getById(id)); }); };\n    clear();\n    return {\n        clear: clear,\n        has: has,\n        get: getById,\n        getByIndex: getByIndex,\n        push: push,\n        some: some,\n        get length() {\n            return trackIds.length;\n        },\n    };\n};\n\n/** Создает структуру для хранения загружаемых и воспроизводимых частей трека */\nvar createChunkQueue = function () {\n    var buffer = []; // очередь на воспроизведение\n    var chunks = []; // очередь воспроизведения\n    var duration = 0; // продолжительность очереди на воспроизведение, сек\n    var loaded = false; // флаг завершения загрузки\n    /** Добавить чанк в очередь на воспроизведение */\n    var push = function (chunk) {\n        var _a;\n        buffer.push(chunk);\n        duration += ((_a = chunk.buffer) === null || _a === void 0 ? void 0 : _a.duration) || 0;\n    };\n    /** Добавить чанк в очередь воспроизведения */\n    var toPlay = function (chunk) {\n        chunks.push(chunk);\n    };\n    /** Удалить чанк из очереди воспроизведения */\n    var remove = function (chunk) {\n        chunks.splice(chunks.indexOf(chunk), 1);\n    };\n    /** Получить очередь на воспроизведение */\n    var popAll = function () {\n        duration = 0;\n        return buffer.splice(0, buffer.length);\n    };\n    /** Проставляем признак окончания загрузки трека */\n    var allLoaded = function () {\n        loaded = true;\n    };\n    return {\n        get bufferLen() {\n            return buffer.length;\n        },\n        get chunks() {\n            return chunks;\n        },\n        allLoaded: allLoaded,\n        toPlay: toPlay,\n        remove: remove,\n        push: push,\n        popAll: popAll,\n        get length() {\n            return chunks.length;\n        },\n        get duration() {\n            return duration;\n        },\n        get ended() {\n            // считаем трек законченным, когда все загружено и воспроизведено\n            return loaded && chunks.length === 0 && buffer.length === 0;\n        },\n        get loaded() {\n            return loaded;\n        },\n    };\n};\n\nvar from16BitToFloat32 = function (incomingData) {\n    var l = incomingData.length;\n    var outputData = new Float32Array(l);\n    for (var i = 0; i < l; i += 1) {\n        outputData[i] = incomingData[i] / 32768.0;\n    }\n    return outputData;\n};\n/** Возвращает потоковый подгружаемый трек, который умеет себя проигрывать */\nvar createTrackStream = function (ctx, _a) {\n    var _b = _a.sampleRate, sampleRate = _b === void 0 ? 24000 : _b, _c = _a.numberOfChannels, numberOfChannels = _c === void 0 ? 1 : _c, _d = _a.delay, delay = _d === void 0 ? 0 : _d, onPlay = _a.onPlay, onEnd = _a.onEnd, trackStatus = _a.trackStatus;\n    // очередь загруженных чанков (кусочков) трека\n    var queue = createChunkQueue();\n    var extraByte = null;\n    var status = trackStatus || 'stop';\n    var lastChunkOffset = 0;\n    var startTime = 0;\n    var firstChunk = true;\n    var end = function () {\n        // останавливаем воспроизведение чанков из очереди воспроизведения\n        queue.chunks.forEach(function (chunk) {\n            chunk.stop();\n        });\n        status = 'end';\n        onEnd && onEnd();\n        startTime = 0;\n        lastChunkOffset = 0;\n    };\n    var play = function () {\n        if (status === 'end') {\n            return;\n        }\n        if (status !== 'play') {\n            status = 'play';\n            onPlay && onPlay();\n        }\n        if (queue.ended) {\n            end();\n            return;\n        }\n        // воспроизводим трек, если он полностью загрузился или длина загруженного больше задержки\n        if (queue.loaded || queue.duration >= delay) {\n            startTime = queue.length === 0 ? ctx.currentTime : startTime;\n            var chunks = queue.popAll();\n            chunks.forEach(function (chunk) {\n                var _a;\n                queue.toPlay(chunk);\n                chunk.start(startTime + lastChunkOffset);\n                lastChunkOffset += ((_a = chunk.buffer) === null || _a === void 0 ? void 0 : _a.duration) || 0;\n            });\n        }\n    };\n    var getExtraBytes = function (data, bytesArraysSizes) {\n        if (extraByte == null && bytesArraysSizes.incomingMessageVoiceDataLength % 2) {\n            extraByte = data[bytesArraysSizes.incomingMessageVoiceDataLength - 1];\n            bytesArraysSizes.incomingMessageVoiceDataLength -= 1;\n            bytesArraysSizes.sourceLen -= 1;\n        }\n        else if (extraByte != null) {\n            bytesArraysSizes.prepend = extraByte;\n            bytesArraysSizes.start = 1;\n            if (bytesArraysSizes.incomingMessageVoiceDataLength % 2) {\n                bytesArraysSizes.incomingMessageVoiceDataLength += 1;\n                extraByte = null;\n            }\n            else {\n                extraByte = data[bytesArraysSizes.incomingMessageVoiceDataLength - 1];\n                bytesArraysSizes.sourceLen -= 1;\n            }\n        }\n    };\n    var createChunk = function (chunk) {\n        var audioBuffer = ctx.createBuffer(numberOfChannels, chunk.length / numberOfChannels, sampleRate);\n        for (var i = 0; i < numberOfChannels; i++) {\n            var channelChunk = new Float32Array(chunk.length / numberOfChannels);\n            var index = 0;\n            for (var j = i; j < chunk.length; j += numberOfChannels) {\n                channelChunk[index++] = chunk[j];\n            }\n            audioBuffer.getChannelData(i).set(channelChunk);\n        }\n        var source = ctx.createBufferSource();\n        source.buffer = audioBuffer;\n        source.connect(ctx.destination);\n        source.onended = function () {\n            queue.remove(source);\n            if (queue.ended) {\n                status = 'end';\n                onEnd && onEnd();\n            }\n        };\n        return source;\n    };\n    /** добавляет чанк в очередь на воспроизведение */\n    var write = function (data) {\n        // 44 байта - заголовок трека\n        var slicePoint = firstChunk ? 44 : 0;\n        var bytesArraysSizes = {\n            incomingMessageVoiceDataLength: data.length,\n            sourceLen: data.length,\n            start: 0,\n            prepend: null,\n        };\n        firstChunk = false;\n        if (slicePoint >= data.length) {\n            return;\n        }\n        getExtraBytes(data, bytesArraysSizes);\n        var dataBuffer = new ArrayBuffer(bytesArraysSizes.incomingMessageVoiceDataLength);\n        var bufferUi8 = new Uint8Array(dataBuffer);\n        var bufferI16 = new Int16Array(dataBuffer);\n        bufferUi8.set(data.slice(0, bytesArraysSizes.sourceLen), bytesArraysSizes.start);\n        if (bytesArraysSizes.prepend != null) {\n            bufferUi8[0] = bytesArraysSizes.prepend;\n        }\n        var chunk = createChunk(from16BitToFloat32(bufferI16.slice(slicePoint)));\n        queue.push(chunk);\n        if (status === 'play') {\n            play();\n        }\n    };\n    return {\n        get loaded() {\n            return queue.loaded;\n        },\n        setLoaded: function () {\n            queue.allLoaded();\n            if (status === 'play') {\n                play();\n            }\n        },\n        write: write,\n        get status() {\n            return status;\n        },\n        play: play,\n        stop: end,\n    };\n};\n\nvar createVoicePlayer = function (actx, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.startVoiceDelay, startVoiceDelay = _c === void 0 ? 0.2 : _c, sampleRate = _b.sampleRate, numberOfChannels = _b.numberOfChannels;\n    var _d = createNanoEvents(), on = _d.on, emit = _d.emit;\n    var tracks = createTrackCollection();\n    // true - воспроизводим все треки в очереди (новые в том числе), false - скипаем всю очередь (новые в т.ч.)\n    var active = true;\n    // индекс текущего трека в tracks\n    var cursor = 0;\n    var play = function () {\n        if (cursor >= tracks.length) {\n            if (tracks.some(function (track) { return !track.loaded; })) {\n                return;\n            }\n            // очищаем коллекцию, если все треки были воспроизведены\n            cursor = 0;\n            tracks.clear();\n            return;\n        }\n        // рекурсивно последовательно включаем треки из очереди\n        var current = tracks.getByIndex(cursor);\n        if (current.status === 'end') {\n            if (cursor < tracks.length) {\n                cursor++;\n                play();\n            }\n        }\n        else {\n            current.play();\n        }\n    };\n    var append = function (data, trackId, last) {\n        if (last === void 0) { last = false; }\n        var current = tracks.has(trackId) ? tracks.get(trackId) : undefined;\n        if (current == null) {\n            /// если trackId нет в коллекции - создаем трек\n            /// по окончании проигрывания - запускаем следующий трек, вызывая play\n            current = createTrackStream(actx, {\n                sampleRate: sampleRate,\n                numberOfChannels: numberOfChannels,\n                delay: startVoiceDelay,\n                onPlay: function () { return emit('play', trackId); },\n                onEnd: function () {\n                    emit('end', trackId);\n                    play();\n                },\n                trackStatus: active ? 'stop' : 'end',\n            });\n            tracks.push(trackId, current);\n        }\n        if (current.status !== 'end' && data.length) {\n            current.write(data);\n        }\n        if (last) {\n            // все чанки трека загружены\n            current.setLoaded();\n        }\n        play();\n    };\n    var stop = function () {\n        while (cursor < tracks.length) {\n            var cur = cursor;\n            cursor++;\n            tracks.getByIndex(cur).stop();\n        }\n    };\n    return {\n        append: append,\n        setActive: function (value) {\n            active = value;\n            if (value) {\n                play();\n            }\n            else {\n                stop();\n            }\n        },\n        on: on,\n        stop: stop,\n    };\n};\n\nvar createVoice = function (client, emit, \n/// пока onReady не вызван, треки не воспроизводятся\n/// когда случится onReady, очередь треков начнет проигрываться\nonReady) {\n    var voicePlayer;\n    var listener = createVoiceListener();\n    var musicRecognizer = createMusicRecognizer(listener);\n    var speechRecognizer = createSpeechRecognizer(listener);\n    var subscriptions = [];\n    var settings = {\n        disableDubbing: false,\n        disableListening: false,\n    };\n    var isPlaying = false; // проигрывается/не проигрывается озвучка\n    var autolistenMesId = null; // id сообщения, после проигрывания которого, нужно активировать слушание\n    /** останавливает слушание голоса, возвращает true - если слушание было активно */\n    var stopListening = function () {\n        var result = speechRecognizer.status === 'active' || musicRecognizer.status === 'active';\n        autolistenMesId = null;\n        if (speechRecognizer.status === 'active') {\n            speechRecognizer.stop();\n            client.sendCancel(speechRecognizer.messageId);\n            return true;\n        }\n        if (musicRecognizer.status === 'active') {\n            musicRecognizer.stop();\n            client.sendCancel(musicRecognizer.messageId);\n            return true;\n        }\n        return result;\n    };\n    /** Останавливает слушание и воспроизведение */\n    var stop = function () {\n        // здесь важен порядок остановки голоса\n        stopListening();\n        voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n    };\n    /** Активирует слушание голоса\n     * если было активно слушание или проигрывание - останавливает, слушание в этом случае не активируется\n     */\n    var listen = function () { return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            if (stopListening()) {\n                return [2 /*return*/];\n            }\n            if (isPlaying) {\n                voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n                return [2 /*return*/];\n            }\n            if (settings.disableListening) {\n                return [2 /*return*/];\n            }\n            // повторные вызовы не пройдут, пока пользователь не разрешит/запретит аудио\n            if (listener.status === 'stopped') {\n                return [2 /*return*/, client.createVoiceStream(function (_a) {\n                        var sendVoice = _a.sendVoice, messageId = _a.messageId, onMessage = _a.onMessage;\n                        return speechRecognizer.start({\n                            sendVoice: sendVoice,\n                            messageId: messageId,\n                            onMessage: onMessage,\n                        });\n                    })];\n            }\n            return [2 /*return*/];\n        });\n    }); };\n    /** Активирует распознавание музыки\n     * если было активно слушание или проигрывание - останавливает, распознование музыки в этом случае не активируется\n     */\n    var shazam = function () {\n        if (stopListening()) {\n            return;\n        }\n        if (isPlaying) {\n            voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.stop();\n        }\n        if (settings.disableListening) {\n            return;\n        }\n        // повторные вызовы не пройдут, пока пользователь не разрешит/запретит аудио\n        if (listener.status === 'stopped') {\n            client.createVoiceStream(function (_a) {\n                var sendVoice = _a.sendVoice, messageId = _a.messageId, onMessage = _a.onMessage;\n                return musicRecognizer.start({\n                    sendVoice: sendVoice,\n                    messageId: messageId,\n                    onMessage: onMessage,\n                });\n            });\n        }\n    };\n    if (isAudioSupported) {\n        resolveAudioContext(function (context) {\n            /// создаем плеер только если поддерживается аудио\n            /// и только когда готов AudioContext\n            voicePlayer = createVoicePlayer(context, { startVoiceDelay: 1 });\n            // начало проигрывания озвучки\n            subscriptions.push(voicePlayer.on('play', function () {\n                isPlaying = true;\n                emit({ emotion: 'talk' });\n            }));\n            // окончание проигрывания озвучки\n            subscriptions.push(voicePlayer.on('end', function (mesId) {\n                isPlaying = false;\n                emit({ emotion: 'idle' });\n                if (mesId === autolistenMesId) {\n                    listen();\n                }\n            }));\n            // оповещаем о готовности к воспроизведению звука\n            onReady && onReady();\n        });\n    }\n    // обработка входящей озвучки\n    subscriptions.push(client.on('voice', function (data, message) {\n        if (settings.disableDubbing) {\n            return;\n        }\n        voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.append(data, message.messageId.toString(), message.last === 1);\n    }));\n    // гипотезы распознавания речи\n    subscriptions.push(speechRecognizer.on('hypotesis', function (text, isLast, mid) {\n        emit({\n            asr: {\n                text: listener.status === 'listen' && !settings.disableListening ? text : '',\n                last: isLast,\n                mid: mid,\n            },\n        });\n    }));\n    // статусы слушания речи\n    subscriptions.push(listener.on('status', function (status) {\n        if (status === 'listen') {\n            voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(false);\n            emit({ emotion: 'listen' });\n        }\n        else if (status === 'stopped') {\n            voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(!settings.disableDubbing);\n            emit({ asr: { text: '' }, emotion: 'idle' });\n        }\n    }));\n    // активация автослушания\n    subscriptions.push(client.on('systemMessage', function (systemMessage, originalMessage) {\n        var autoListening = systemMessage.auto_listening;\n        if (autoListening) {\n            /// если озвучка включена - сохраняем mesId чтобы включить слушание после озвучки\n            /// если озвучка выключена - включаем слушание сразу\n            if (!settings.disableDubbing) {\n                autolistenMesId = originalMessage.messageId.toString();\n            }\n            else {\n                listen();\n            }\n        }\n    }));\n    return {\n        destroy: function () {\n            stopListening();\n            voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(false);\n            subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) { return unsubscribe(); });\n        },\n        change: function (newSettings) {\n            var disableDubbing = newSettings.disableDubbing, disableListening = newSettings.disableListening;\n            /// ниже важен порядок обработки флагов слушания и озвучки\n            /// сначала слушание, потом озвучка\n            // вкл/выкл фичи листенинга\n            if (typeof disableListening !== 'undefined' && settings.disableListening !== disableListening) {\n                settings.disableListening = disableListening;\n                if (disableListening === true) {\n                    stopListening();\n                }\n            }\n            // вкл/выкл фичи озвучки\n            if (typeof disableDubbing !== 'undefined' && settings.disableDubbing !== disableDubbing) {\n                settings.disableDubbing = disableDubbing;\n                voicePlayer === null || voicePlayer === void 0 ? void 0 : voicePlayer.setActive(!disableDubbing);\n            }\n            Object.assign(settings, newSettings);\n        },\n        listen: listen,\n        shazam: shazam,\n        stop: stop,\n    };\n};\n\nvar STATE_UPDATE_TIMEOUT = 200;\nvar DEFAULT_PROJECT_ID = 'd929986a-611a-2ba0-6174-1928c99600a5';\nvar DEFAULT_APPLICATION_ID = '7c4e23bf-cd93-b57e-874b-d9fc1b35f93d';\nvar DEFAULT_APP_VERSION_ID = '26d0bb2e-45d6-a276-f70e-6c016d1f9cff';\nvar DEFAULT_APP = {\n    projectId: DEFAULT_PROJECT_ID,\n    applicationId: DEFAULT_APPLICATION_ID,\n    appversionId: DEFAULT_APP_VERSION_ID,\n    frontendStateId: [DEFAULT_PROJECT_ID, DEFAULT_APPLICATION_ID, DEFAULT_APP_VERSION_ID].join('_'),\n    frontendType: 'DIALOG',\n    systemName: 'assistant',\n    frontendEndpoint: 'None',\n};\nvar isDefaultApp = function (appInfo) { return appInfo.frontendStateId === DEFAULT_APP.frontendStateId; };\nvar promiseTimeout = function (promise, timeout) {\n    var timeoutId;\n    return Promise.race([\n        promise.then(function (v) {\n            if (timeoutId) {\n                clearTimeout(timeoutId);\n            }\n            return v;\n        }),\n        new Promise(function (_, reject) {\n            timeoutId = window.setTimeout(function () {\n                reject(new Error(\"Timed out in \" + timeout + \" ms.\"));\n            }, timeout);\n        }),\n    ]);\n};\nvar createAssistant = function (_a) {\n    var _b;\n    var getMeta = _a.getMeta, configuration = __rest(_a, [\"getMeta\"]);\n    var _c = createNanoEvents(), on = _c.on, emit = _c.emit;\n    var subscriptions = [];\n    // хеш [messageId]: requestId, где requestId - пользовательский ид экшена\n    var requestIdMap = {};\n    // готов/не готов воспроизводить озвучку\n    var voiceReady = false;\n    // текущий апп\n    var app = { info: DEFAULT_APP };\n    var settings = {\n        disableDubbing: configuration.settings.dubbing === -1,\n        disableListening: false,\n        sendTextAsSsml: false,\n    };\n    var backgroundApps = {};\n    var metaProvider = function () { return __awaiter(void 0, void 0, void 0, function () {\n        var appState, _a, current_app, getBackgroundAppsMeta, background_apps;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    if (!(app !== null && app.info.frontendEndpoint && app.info.frontendEndpoint !== 'None' && app.getState)) return [3 /*break*/, 2];\n                    return [4 /*yield*/, promiseTimeout(app.getState(), STATE_UPDATE_TIMEOUT).catch(function () {\n                            // eslint-disable-next-line no-console\n                            console.error('App-state wasn`t resolved, timeout had been expired');\n                            return undefined;\n                        })];\n                case 1:\n                    _a = _b.sent();\n                    return [3 /*break*/, 3];\n                case 2:\n                    _a = undefined;\n                    _b.label = 3;\n                case 3:\n                    appState = _a;\n                    current_app = {\n                        app_info: app.info,\n                        state: appState || {},\n                    };\n                    getBackgroundAppsMeta = function () { return __awaiter(void 0, void 0, void 0, function () {\n                        var apps, backgroundAppsIds, backgroundAppsMeta;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    apps = __assign({}, backgroundApps);\n                                    backgroundAppsIds = Object.keys(apps);\n                                    backgroundAppsMeta = [];\n                                    return [4 /*yield*/, Promise.all(backgroundAppsIds.map(function (applicationId) { return __awaiter(void 0, void 0, void 0, function () {\n                                            var _a, getState;\n                                            return __generator(this, function (_b) {\n                                                _a = apps[applicationId].getState, getState = _a === void 0 ? function () { return Promise.resolve({}); } : _a;\n                                                return [2 /*return*/, promiseTimeout(getState(), STATE_UPDATE_TIMEOUT).then(function (state) { return state; }, function () { return ({}); })];\n                                            });\n                                        }); })).then(function (results) {\n                                            results.forEach(function (appResult, index) {\n                                                var state = appResult;\n                                                var applicationId = backgroundAppsIds[index];\n                                                backgroundAppsMeta.push({\n                                                    app_info: apps[applicationId].appInfo,\n                                                    state: state,\n                                                });\n                                            });\n                                        })];\n                                case 1:\n                                    _a.sent();\n                                    return [2 /*return*/, backgroundAppsMeta];\n                            }\n                        });\n                    }); };\n                    return [4 /*yield*/, getBackgroundAppsMeta()];\n                case 4:\n                    background_apps = _b.sent();\n                    return [2 /*return*/, {\n                            meta: __assign({ time: getTime(), current_app: current_app,\n                                background_apps: background_apps }, (getMeta ? getMeta() : {})),\n                        }];\n            }\n        });\n    }); };\n    var transport = createTransport((_b = configuration.fakeVps) === null || _b === void 0 ? void 0 : _b.createFakeWS);\n    var protocol = createProtocol(transport, __assign(__assign({}, configuration), { \n        // выключаем озвучку, пока голос не готов\n        settings: __assign(__assign({}, configuration.settings), { dubbing: !voiceReady ? -1 : configuration.settings.dubbing }) }));\n    var client = createClient(protocol, metaProvider);\n    var voice = createVoice(client, function (event) { return emit('assistant', event); }, function () {\n        voiceReady = true;\n        // когда голос готов, возвращаем первоначальное состояние\n        protocol.changeSettings({ dubbing: settings.disableDubbing ? -1 : 1 });\n    });\n    /** завершает текущий апп */\n    var closeApp = function () {\n        var current = app;\n        app = {\n            info: DEFAULT_APP,\n        };\n        if (!isDefaultApp(current.info)) {\n            emit('app', { type: 'close', app: current.info });\n        }\n    };\n    /** отправляет текст */\n    var sendText = function (text, shouldSendDisableDubbing) {\n        if (shouldSendDisableDubbing === void 0) { shouldSendDisableDubbing = false; }\n        voice.stop();\n        client.sendText(text, settings.sendTextAsSsml, shouldSendDisableDubbing);\n    };\n    /** отправляет server_action */\n    var sendServerAction = function (serverAction, messageName, requestId, actionApp) {\n        if (messageName === void 0) { messageName = 'SERVER_ACTION'; }\n        if (requestId === void 0) { requestId = undefined; }\n        if (actionApp === void 0) { actionApp = app.info; }\n        voice.stop();\n        client.sendServerAction(serverAction, actionApp, messageName).then(function (messageId) {\n            if (requestId && messageId) {\n                requestIdMap[messageId.toString()] = requestId;\n            }\n        });\n    };\n    /** отправляет ответ на запрос доступа к местоположению и пр. меты */\n    var sendMetaForPermissionRequest = function (requestMessageId, appInfo, items) { return __awaiter(void 0, void 0, void 0, function () {\n        var data;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, getAnswerForRequestPermissions(requestMessageId, appInfo, items)];\n                case 1:\n                    data = _a.sent();\n                    client.sendData(data, 'SERVER_ACTION');\n                    return [2 /*return*/];\n            }\n        });\n    }); };\n    subscriptions.push(protocol.on('ready', function () { return emit('vps', { type: 'ready' }); }));\n    // при неудачном переподключении к сокету\n    subscriptions.push(transport.on('error', function (error) {\n        emit('vps', { type: 'error', error: error });\n    }));\n    // обработка исходящих сообщений\n    subscriptions.push(protocol.on('outcoming', function (message) {\n        emit('vps', { type: 'outcoming', message: message });\n    }));\n    // обработка ошибок\n    subscriptions.push(protocol.on('error', function (error) {\n        emit('error', error);\n    }));\n    // оповещение о статусах\n    subscriptions.push(client.on('status', function (status) {\n        emit('status', status);\n    }));\n    // обработка входящих команд, и событий аппа\n    subscriptions.push(client.on('systemMessage', function (systemMessage, originalMessage) {\n        if (originalMessage.messageName === 'ANSWER_TO_USER') {\n            var activate_app_info = systemMessage.activate_app_info, items = systemMessage.items, mesAppInfo = systemMessage.app_info, character = systemMessage.character;\n            if (character) {\n                emit('assistant', { character: character.id });\n            }\n            // по-умолчанию activate_app_info: true\n            if (mesAppInfo && activate_app_info !== false) {\n                emit('app', { type: 'run', app: mesAppInfo });\n            }\n            if (items) {\n                for (var i = 0; i < (items || []).length; i++) {\n                    var command = items[i].command;\n                    if (typeof command !== 'undefined') {\n                        if (command.type === 'start_music_recognition') {\n                            voice.shazam();\n                            return;\n                        }\n                        if (command.type === 'request_permissions' && mesAppInfo) {\n                            sendMetaForPermissionRequest(originalMessage.messageId, mesAppInfo, command.permissions);\n                            return;\n                        }\n                        if (command.type === 'action') {\n                            emit('actionCommand', {\n                                type: 'command',\n                                command: command,\n                            });\n                        }\n                        if ((command.type === 'smart_app_data' ||\n                            command.type === 'start_smart_search' ||\n                            command.type === 'navigation') &&\n                            mesAppInfo) {\n                            // эмитим все команды, т.к бывают фоновые команды\n                            emit('app', {\n                                type: 'command',\n                                command: __assign(__assign({}, command), { sdk_meta: {\n                                        mid: originalMessage.messageId.toString(),\n                                        requestId: requestIdMap[originalMessage.messageId.toString()],\n                                    } }),\n                                app: mesAppInfo,\n                            });\n                        }\n                        if (command.type === 'close_app') {\n                            closeApp();\n                        }\n                    }\n                }\n            }\n            emit('vps', { type: 'incoming', systemMessage: systemMessage, originalMessage: originalMessage });\n        }\n    }));\n    // прокидывает команды backgroundApp'ов в их подписчики\n    on('app', function (event) {\n        var _a;\n        if (event.type === 'command') {\n            var backgroundAppOnCommand = (_a = backgroundApps[event.app.applicationId]) === null || _a === void 0 ? void 0 : _a.commandsSubscribers;\n            if (Array.isArray(backgroundAppOnCommand)) {\n                backgroundAppOnCommand.forEach(function (onCommand) {\n                    var _a;\n                    onCommand(event.command, (_a = event.command.sdk_meta) === null || _a === void 0 ? void 0 : _a.mid);\n                });\n            }\n        }\n    });\n    /** уничтожает ассистент, очищает подписки */\n    var destroy = function () {\n        voice.destroy();\n        client.destroy();\n        protocol.destroy();\n        subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) { return unsubscribe(); });\n    };\n    /** запускает ассистент (приветствие) */\n    var start = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.disableGreetings, disableGreetings = _c === void 0 ? false : _c, _d = _b.initPhrase, initPhrase = _d === void 0 ? undefined : _d, _e = _b.isFirstSession, isFirstSession = _e === void 0 ? false : _e;\n        return __awaiter(void 0, void 0, void 0, function () {\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        if (!(!disableGreetings && isDefaultApp(app.info))) return [3 /*break*/, 2];\n                        return [4 /*yield*/, client.sendOpenAssistant({ isFirstSession: isFirstSession })];\n                    case 1:\n                        _f.sent();\n                        _f.label = 2;\n                    case 2:\n                        if (initPhrase) {\n                            return [2 /*return*/, client\n                                    .sendText(initPhrase)\n                                    .then(function (messageId) { return (messageId ? client.waitForAnswer(messageId) : undefined); })];\n                        }\n                        return [2 /*return*/, undefined];\n                }\n            });\n        });\n    };\n    return {\n        get activeApp() {\n            return !isDefaultApp(app.info) ? app.info : null;\n        },\n        get settings() {\n            return settings;\n        },\n        destroy: destroy,\n        closeApp: closeApp,\n        listen: voice.listen,\n        sendServerAction: sendServerAction,\n        sendText: sendText,\n        start: start,\n        stop: function () {\n            voice.stop();\n            protocol.clearQueue();\n            transport.close();\n        },\n        stopVoice: voice.stop,\n        emit: emit,\n        on: on,\n        changeConfiguration: protocol.changeConfiguration,\n        changeSettings: function (newSettings) {\n            var dubbingChanged = settings.disableDubbing !== !!newSettings.disableDubbing;\n            settings = __assign(__assign({}, settings), newSettings);\n            voice.change({ disableDubbing: settings.disableDubbing, disableListening: settings.disableListening });\n            if (!dubbingChanged) {\n                return;\n            }\n            protocol.changeSettings({ dubbing: settings.disableDubbing || !voiceReady ? -1 : 1 });\n        },\n        reconnect: protocol.reconnect,\n        get protocol() {\n            return protocol;\n        },\n        setActiveApp: function (info, getState) {\n            app = { info: info, getState: getState };\n        },\n        addBackgroundApp: function (_a) {\n            var appInfo = _a.appInfo, getState = _a.getState;\n            backgroundApps[appInfo.applicationId] = {\n                appInfo: appInfo,\n                getState: getState,\n                commandsSubscribers: [],\n            };\n            var remove = function () {\n                delete backgroundApps[appInfo.applicationId];\n            };\n            var onCommand = function (subscriber) {\n                var _a;\n                (_a = backgroundApps[appInfo.applicationId]) === null || _a === void 0 ? void 0 : _a.commandsSubscribers.push(subscriber);\n                return {\n                    clearSubscribers: function () {\n                        if (backgroundApps[appInfo.applicationId]) {\n                            backgroundApps[appInfo.applicationId].commandsSubscribers = [];\n                        }\n                    },\n                };\n            };\n            var sendServerActionToBackgroundApp = function (serverAction, messageName, requestId) {\n                var _a;\n                if (messageName === void 0) { messageName = 'SERVER_ACTION'; }\n                if (requestId === void 0) { requestId = undefined; }\n                return sendServerAction(serverAction, messageName, requestId, (_a = backgroundApps[appInfo.applicationId]) === null || _a === void 0 ? void 0 : _a.appInfo);\n            };\n            return {\n                remove: remove,\n                onCommand: onCommand,\n                sendServerAction: sendServerActionToBackgroundApp,\n            };\n        },\n    };\n};\n\nexport { appendHeader as a, createAssistant as c };\n"]},"metadata":{},"sourceType":"module"}