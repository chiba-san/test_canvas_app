{"version":3,"sources":["store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["reducer","state","action","type","Object","objectSpread2","notes","toConsumableArray","concat","id","Math","random","toString","substring","title","note","completed","map","filter","_ref","Error","App","memo","_useReducer","useReducer","_useReducer2","slicedToArray","appState","dispatch","_useState","useState","_useState2","assistantStateRef","useRef","assistantRef","useEffect","getState","current","createAssistant","on","navigation","command","window","scrollTo","scrollY","item_selector","items","_ref2","index","number","react_default","a","createElement","className","onClick","_assistantRef$current","sendData","action_id","parameters","doneNote","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.200540e0.chunk.js","sourcesContent":["type Note = {\n    id: string;\n    title: string;\n    completed: boolean;\n};\n\ntype State = {\n    notes: Array<Note>;\n};\n\ntype Action =\n    | {\n          type: 'init';\n          notes: Array<Note>;\n      }\n    | {\n          type: 'add_note';\n          note: string;\n      }\n    | {\n          type: 'done_note';\n          id: string;\n      }\n    | {\n          type: 'delete_note';\n          id: string;\n      };\n\nexport const reducer = (state: State, action: Action) => {\n    switch (action.type) {\n        case 'init':\n            return {\n                ...state,\n                notes: [...action.notes],\n            };\n\n        case 'add_note':\n            return {\n                ...state,\n                notes: [\n                    ...state.notes,\n                    {\n                        id: Math.random().toString(36).substring(7),\n                        title: action.note,\n                        completed: false,\n                    },\n                ],\n            };\n\n        case 'done_note':\n            return {\n                ...state,\n                notes: state.notes.map((note) => (note.id === action.id ? { ...note, completed: true } : note)),\n            };\n\n        case 'delete_note':\n            return {\n                ...state,\n                notes: state.notes.filter(({ id }) => id !== action.id),\n            };\n\n        default:\n            throw new Error();\n    }\n};\n","import React, { FC, memo, useReducer, useState, useRef, useEffect } from 'react';\nimport { createSmartappDebugger, createAssistant, AssistantAppState } from '@sberdevices/assistant-client';\nimport './App.css';\n\nimport { reducer } from './store';\n\nconst initializeAssistant = (getState: any) => {\n    if (process.env.NODE_ENV === 'development' && window.Cypress == null) {\n        let result = createSmartappDebugger({\n            token: process.env.REACT_APP_TOKEN ?? '',\n            initPhrase: `Запусти ${process.env.REACT_APP_SMARTAPP}`,\n            getState,\n            nativePanel: {\n                defaultText: 'Покажи что-нибудь',\n                screenshotMode: false,\n                tabIndex: -1,\n            },\n        });\n        console.log(result);  \n        return result\n    }\n\n    return createAssistant({ getState });\n};\n\nexport const App: FC = memo(() => {\n    const [appState, dispatch] = useReducer(reducer, {\n        notes: [{ id: 'uinmh', title: 'купить хлеб', completed: false }],\n    });\n\n    const [note, setNote] = useState('');\n\n    const assistantStateRef = useRef<AssistantAppState>();\n    const assistantRef = useRef<ReturnType<typeof createAssistant>>();\n\n    useEffect(() => {\n        assistantRef.current = initializeAssistant(() => assistantStateRef.current);\n\n        assistantRef.current.on('data', ({ navigation, action }: any) => {\n            if (navigation) {\n                switch (navigation.command) {\n                    case 'UP':\n                        window.scrollTo(0, window.scrollY - 500);\n                        break;\n                    case 'DOWN':\n                        window.scrollTo(0, window.scrollY + 500);\n                        break;\n                }\n            }\n\n            if (action) {\n                dispatch(action);\n            }\n        });\n    }, []);\n\n    useEffect(() => {\n        assistantStateRef.current = {\n            item_selector: {\n                items: appState.notes.map(({ id, title }, index) => ({\n                    number: index + 1,\n                    id,\n                    title,\n                })),\n            },\n        };\n    }, [appState]);\n\n    const doneNote = (title: string) => {\n        assistantRef.current?.sendData({ action: { action_id: 'buy', parameters: { title } } });\n\n    };\n\n    return (\n        <main className=\"container\">\n            <button \n            className='button'\n            onClick={ () => doneNote(\"OfferDetails1\") } >\n                Купить SberPrime\n            </button>\n            {/* <form\n                onSubmit={(event) => {\n                    event.preventDefault();\n                    dispatch({ type: 'add_note', note });\n                    setNote('');\n                }}\n            >\n                <input\n                    className=\"add-note\"\n                    type=\"text\"\n                    placeholder=\"Add Note\"\n                    value={note}\n                    onChange={({ target: { value } }) => setNote(value)}\n                    required\n                    autoFocus\n                />\n            </form> */}\n            {/* <ul className=\"notes\">\n                {appState.notes.map((note, index) => (\n                    <li className=\"note\" key={note.id}>\n                        <span>\n                            <span style={{ fontWeight: 'bold' }}>{index + 1}. </span>\n                            <span\n                                style={{\n                                    textDecorationLine: note.completed ? 'line-through' : 'none',\n                                }}\n                            >\n                                {note.title}\n                            </span>\n                        </span>\n                        <input\n                            id={`checkbox-note-${note.id}`}\n                            className=\"done-note\"\n                            type=\"checkbox\"\n                            checked={note.completed}\n                            onChange={() => doneNote(note.title)}\n                            disabled={note.completed}\n                        />\n                    </li>\n                ))}\n            </ul> */}\n        </main>\n    );\n});\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}